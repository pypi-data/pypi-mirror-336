import os
import subprocess
import time

# ASCII Art for "Vaishal"
ASCII_ART = """
‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      
‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      
‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      
 ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      
  ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
"""

# Function to run Git commands
def run_git_command(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå Error: {result.stderr.strip()}")
        return result.stdout.strip()
    except Exception as e:
        print(f"‚ùå Exception: {e}")

# Get unstaged files
def get_unstaged_files():
    output = run_git_command("git ls-files --others --exclude-standard")  # Get untracked files
    output2 = run_git_command("git diff --name-only")  # Get modified files
    files = output.split("\n") + output2.split("\n")
    return [file.strip() for file in files if file.strip()]

# Main function
def batch_commit():
    print(ASCII_ART)  # Display ASCII art
    print("üöÄ Welcome to Vaishal's Git Commit Tool!\n")

    if not os.path.exists(".git"):
        print("‚ö†Ô∏è  This is not a Git repository! Initializing Git...")
        run_git_command("git init")

    while True:
        files = get_unstaged_files()
        if not files:
            print("‚úÖ No unstaged files found!")
            break

        print(f"\nüìÇ Total unstaged files: {len(files)}")
        try:
            num = int(input("üìå How many files do you want to stage in this batch? (0 to exit): "))
            if num == 0:
                break
        except ValueError:
            print("‚ùå Invalid input. Enter a number!")
            continue

        batch = files[:num]
        print(f"\n‚úÖ Staging {len(batch)} files...")
        run_git_command(f"git add {' '.join(batch)}")

        commit_msg = input("üìù Enter commit message: ") or "Batch commit"
        run_git_command(f'git commit -m "{commit_msg}"')

        push_choice = input("üì§ Push changes to remote? (y/n): ").strip().lower()
        if push_choice == "y":
            run_git_command("git push")

        print("‚úÖ Batch commit complete!\n")

    print("üéâ All files committed successfully!")

if __name__ == "__main__":
    batch_commit()
