# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from ...annotation_process.model import (
    AgreementAnnotationProcessView,
    AnnotationEditTimeAnnotationProcessView,
    MetricProviderAnnotationProcessView,
    PostAcceptanceAnnotationProcessView,
    QuorumAnnotationProcessView,
    StatusWorkflowAnnotationProcessView,
)


class NextTaskForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    batch_id: str
    required_count: Annotated[int, Field(ge=1, le=100)]
    ignore_assigned: bool


class NextTaskViewAnnotationEdit(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_edit_id: str | None = None
    annotation_group_id: str | None = None
    annotation_id: str | None = None
    account_id: str | None = None
    status: Literal['IN_PROGRESS', 'DONE', 'CANCELLED'] | None = None
    draft_values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    expiring_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None


class TaskManagerSettingsView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    mode: Literal['LIST', 'NEXT'] | None = None


class NextTaskViewAnnotationProcess(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_process_id: str | None = None
    annotation_group_id: str | None = None
    annotation_id: str | None = None
    data: (
        AgreementAnnotationProcessView
        | AnnotationEditTimeAnnotationProcessView
        | MetricProviderAnnotationProcessView
        | PostAcceptanceAnnotationProcessView
        | QuorumAnnotationProcessView
        | StatusWorkflowAnnotationProcessView
        | None
    ) = None


class NextTaskView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_process: NextTaskViewAnnotationProcess | None = None
    annotation_edit: NextTaskViewAnnotationEdit | None = None


class NextTaskListView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['FOUND', 'NOT_FOUND', 'MAX_IN_PROGRESS_REACHED'] | None = None
    tasks: Sequence[NextTaskView] | None = None
