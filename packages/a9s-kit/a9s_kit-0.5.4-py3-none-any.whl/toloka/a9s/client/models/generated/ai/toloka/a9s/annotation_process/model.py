# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from .model_object.ParticularAnnotationProcessDataViewJava.lang.ObjectJava.lang import (
    Object,
)


class PostAcceptanceAnnotationProcessView(Object):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    verdict: Literal['PENDING', 'ACCEPTED', 'REJECTED'] | None = None
    verdict_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None


class QuorumAnnotationProcessView(Object):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    remaining_annotations: int | None = None
    max_annotations: int | None = None
    max_annotations_per_annotator: int | None = None
    unavailable_for: Sequence[str] | None = None
    external_id: str | None = None
    draft_values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    metadata: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    priority_order: int | None = None


class StatusWorkflowAnnotationProcessViewTimeout(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    expiring_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    paused_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None


class StatusWorkflowAnnotationProcessViewTransition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    text: str | None = None
    system: bool | None = None
    privileged: bool | None = None


class StatusWorkflowAnnotationProcessViewUserView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    account_id: str | None = None
    login: str | None = None


class AgreementAnnotationProcessView(Object):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    metrics_names_mapping: Mapping[str, str] | None = None
    min_annotation_count: int | None = None
    min_agreement_confidence: float | None = None
    aggregation_function_provider: str | None = None
    similarity_function_provider: str | None = None
    aggregation_function_name: str | None = None
    similarity_function_name: str | None = None
    aggregation_function_params: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    similarity_function_params: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class AnnotationEditTimeAnnotationProcessView(Object):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    metric_name: str | None = None
    cumulative_metric_name: str | None = None


class MetricProviderAnnotationProcessView(Object):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    attemptNumber: int | None = None


class StatusWorkflowAnnotationProcessView(Object):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_process_id: str | None = None
    status_workflow_version: int | None = None
    status: str | None = None
    status_is_initial: bool | None = None
    completed: bool | None = None
    comment: str | None = None
    text: str | None = None
    allowed_transitions: Mapping[str, StatusWorkflowAnnotationProcessViewTransition] | None = None
    iteration_count: Mapping[str, int] | None = None
    responsible: StatusWorkflowAnnotationProcessViewUserView | None = None
    unavailable_for: Sequence[str] | None = None
    timeouts: Mapping[str, StatusWorkflowAnnotationProcessViewTimeout] | None = None
    priority_order: int | None = None
