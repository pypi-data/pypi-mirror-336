# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from ....annotation_process.model import StatusWorkflowAnnotationProcessView
from .assignee import AccountView


class SearchFormCondition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    field: str
    operator: Literal[
        'EQUALS',
        'NOT_EQUALS',
        'CONTAINS',
        'NOT_CONTAINS',
        'IS_EMPTY',
        'IS_NOT_EMPTY',
        'IS',
        'GREATER_THAN',
        'GREATER_THAN_OR_EQUALS',
        'LESS_THAN',
        'LESS_THAN_OR_EQUALS',
        'OLDER_THAN',
        'YOUNGER_THAN',
    ]
    value: str | None = None


class SearchFormFilterCondition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['SINGLE_FILTER_CONDITION', 'LIST_FILTER_CONDITION'] | None = None


class SearchFormListFilterCondition(SearchFormFilterCondition):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    condition_join_type: Literal['AND', 'OR']
    conditions: Annotated[Sequence[SearchFormFilterCondition], Field(max_length=2147483647, min_length=1)]


class SearchFormPagination(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    offset: Annotated[int, Field(ge=0)]
    limit: Annotated[int, Field(ge=1, le=100)]


class SearchFormSingleFilterCondition(SearchFormFilterCondition):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    field: str
    operator: Literal[
        'EQUALS',
        'NOT_EQUALS',
        'CONTAINS',
        'NOT_CONTAINS',
        'IS_EMPTY',
        'IS_NOT_EMPTY',
        'IS',
        'GREATER_THAN',
        'GREATER_THAN_OR_EQUALS',
        'LESS_THAN',
        'LESS_THAN_OR_EQUALS',
        'OLDER_THAN',
        'YOUNGER_THAN',
    ]
    value: str | None = None


class SearchFormSort(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    field: str
    direction: Literal['ASC', 'DESC']


class SearchViewBatchProcessInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: str | None = None
    statuses: Sequence[str] | None = None


class SearchViewRowElementStatusWorkflow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    id: str | None = None
    responsible: AccountView | None = None
    status: str | None = None
    text: str | None = None
    completed: bool | None = None
    status_is_initial: bool | None = None
    priority_order: int | None = None


class SearchViewRowQuorum(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    id: str | None = None
    completed_count: int | None = None
    total_count: int | None = None
    priority_order: int | None = None


class SearchCountView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    count: int | None = None
    total: int | None = None


class KeysView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    values_keys: Sequence[str] | None = None
    metadata_keys: Sequence[str] | None = None


class SearchForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    project_id: str | None = None
    batch_id: str | None = None
    conditions: Sequence[SearchFormCondition] | None = None
    condition_join_type: Literal['AND', 'OR'] | None = None
    filter: SearchFormListFilterCondition | SearchFormSingleFilterCondition | None = None
    sort: SearchFormSort | None = None
    sort_list: Sequence[SearchFormSort] | None = None
    pagination: SearchFormPagination | None = None


class SearchViewRowElement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_id: str | None = None
    annotation_edit_id: str | None = None
    annotation_edit_status: str | None = None
    assignee: AccountView | None = None
    status_workflow: SearchViewRowElementStatusWorkflow | None = None
    status_workflow_view: StatusWorkflowAnnotationProcessView | None = None
    values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    active_edit_values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    created_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    modified_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    annotation_tags: Sequence[str] | None = None
    annotation_edit_tags: Sequence[str] | None = None
    assignment_id: str | None = None
    assignment_status: str | None = None


class SearchViewRow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    group_id: str | None = None
    created_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    modified_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    group_values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    group_status: str | None = None
    annotation_count: int | None = None
    quorum: SearchViewRowQuorum | None = None
    elements: Sequence[SearchViewRowElement] | None = None
    draft_values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class SearchView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    has_more: bool | None = None
    data: Sequence[SearchViewRow] | None = None
    processes: Sequence[SearchViewBatchProcessInfo] | None = None
