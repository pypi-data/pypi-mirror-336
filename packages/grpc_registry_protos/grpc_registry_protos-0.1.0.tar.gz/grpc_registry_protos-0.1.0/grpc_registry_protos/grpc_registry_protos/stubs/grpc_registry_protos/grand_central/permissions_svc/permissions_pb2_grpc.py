# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from grpc_registry_protos.common import common_pb2 as grpc__registry__protos_dot_common_dot_common__pb2
from grpc_registry_protos.grand_central.permissions_svc import permissions_pb2 as grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grpc_registry_protos/grand_central/permissions_svc/permissions_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PermissionServiceStub(object):
    """PermissionService provides permission checking and role/identity verification.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.check_permission = channel.unary_unary(
                '/PermissionService/check_permission',
                request_serializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.CheckPermissionRequest.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.CheckPermissionResponse.FromString,
                _registered_method=True)
        self.get_roles_organization_can_manage = channel.unary_unary(
                '/PermissionService/get_roles_organization_can_manage',
                request_serializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.OrganizationRolesRequest.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.PersonRolesListResponse.FromString,
                _registered_method=True)
        self.does_person_exist = channel.unary_unary(
                '/PermissionService/does_person_exist',
                request_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.does_person_role_exist = channel.unary_unary(
                '/PermissionService/does_person_role_exist',
                request_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.does_organization_exist = channel.unary_unary(
                '/PermissionService/does_organization_exist',
                request_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.does_organization_role_exist = channel.unary_unary(
                '/PermissionService/does_organization_role_exist',
                request_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.does_resource_exist = channel.unary_unary(
                '/PermissionService/does_resource_exist',
                request_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
                response_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
                _registered_method=True)


class PermissionServiceServicer(object):
    """PermissionService provides permission checking and role/identity verification.
    """

    def check_permission(self, request, context):
        """Checks if the specified permission is granted to a user or role.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_roles_organization_can_manage(self, request, context):
        """Retrieves roles manageable by an organization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def does_person_exist(self, request, context):
        """Verifies if a specific person exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def does_person_role_exist(self, request, context):
        """Verifies if a specific person-role exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def does_organization_exist(self, request, context):
        """Checks if an organization exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def does_organization_role_exist(self, request, context):
        """Checks if an organization-role exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def does_resource_exist(self, request, context):
        """Checks if a specified resource exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PermissionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'check_permission': grpc.unary_unary_rpc_method_handler(
                    servicer.check_permission,
                    request_deserializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.CheckPermissionRequest.FromString,
                    response_serializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.CheckPermissionResponse.SerializeToString,
            ),
            'get_roles_organization_can_manage': grpc.unary_unary_rpc_method_handler(
                    servicer.get_roles_organization_can_manage,
                    request_deserializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.OrganizationRolesRequest.FromString,
                    response_serializer=grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.PersonRolesListResponse.SerializeToString,
            ),
            'does_person_exist': grpc.unary_unary_rpc_method_handler(
                    servicer.does_person_exist,
                    request_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.FromString,
                    response_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.SerializeToString,
            ),
            'does_person_role_exist': grpc.unary_unary_rpc_method_handler(
                    servicer.does_person_role_exist,
                    request_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.FromString,
                    response_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.SerializeToString,
            ),
            'does_organization_exist': grpc.unary_unary_rpc_method_handler(
                    servicer.does_organization_exist,
                    request_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.FromString,
                    response_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.SerializeToString,
            ),
            'does_organization_role_exist': grpc.unary_unary_rpc_method_handler(
                    servicer.does_organization_role_exist,
                    request_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.FromString,
                    response_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.SerializeToString,
            ),
            'does_resource_exist': grpc.unary_unary_rpc_method_handler(
                    servicer.does_resource_exist,
                    request_deserializer=grpc__registry__protos_dot_common_dot_common__pb2.BasicID.FromString,
                    response_serializer=grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PermissionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('PermissionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PermissionService(object):
    """PermissionService provides permission checking and role/identity verification.
    """

    @staticmethod
    def check_permission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/check_permission',
            grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.CheckPermissionRequest.SerializeToString,
            grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.CheckPermissionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_roles_organization_can_manage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/get_roles_organization_can_manage',
            grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.OrganizationRolesRequest.SerializeToString,
            grpc__registry__protos_dot_grand__central_dot_permissions__svc_dot_permissions__pb2.PersonRolesListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def does_person_exist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/does_person_exist',
            grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
            grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def does_person_role_exist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/does_person_role_exist',
            grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
            grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def does_organization_exist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/does_organization_exist',
            grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
            grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def does_organization_role_exist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/does_organization_role_exist',
            grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
            grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def does_resource_exist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PermissionService/does_resource_exist',
            grpc__registry__protos_dot_common_dot_common__pb2.BasicID.SerializeToString,
            grpc__registry__protos_dot_common_dot_common__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
