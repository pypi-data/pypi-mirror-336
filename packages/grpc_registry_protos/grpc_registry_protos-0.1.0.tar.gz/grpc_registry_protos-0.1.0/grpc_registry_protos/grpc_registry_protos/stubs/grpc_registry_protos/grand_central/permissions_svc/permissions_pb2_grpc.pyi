"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import grpc_registry_protos.common.common_pb2
import grpc_registry_protos.grand_central.permissions_svc.permissions_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PermissionServiceStub:
    """PermissionService provides permission checking and role/identity verification."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    check_permission: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionRequest,
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionResponse,
    ]
    """Checks if the specified permission is granted to a user or role."""

    get_roles_organization_can_manage: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.OrganizationRolesRequest,
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.PersonRolesListResponse,
    ]
    """Retrieves roles manageable by an organization."""

    does_person_exist: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Verifies if a specific person exists."""

    does_person_role_exist: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Verifies if a specific person-role exists."""

    does_organization_exist: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Checks if an organization exists."""

    does_organization_role_exist: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Checks if an organization-role exists."""

    does_resource_exist: grpc.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Checks if a specified resource exists."""

class PermissionServiceAsyncStub:
    """PermissionService provides permission checking and role/identity verification."""

    check_permission: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionRequest,
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionResponse,
    ]
    """Checks if the specified permission is granted to a user or role."""

    get_roles_organization_can_manage: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.OrganizationRolesRequest,
        grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.PersonRolesListResponse,
    ]
    """Retrieves roles manageable by an organization."""

    does_person_exist: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Verifies if a specific person exists."""

    does_person_role_exist: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Verifies if a specific person-role exists."""

    does_organization_exist: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Checks if an organization exists."""

    does_organization_role_exist: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Checks if an organization-role exists."""

    does_resource_exist: grpc.aio.UnaryUnaryMultiCallable[
        grpc_registry_protos.common.common_pb2.BasicID,
        grpc_registry_protos.common.common_pb2.BooleanResponse,
    ]
    """Checks if a specified resource exists."""

class PermissionServiceServicer(metaclass=abc.ABCMeta):
    """PermissionService provides permission checking and role/identity verification."""

    @abc.abstractmethod
    def check_permission(
        self,
        request: grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionRequest,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionResponse, collections.abc.Awaitable[grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.CheckPermissionResponse]]:
        """Checks if the specified permission is granted to a user or role."""

    @abc.abstractmethod
    def get_roles_organization_can_manage(
        self,
        request: grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.OrganizationRolesRequest,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.PersonRolesListResponse, collections.abc.Awaitable[grpc_registry_protos.grand_central.permissions_svc.permissions_pb2.PersonRolesListResponse]]:
        """Retrieves roles manageable by an organization."""

    @abc.abstractmethod
    def does_person_exist(
        self,
        request: grpc_registry_protos.common.common_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.common.common_pb2.BooleanResponse, collections.abc.Awaitable[grpc_registry_protos.common.common_pb2.BooleanResponse]]:
        """Verifies if a specific person exists."""

    @abc.abstractmethod
    def does_person_role_exist(
        self,
        request: grpc_registry_protos.common.common_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.common.common_pb2.BooleanResponse, collections.abc.Awaitable[grpc_registry_protos.common.common_pb2.BooleanResponse]]:
        """Verifies if a specific person-role exists."""

    @abc.abstractmethod
    def does_organization_exist(
        self,
        request: grpc_registry_protos.common.common_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.common.common_pb2.BooleanResponse, collections.abc.Awaitable[grpc_registry_protos.common.common_pb2.BooleanResponse]]:
        """Checks if an organization exists."""

    @abc.abstractmethod
    def does_organization_role_exist(
        self,
        request: grpc_registry_protos.common.common_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.common.common_pb2.BooleanResponse, collections.abc.Awaitable[grpc_registry_protos.common.common_pb2.BooleanResponse]]:
        """Checks if an organization-role exists."""

    @abc.abstractmethod
    def does_resource_exist(
        self,
        request: grpc_registry_protos.common.common_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[grpc_registry_protos.common.common_pb2.BooleanResponse, collections.abc.Awaitable[grpc_registry_protos.common.common_pb2.BooleanResponse]]:
        """Checks if a specified resource exists."""

def add_PermissionServiceServicer_to_server(servicer: PermissionServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
