# coding: utf-8

"""
    AristaFlowREST/SimpleProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Edge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'type': 'str',
        'edge_code': 'int',
        'user_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'sub_class': 'subClass',
        'type': 'type',
        'edge_code': 'edgeCode',
        'user_attributes': 'userAttributes'
    }

    def __init__(self, sub_class=None, type=None, edge_code=None, user_attributes=None):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._type = None
        self._edge_code = None
        self._user_attributes = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if sub_class is not None:
            self.sub_class = sub_class
        self.type = type
        self.edge_code = edge_code
        if user_attributes is not None:
            self.user_attributes = user_attributes

    @property
    def sub_class(self):
        """Gets the sub_class of this Edge.  # noqa: E501


        :return: The sub_class of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this Edge.


        :param sub_class: The sub_class of this Edge.  # noqa: E501
        :type: str
        """

        self._sub_class = sub_class

    @property
    def type(self):
        """Gets the type of this Edge.  # noqa: E501


        :return: The type of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Edge.


        :param type: The type of this Edge.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ET_CONTROL", "ET_LOOP", "ET_SYNC"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def edge_code(self):
        """Gets the edge_code of this Edge.  # noqa: E501


        :return: The edge_code of this Edge.  # noqa: E501
        :rtype: int
        """
        return self._edge_code

    @edge_code.setter
    def edge_code(self, edge_code):
        """Sets the edge_code of this Edge.


        :param edge_code: The edge_code of this Edge.  # noqa: E501
        :type: int
        """
        if edge_code is None:
            raise ValueError("Invalid value for `edge_code`, must not be `None`")  # noqa: E501

        self._edge_code = edge_code

    @property
    def user_attributes(self):
        """Gets the user_attributes of this Edge.  # noqa: E501


        :return: The user_attributes of this Edge.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this Edge.


        :param user_attributes: The user_attributes of this Edge.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_attributes = user_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Edge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
