# coding: utf-8

"""
    AristaFlowREST/SimpleProcessImageRenderer

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'session_id': 'str',
        'caller_uris': 'list[str]',
        'attributes': 'dict(str, str)',
        'parent_session': 'Session'
    }

    attribute_map = {
        'sub_class': 'subClass',
        'session_id': 'sessionId',
        'caller_uris': 'callerUris',
        'attributes': 'attributes',
        'parent_session': 'parentSession'
    }

    def __init__(self, sub_class=None, session_id=None, caller_uris=None, attributes=None, parent_session=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._session_id = None
        self._caller_uris = None
        self._attributes = None
        self._parent_session = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if sub_class is not None:
            self.sub_class = sub_class
        self.session_id = session_id
        self.caller_uris = caller_uris
        if attributes is not None:
            self.attributes = attributes
        if parent_session is not None:
            self.parent_session = parent_session

    @property
    def sub_class(self):
        """Gets the sub_class of this Session.  # noqa: E501


        :return: The sub_class of this Session.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this Session.


        :param sub_class: The sub_class of this Session.  # noqa: E501
        :type: str
        """

        self._sub_class = sub_class

    @property
    def session_id(self):
        """Gets the session_id of this Session.  # noqa: E501


        :return: The session_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Session.


        :param session_id: The session_id of this Session.  # noqa: E501
        :type: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def caller_uris(self):
        """Gets the caller_uris of this Session.  # noqa: E501


        :return: The caller_uris of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._caller_uris

    @caller_uris.setter
    def caller_uris(self, caller_uris):
        """Sets the caller_uris of this Session.


        :param caller_uris: The caller_uris of this Session.  # noqa: E501
        :type: list[str]
        """
        if caller_uris is None:
            raise ValueError("Invalid value for `caller_uris`, must not be `None`")  # noqa: E501

        self._caller_uris = caller_uris

    @property
    def attributes(self):
        """Gets the attributes of this Session.  # noqa: E501


        :return: The attributes of this Session.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Session.


        :param attributes: The attributes of this Session.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def parent_session(self):
        """Gets the parent_session of this Session.  # noqa: E501


        :return: The parent_session of this Session.  # noqa: E501
        :rtype: Session
        """
        return self._parent_session

    @parent_session.setter
    def parent_session(self, parent_session):
        """Sets the parent_session of this Session.


        :param parent_session: The parent_session of this Session.  # noqa: E501
        :type: Session
        """

        self._parent_session = parent_session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
