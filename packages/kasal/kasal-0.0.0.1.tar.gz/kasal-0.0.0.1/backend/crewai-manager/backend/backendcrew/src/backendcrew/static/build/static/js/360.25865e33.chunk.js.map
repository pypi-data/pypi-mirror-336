{"version":3,"file":"static/js/360.25865e33.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Translate.js","components/Configuration/Configuration.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m12.87 15.07-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2zm-2.62 7 1.62-4.33L19.12 17z\"\n}), 'Translate');","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Alert,\n  TextField,\n  Button,\n  Snackbar,\n  CircularProgress,\n  Stack,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Divider,\n  SelectChangeEvent,\n  Switch,\n  FormControlLabel,\n} from '@mui/material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport SaveIcon from '@mui/icons-material/Save';\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport { useTranslation } from 'react-i18next';\nimport { DatabricksService, DatabricksConfig } from '../../services/DatabricksService';\nimport { LanguageService } from '../../services/LanguageService';\nimport { LANGUAGES } from '../../i18n/config';\n\nfunction Configuration(): JSX.Element {\n  const { t } = useTranslation();\n  const [config, setConfig] = useState<DatabricksConfig>({\n    workspace_url: '',\n    warehouse_id: '',\n    catalog: '',\n    schema: '',\n    secret_scope: '',\n    enabled: false,\n  });\n  const [currentLanguage, setCurrentLanguage] = useState<string>('en');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'success' as 'success' | 'error',\n  });\n\n  useEffect(() => {\n    const loadConfig = async () => {\n      try {\n        const databricksService = DatabricksService.getInstance();\n        const savedConfig = await databricksService.getDatabricksConfig();\n        setConfig(savedConfig);\n\n        const languageService = LanguageService.getInstance();\n        const currentLang = await languageService.getCurrentLanguage();\n        setCurrentLanguage(currentLang);\n      } catch (error) {\n        const savedConfig = localStorage.getItem('DATABRICKS_CONFIG');\n        if (savedConfig) {\n          setConfig(JSON.parse(savedConfig));\n        }\n      }\n    };\n\n    loadConfig();\n  }, []);\n\n  const handleSaveConfig = async () => {\n    // If Databricks is enabled, validate all required fields\n    if (config.enabled) {\n      const requiredFields = {\n        'Warehouse ID': config.warehouse_id,\n        'Catalog': config.catalog,\n        'Schema': config.schema,\n        'Secret Scope': config.secret_scope,\n      };\n\n      for (const [field, value] of Object.entries(requiredFields)) {\n        if (!value.trim()) {\n          setNotification({\n            open: true,\n            message: `Please enter a ${field}`,\n            severity: 'error',\n          });\n          return;\n        }\n      }\n    }\n\n    setLoading(true);\n    try {\n      const databricksService = DatabricksService.getInstance();\n      const savedConfig = await databricksService.setDatabricksConfig(config);\n      localStorage.setItem('DATABRICKS_CONFIG', JSON.stringify(savedConfig));\n      \n      setNotification({\n        open: true,\n        message: t('configuration.databricks.saved'),\n        severity: 'success',\n      });\n    } catch (error) {\n      console.error('Error saving Databricks configuration:', error);\n      setNotification({\n        open: true,\n        message: error instanceof Error ? error.message : 'Failed to save Databricks configuration',\n        severity: 'error',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLanguageChange = async (event: SelectChangeEvent<string>) => {\n    const newLanguage = event.target.value;\n    try {\n      const languageService = LanguageService.getInstance();\n      await languageService.setLanguage(newLanguage);\n      setCurrentLanguage(newLanguage);\n      setNotification({\n        open: true,\n        message: t('configuration.language.saved'),\n        severity: 'success',\n      });\n    } catch (error) {\n      console.error('Error changing language:', error);\n      setNotification({\n        open: true,\n        message: error instanceof Error ? error.message : 'Failed to change language',\n        severity: 'error',\n      });\n    }\n  };\n\n  const handleCloseNotification = () => {\n    setNotification({ ...notification, open: false });\n  };\n\n  const handleInputChange = (field: keyof DatabricksConfig) => (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setConfig(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleDatabricksToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setConfig(prev => ({\n      ...prev,\n      enabled: event.target.checked\n    }));\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n          <SettingsIcon sx={{ mr: 1, color: 'primary.main' }} />\n          <Typography variant=\"h5\">{t('configuration.title')}</Typography>\n        </Box>\n\n        {/* Language Settings */}\n        <Box sx={{ maxWidth: 600, mb: 4 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <TranslateIcon sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography variant=\"h6\">{t('configuration.language.title')}</Typography>\n          </Box>\n          \n          <FormControl fullWidth>\n            <InputLabel id=\"language-select-label\">\n              {t('configuration.language.select')}\n            </InputLabel>\n            <Select\n              labelId=\"language-select-label\"\n              value={currentLanguage}\n              onChange={handleLanguageChange}\n              label={t('configuration.language.select')}\n            >\n              {Object.entries(LANGUAGES).map(([code, { nativeName }]) => (\n                <MenuItem key={code} value={code}>\n                  {nativeName}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n\n        <Divider sx={{ my: 4 }} />\n\n        {/* Databricks Settings */}\n        <Box sx={{ maxWidth: 600 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n            <Typography variant=\"h6\">\n              {t('configuration.databricks.title')}\n            </Typography>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={config.enabled}\n                  onChange={handleDatabricksToggle}\n                  color=\"primary\"\n                />\n              }\n              label={config.enabled ? t('common.enabled') : t('common.disabled')}\n            />\n          </Box>\n          \n          <Stack spacing={2} sx={{ mb: 2 }}>\n            <TextField\n              label={t('configuration.databricks.warehouseId')}\n              value={config.warehouse_id}\n              onChange={handleInputChange('warehouse_id')}\n              fullWidth\n              disabled={loading || !config.enabled}\n            />\n\n            <TextField\n              label={t('configuration.databricks.catalog')}\n              value={config.catalog}\n              onChange={handleInputChange('catalog')}\n              fullWidth\n              disabled={loading || !config.enabled}\n            />\n\n            <TextField\n              label={t('configuration.databricks.schema')}\n              value={config.schema}\n              onChange={handleInputChange('schema')}\n              fullWidth\n              disabled={loading || !config.enabled}\n            />\n\n            <TextField\n              label={t('configuration.databricks.secretScope')}\n              value={config.secret_scope}\n              onChange={handleInputChange('secret_scope')}\n              fullWidth\n              disabled={loading || !config.enabled}\n            />\n\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n              <Button\n                variant=\"contained\"\n                startIcon={loading ? <CircularProgress size={20} /> : <SaveIcon />}\n                onClick={handleSaveConfig}\n                disabled={loading}\n              >\n                {loading ? t('common.loading') : t('common.save')}\n              </Button>\n            </Box>\n          </Stack>\n\n          {!config.enabled && (\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              {t('configuration.databricks.disabledInfo') || 'When Databricks integration is disabled, UC Tools and Databricks-stored API keys will not be available.'}\n            </Alert>\n          )}\n        </Box>\n\n        <Snackbar\n          open={notification.open}\n          autoHideDuration={6000}\n          onClose={handleCloseNotification}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        >\n          <Alert\n            onClose={handleCloseNotification}\n            severity={notification.severity}\n            sx={{ width: '100%' }}\n          >\n            {notification.message}\n          </Alert>\n        </Snackbar>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Configuration; "],"names":["createSvgIcon","_jsx","d","t","useTranslation","config","setConfig","useState","workspace_url","warehouse_id","catalog","schema","secret_scope","enabled","currentLanguage","setCurrentLanguage","loading","setLoading","notification","setNotification","open","message","severity","useEffect","async","databricksService","DatabricksService","getInstance","savedConfig","getDatabricksConfig","languageService","LanguageService","currentLang","getCurrentLanguage","error","localStorage","getItem","JSON","parse","loadConfig","handleCloseNotification","_objectSpread","handleInputChange","field","event","prev","target","value","Card","children","_jsxs","CardContent","Box","sx","display","alignItems","mb","SettingsIcon","mr","color","Typography","variant","maxWidth","TranslateIcon","FormControl","fullWidth","InputLabel","id","Select","labelId","onChange","newLanguage","setLanguage","console","Error","label","Object","entries","LANGUAGES","map","_ref","code","nativeName","MenuItem","Divider","my","justifyContent","FormControlLabel","control","Switch","checked","Stack","spacing","TextField","disabled","Button","startIcon","CircularProgress","size","SaveIcon","onClick","requiredFields","trim","concat","setDatabricksConfig","setItem","stringify","Alert","mt","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","width"],"sourceRoot":""}