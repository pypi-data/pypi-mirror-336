{"version":3,"file":"static/js/608.860252b9.chunk.js","mappings":"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","sources":["components/Tools/UCTools.tsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  Collapse,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport { UCToolsProps } from '../../interfaces/tool';\nimport { useTranslation } from 'react-i18next';\n\nfunction UCTools({ tools, loading, error }: UCToolsProps): JSX.Element {\n  const [expandedTool, setExpandedTool] = useState<string | null>(null);\n  const { t } = useTranslation();\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card sx={{ mt: 8 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n            <StorageIcon sx={{ mr: 1, color: 'error.main' }} />\n            <Typography variant=\"h5\">{t('tools.uc.title')}</Typography>\n          </Box>\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ mt: 8 }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <StorageIcon sx={{ mr: 1, color: 'primary.main' }} />\n          <Typography variant=\"h5\">{t('tools.uc.title')}</Typography>\n        </Box>\n\n        {tools.length === 0 ? (\n          <Alert severity=\"info\">{t('tools.uc.noTools')}</Alert>\n        ) : (\n          <TableContainer component={Paper} sx={{ mt: 0 }}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>{t('tools.uc.columns.name')}</TableCell>\n                  <TableCell>{t('tools.uc.columns.catalog')}</TableCell>\n                  <TableCell>{t('tools.uc.columns.schema')}</TableCell>\n                  <TableCell>{t('tools.uc.columns.description')}</TableCell>\n                  <TableCell>{t('tools.uc.columns.actions')}</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {tools.map((tool) => (\n                  <Fragment key={tool.name}>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        <Typography variant=\"subtitle2\">{tool.name}</Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={tool.catalog} \n                          size=\"small\"\n                          color=\"primary\"\n                          variant=\"outlined\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={tool.schema} \n                          size=\"small\"\n                          color=\"secondary\"\n                          variant=\"outlined\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {tool.comment ? \n                          (tool.comment.length > 100 ? \n                            `${tool.comment.substring(0, 100)}...` : \n                            tool.comment) :\n                          t('tools.uc.details.noDescription')\n                        }\n                      </TableCell>\n                      <TableCell>\n                        <IconButton\n                          onClick={() => setExpandedTool(expandedTool === tool.full_name ? null : tool.full_name)}\n                        >\n                          {expandedTool === tool.full_name ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={5}>\n                        <Collapse in={expandedTool === tool.full_name} timeout=\"auto\" unmountOnExit>\n                          <Box sx={{ margin: 1 }}>\n                            <Typography variant=\"subtitle2\" gutterBottom component=\"div\">\n                              {t('tools.uc.details.title')}:\n                            </Typography>\n                            <Box sx={{ mb: 2 }}>\n                              <Typography variant=\"body2\" component=\"pre\" sx={{ \n                                whiteSpace: 'pre-wrap',\n                                backgroundColor: '#f5f5f5',\n                                p: 2,\n                                borderRadius: 1\n                              }}>\n                                {JSON.stringify({\n                                  fullName: tool.full_name,\n                                  returnType: tool.return_type,\n                                  parameters: tool.input_params.map(param => ({\n                                    name: param.name,\n                                    type: param.type,\n                                    required: param.required\n                                  })),\n                                  comment: tool.comment\n                                }, null, 2)}\n                              </Typography>\n                            </Box>\n                          </Box>\n                        </Collapse>\n                      </TableCell>\n                    </TableRow>\n                  </Fragment>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default UCTools; "],"names":["_ref","tools","loading","error","expandedTool","setExpandedTool","useState","t","useTranslation","_jsx","Box","sx","display","justifyContent","p","children","CircularProgress","Card","mt","_jsxs","CardContent","alignItems","mb","StorageIcon","mr","color","Typography","variant","Alert","severity","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","tool","Fragment","scope","name","Chip","label","catalog","size","schema","comment","concat","substring","IconButton","onClick","full_name","ExpandLessIcon","ExpandMoreIcon","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","whiteSpace","backgroundColor","borderRadius","JSON","stringify","fullName","returnType","return_type","parameters","input_params","param","type","required"],"sourceRoot":""}