{"version":3,"file":"static/js/863.a809e096.chunk.js","mappings":"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","sources":["components/Configuration/APIKeys/APIKeys.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Snackbar,\n  Alert,\n  Tooltip,\n  AlertColor,\n  CircularProgress,\n  Tabs,\n  Tab,\n} from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport KeyIcon from '@mui/icons-material/Key';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport { APIKeysService, Secret, SecretCreate, SecretUpdate } from '../../../services';\nimport { useAPIKeys } from '../../../contexts/APIKeysContext';\nimport { NotificationState } from '../../../interfaces/common';\n\nfunction APIKeys(): JSX.Element {\n  const { secrets, loading, error, updateSecrets } = useAPIKeys();\n  const [editDialog, setEditDialog] = useState<boolean>(false);\n  const [editingSecret, setEditingSecret] = useState<Secret | null>(null);\n  const [notification, setNotification] = useState<NotificationState>({ \n    open: false, \n    message: '', \n    severity: 'success' \n  });\n  const [visibleSecrets, setVisibleSecrets] = useState<Record<string, boolean>>({});\n  const [createDialog, setCreateDialog] = useState<boolean>(false);\n  const [newSecret, setNewSecret] = useState<SecretCreate>({ \n    name: '', \n    value: '', \n    description: '' \n  });\n  const [databricksEnabled, setDatabricksEnabled] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<number>(0);\n\n  const showNotification = useCallback((message: string, severity: AlertColor = 'success') => {\n    setNotification({\n      open: true,\n      message,\n      severity,\n    });\n  }, []);\n\n  const fetchSecrets = useCallback(async () => {\n    try {\n      const apiKeysService = APIKeysService.getInstance();\n      const secretsData = await apiKeysService.getAPIKeys();\n      updateSecrets(secretsData);\n    } catch (error) {\n      showNotification(error instanceof Error ? error.message : 'Error fetching API keys', 'error');\n    }\n  }, [showNotification, updateSecrets]);\n\n  useEffect(() => {\n    const checkDatabricksEnabled = async () => {\n      try {\n        const apiKeysService = APIKeysService.getInstance();\n        const enabled = await apiKeysService.isDatabricksEnabled();\n        setDatabricksEnabled(enabled);\n      } catch (error) {\n        console.error('Error checking Databricks enabled state:', error);\n        setDatabricksEnabled(false);\n      }\n    };\n\n    checkDatabricksEnabled();\n  }, []);\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  // Filter secrets by source\n  const sqliteSecrets = secrets.filter((secret: Secret) => secret.source === 'sqlite');\n  const databricksSecrets = secrets.filter((secret: Secret) => secret.source === 'databricks');\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card sx={{ mt: 8 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n            <KeyIcon sx={{ mr: 1, color: 'error.main' }} />\n            <Typography variant=\"h5\">API Keys & Secrets</Typography>\n          </Box>\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const handleEdit = (secret: Secret) => {\n    setEditingSecret(secret);\n    setEditDialog(true);\n  };\n\n  const handleSave = async () => {\n    try {\n      if (!editingSecret?.value) {\n        showNotification('Value is required', 'error');\n        return;\n      }\n\n      const apiKeysService = APIKeysService.getInstance();\n      const updateData: SecretUpdate = {\n        value: editingSecret.value,\n        description: editingSecret.description || ''\n      };\n      \n      const result = await apiKeysService.updateAPIKey(editingSecret.name, updateData);\n      setEditDialog(false);\n      await fetchSecrets();\n      showNotification(result.message);\n    } catch (error) {\n      showNotification(error instanceof Error ? error.message : 'Error updating API key', 'error');\n    }\n  };\n\n  const toggleVisibility = (secretId: number) => {\n    setVisibleSecrets(prev => ({\n      ...prev,\n      [secretId]: !prev[secretId]\n    }));\n  };\n\n  const formatSecretValue = (value: string, visible: boolean) => {\n    if (!visible) {\n      return '••••••••••••••••';\n    }\n    return value;\n  };\n\n  const handleCreate = async () => {\n    try {\n      if (!newSecret.name || !newSecret.value) {\n        showNotification('Name and value are required', 'error');\n        return;\n      }\n\n      const apiKeysService = APIKeysService.getInstance();\n      const result = await apiKeysService.createAPIKey({\n        name: newSecret.name.trim(),\n        value: newSecret.value,\n        description: newSecret.description || ''\n      });\n      \n      setCreateDialog(false);\n      setNewSecret({ name: '', value: '', description: '' });\n      await fetchSecrets();\n      showNotification(result.message);\n    } catch (error) {\n      showNotification(error instanceof Error ? error.message : 'Error creating API key', 'error');\n    }\n  };\n\n  const handleDelete = async (secretName: string) => {\n    if (window.confirm(`Are you sure you want to delete the key \"${secretName}\"?`)) {\n      try {\n        const apiKeysService = APIKeysService.getInstance();\n        const result = await apiKeysService.deleteAPIKey(secretName);\n        \n        await fetchSecrets();\n        showNotification(result.message);\n      } catch (error) {\n        showNotification(error instanceof Error ? error.message : 'Error deleting API key', 'error');\n      }\n    }\n  };\n\n  const renderSecretTable = (secretsList: Secret[], source: string) => {\n    const isDisabled = source === 'databricks' && !databricksEnabled;\n\n    return (\n      <Box sx={{ opacity: isDisabled ? 0.6 : 1, pointerEvents: isDisabled ? 'none' : 'auto' }}>\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Key Name</TableCell>\n                <TableCell>Value</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Scope</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {secretsList.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={5} align=\"center\">\n                    No API keys found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                secretsList.map((secret) => (\n                  <TableRow key={secret.id}>\n                    <TableCell>{secret.name}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        {formatSecretValue(secret.value, visibleSecrets[secret.id])}\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => toggleVisibility(secret.id)}\n                        >\n                          {visibleSecrets[secret.id] ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                        </IconButton>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{secret.description}</TableCell>\n                    <TableCell>{secret.scope}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <Tooltip title=\"Edit\">\n                          <IconButton onClick={() => handleEdit(secret)}>\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete\">\n                          <IconButton onClick={() => handleDelete(secret.name)} color=\"error\">\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    );\n  };\n\n  return (\n    <Card sx={{ mt: 8 }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <KeyIcon sx={{ mr: 1, color: 'primary.main' }} />\n          <Typography variant=\"h5\">API Keys & Secrets</Typography>\n        </Box>\n\n        <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 2 }}>\n          <Tab \n            icon={<KeyIcon />} \n            label=\"Local Keys\" \n            iconPosition=\"start\"\n          />\n          <Tab \n            icon={<StorageIcon />} \n            label=\"Databricks Keys\" \n            iconPosition=\"start\"\n            disabled={!databricksEnabled}\n          />\n        </Tabs>\n\n        {activeTab === 0 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Local API Keys\n            </Typography>\n            {renderSecretTable(sqliteSecrets, 'sqlite')}\n          </Box>\n        )}\n\n        {activeTab === 1 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Databricks API Keys\n            </Typography>\n            {databricksEnabled ? (\n              renderSecretTable(databricksSecrets, 'databricks')\n            ) : (\n              <Alert severity=\"info\" sx={{ mt: 2 }}>\n                Databricks integration is disabled. Enable it in the Configuration page to use Databricks API keys.\n              </Alert>\n            )}\n          </Box>\n        )}\n\n        <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialog(true)}\n          >\n            Add New Key\n          </Button>\n        </Box>\n\n        <Dialog open={editDialog} onClose={() => setEditDialog(false)}>\n          <DialogTitle>Edit API Key</DialogTitle>\n          <DialogContent>\n            <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <TextField\n                label=\"Key Name\"\n                value={editingSecret?.name || ''}\n                disabled\n                fullWidth\n              />\n              <TextField\n                label=\"Value\"\n                value={editingSecret?.value || ''}\n                onChange={(e) => setEditingSecret((prev: Secret | null) => prev ? { ...prev, value: e.target.value } : null)}\n                fullWidth\n                required\n              />\n              <TextField\n                label=\"Description\"\n                value={editingSecret?.description || ''}\n                onChange={(e) => setEditingSecret((prev: Secret | null) => prev ? { ...prev, description: e.target.value } : null)}\n                fullWidth\n              />\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setEditDialog(false)}>Cancel</Button>\n            <Button onClick={handleSave} variant=\"contained\">Save</Button>\n          </DialogActions>\n        </Dialog>\n\n        <Dialog open={createDialog} onClose={() => setCreateDialog(false)}>\n          <DialogTitle>Add New API Key</DialogTitle>\n          <DialogContent>\n            <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <TextField\n                label=\"Key Name\"\n                value={newSecret.name}\n                onChange={(e) => setNewSecret((prev: SecretCreate) => ({ ...prev, name: e.target.value }))}\n                fullWidth\n                required\n              />\n              <TextField\n                label=\"Value\"\n                value={newSecret.value}\n                onChange={(e) => setNewSecret((prev: SecretCreate) => ({ ...prev, value: e.target.value }))}\n                fullWidth\n                required\n              />\n              <TextField\n                label=\"Description\"\n                value={newSecret.description}\n                onChange={(e) => setNewSecret((prev: SecretCreate) => ({ ...prev, description: e.target.value }))}\n                fullWidth\n              />\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setCreateDialog(false)}>Cancel</Button>\n            <Button onClick={handleCreate} variant=\"contained\">Create</Button>\n          </DialogActions>\n        </Dialog>\n\n        <Snackbar\n          open={notification.open}\n          autoHideDuration={6000}\n          onClose={() => setNotification((prev: NotificationState) => ({ ...prev, open: false }))}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        >\n          <Alert\n            onClose={() => setNotification((prev: NotificationState) => ({ ...prev, open: false }))}\n            severity={notification.severity}\n            sx={{ width: '100%' }}\n          >\n            {notification.message}\n          </Alert>\n        </Snackbar>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default APIKeys; "],"names":["secrets","loading","error","updateSecrets","useAPIKeys","editDialog","setEditDialog","useState","editingSecret","setEditingSecret","notification","setNotification","open","message","severity","visibleSecrets","setVisibleSecrets","createDialog","setCreateDialog","newSecret","setNewSecret","name","value","description","databricksEnabled","setDatabricksEnabled","activeTab","setActiveTab","showNotification","useCallback","arguments","length","undefined","fetchSecrets","async","apiKeysService","APIKeysService","getInstance","secretsData","getAPIKeys","Error","useEffect","enabled","isDatabricksEnabled","console","checkDatabricksEnabled","sqliteSecrets","filter","secret","source","databricksSecrets","_jsx","Box","sx","display","justifyContent","p","children","CircularProgress","Card","mt","_jsxs","CardContent","alignItems","mb","KeyIcon","mr","color","Typography","variant","Alert","renderSecretTable","secretsList","isDisabled","opacity","pointerEvents","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","colSpan","align","map","gap","visible","id","IconButton","size","onClick","toggleVisibility","secretId","prev","_objectSpread","VisibilityOffIcon","VisibilityIcon","scope","Tooltip","title","handleEdit","EditIcon","window","confirm","concat","secretName","result","deleteAPIKey","handleDelete","DeleteIcon","formatSecretValue","Tabs","onChange","handleTabChange","_event","newValue","Tab","icon","label","iconPosition","StorageIcon","disabled","gutterBottom","Button","startIcon","AddIcon","Dialog","onClose","DialogTitle","DialogContent","pt","flexDirection","TextField","fullWidth","e","target","required","DialogActions","updateData","updateAPIKey","createAPIKey","trim","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","width"],"sourceRoot":""}