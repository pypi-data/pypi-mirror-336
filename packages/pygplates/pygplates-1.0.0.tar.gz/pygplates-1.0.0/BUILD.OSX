Build On macOS

Table of Contents

 1. Introduction
 2. Development environment
 3. Install dependencies
 4. Build the GPlates application
     1. Compiling GPlates
     2. Installing GPlates
 5. Build the pyGPlates Python package
     1. Compiling and installing pyGPlates

Introduction

This is a guide to building GPlates or pyGPlates from source code in a macOS development environment.

Note: This source code originated from a "pygplates" branch of the GPlates GitHub repository
      (https://github.com/GPlates/GPlates) and should only be used to compile pyGPlates (not GPlates).


Development environment

You'll need the command-line tools for XCode installed. If you have not already installed XCode then this can be
accomplished by running the following in a terminal window (open Applications->Utilities->Terminal in Finder):

    xcode-select --install


Install dependencies

Firstly, you should ensure that you have installed all the packages which are dependencies for compilation.

See "DEPS.OSX" for more information on installing dependencies.


Build the GPlates application

Note: If you are compiling pyGPlates source code then refer to "Build the pyGPlates Python package".


Compiling GPlates

 1. Open a terminal window (Applications->Utilities->Terminal in Finder).
 2. Change your working directory into the base directory of the GPlates source code.
 3. Build GPlates by typing:

    cmake .
    make

The GPlates application bundle will be called "gplates.app" and is located in the "bin" directory.
However this will appear simply as 'gplates' in the file explorer (Finder),
and you can run GPlates by double-clicking on it.

Alternatively, to run gplates from the command-line (Terminal window) you can type:

    bin/gplates.app/Contents/MacOS/gplates

...this is because the actual gplates executable is installed inside the GPlates application bundle.

If you want to do more than test GPlates from this local build directory, you will need to install it on your system.


Installing GPlates

Unlike Linux, on macOS GPlates is installed as a standalone bundle.
This means the dependency libraries are included inside the GPlates application bundle.

The command

    cmake --install . --prefix <install_dir>

will install a GPlates standalone application bundle to the directory specified by '--prefix'.
For example:

    cmake .
    make
    cmake --install . --prefix $HOME

will install a standalone GPlates into your home directory.


Build the pyGPlates Python package

Note: If you are compiling GPlates source code then refer to "Build the GPlates application".


Compiling and installing pyGPlates

 1. Open a terminal window (Applications->Utilities->Terminal in Finder).
 2. Change your working directory into the base directory of the pyGPlates source code.
 3. It's advisable to install into a Python environment.
    For example, to create and activate a Python environment called 'my-env-name', type:

    python -m venv my-env-name
    source my-env-name/bin/activate

    Note: This creates a local directory called 'my-env-name'. So you may instead want to
          specify an absolute path to a different location (outside the pyGPlates source code).

 4. Compile and install pyGPlates into the current Python environment by typing:

    python -m pip install .

    Note: In a Python environment you can just type 'pip install .'
          (ie, without prefixing with 'python -m').

A 'pygplates' Python package should now exist in the current Python environment.
In other words, running 'python -m pip list' should show 'pygplates' in the list.

Note: Python binary wheels can also be built for distribution to other computers.
      Please see 'pygplates/wheel/README.md' for more details.
