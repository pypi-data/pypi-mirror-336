Build On Linux

Table of Contents

 1. Introduction
 2. Install dependencies
 3. Build the GPlates application
     1. Compiling GPlates
     2. Installing GPlates
 4. Build the pyGPlates Python package
     1. Compiling and installing pyGPlates

Introduction

This is a guide to building GPlates or pyGPlates from source code in a Linux development environment.

Note: This source code originated from a "pygplates" branch of the GPlates GitHub repository
      (https://github.com/GPlates/GPlates) and should only be used to compile pyGPlates (not GPlates).


Install dependencies

Firstly, you should ensure that you have installed all the packages which are dependencies for compilation.

See "DEPS.Linux" for more information on installing dependencies.


Build the GPlates application

Note: If you are compiling pyGPlates source code then refer to "Build the pyGPlates Python package".


Compiling GPlates

 1. Open a terminal/console window.
 2. Change your working directory into the base directory of the GPlates source code.
 3. Build GPlates by typing:

    cmake .
    make

Note: You can ignore the CMake warning "CGAL_DATA_DIR cannot be deduced".

The GPlates executable will be called "gplates" and is located in the "bin" directory.

If you want to do more than test GPlates from this local directory, you will need to install it on your system.


Installing GPlates

The command

    sudo make install

Will copy the "gplates" executable into a sub-directory of the default location, "/usr/local".
The GPlates executable will be installed as "/usr/local/bin/gplates".
Note that you will need to be root to install software to "/usr/local".
On Ubuntu systems, this is accomplished by prefixing the command with "sudo", i.e. "sudo make install".

If you wish to install to a different location, use the "-DCMAKE_INSTALL_PREFIX:STRING" argument to "cmake".
For example:

    cmake -DCMAKE_INSTALL_PREFIX:STRING=$HOME/usr .
    make
    make install

This will install GPlates into your home directory as "~/usr/bin/gplates".


Build the pyGPlates Python package

Note: If you are compiling GPlates source code then refer to "Build the GPlates application".


Compiling and installing pyGPlates

 1. Open a terminal/console window.
 2. Change your working directory into the base directory of the pyGPlates source code.
 3. It's advisable to install into a Python environment.
    For example, to create and activate a Python environment called 'my-env-name', type:

    python3 -m venv my-env-name
    source my-env-name/bin/activate

    Note: This creates a local directory called 'my-env-name'. So you may instead want to
          specify an absolute path to a different location (outside the pyGPlates source code).

 4. Compile and install pyGPlates into the current Python environment by typing:

    python -m pip install .

    Note: In a Python environment you can type 'python' instead of 'python3'.
          Also you can just type 'pip install .' (ie, without prefixing with 'python -m').

A 'pygplates' Python package should now exist in the current Python environment.
In other words, running 'python -m pip list' should show 'pygplates' in the list.

Note: Python binary wheels can also be built for distribution to other computers.
      Please see 'pygplates/wheel/README.md' for more details.
      That creates manylinux2014 wheels that work on all Linux systems compatible with CentOS 7 (glibc 2.17).
