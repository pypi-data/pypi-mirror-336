from pydantic import BaseModel, ConfigDict, Field
from typing import Any, Dict, Optional, Type



class SummariseTextNewResponse(BaseModel):
    """
    Attributes:
        detect_input_language (Optional[bool]): Detect the language input and either return the summary in the same
                language or a different language Default: True.
        summary (Optional[str]): The summary generated by the AI for the provided input text Example: The text explains
                that if the variable `requestBody['instruction']` is an empty string, null, or undefined, then the condition
                `if(requestBody['instruction'])` will be false. In JavaScript, these values are considered falsy, meaning that
                they are evaluated as false in boolean expressions. Therefore, if the `requestBody['instruction']` is any of
                these falsy values, the code block within the if statement will not be executed..
    """

    model_config = ConfigDict(extra="allow", populate_by_name=True)

    detect_input_language: Optional[bool] = Field(
        alias="detectInputLanguage", default=True
    )
    summary: Optional[str] = Field(alias="summary", default=None)

    def to_dict(self) -> Dict[str, Any]:
        return self.model_dump(exclude_none=True, by_alias=True)

    @classmethod
    def from_dict(cls: Type["SummariseTextNewResponse"], src_dict: Dict[str, Any]):
        return cls.model_validate(src_dict)

    @property
    def additional_keys(self) -> list[str]:
        base_fields = self.model_fields.keys()
        return [k for k in self.__dict__ if k not in base_fields]

    def __getitem__(self, key: str) -> Any:
        if key in self.__dict__:
            return self.__dict__[key]
        raise KeyError(key)

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

    def __delitem__(self, key: str) -> None:
        if key in self.__dict__:
            del self.__dict__[key]
        else:
            raise KeyError(key)

    def __contains__(self, key: str) -> bool:
        return key in self.__dict__
