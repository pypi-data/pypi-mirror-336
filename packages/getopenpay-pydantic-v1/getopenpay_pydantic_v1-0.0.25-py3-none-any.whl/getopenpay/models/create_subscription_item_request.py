# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from getopenpay.models.proration_enum import ProrationEnum
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class CreateSubscriptionItemRequest(BaseModel):
  """
    CreateSubscriptionItemRequest
    """
  add_at_period_end: Optional[StrictBool] = Field(
    False,
    description=
    'If the flag is set to True, item will be added when renewing the subscription at next billing cycle.'
  )
  price_id: StrictStr = Field(..., description='The ID of the price.')
  proration_behavior: Optional[ProrationEnum] = Field(
    None,
    description=
    'Determines how to handle prorations when the billable items changes.In case of subscription is in trialing state, invoice items if any will be for amount_atom 0.'
  )
  quantity: Optional[StrictInt] = Field(
    1, description='The quantity you’d like to apply to the subscription item you’re creating.'
  )
  subscription_id: StrictStr = Field(
    ..., description='The identifier of the subscription to modify'
  )
  __properties = [
    'add_at_period_end', 'price_id', 'proration_behavior', 'quantity', 'subscription_id'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CreateSubscriptionItemRequest:
    """Create an instance of CreateSubscriptionItemRequest from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CreateSubscriptionItemRequest:
    """Create an instance of CreateSubscriptionItemRequest from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CreateSubscriptionItemRequest.parse_obj(obj)

    _obj = CreateSubscriptionItemRequest.parse_obj(
      {
        'add_at_period_end':
          obj.get('add_at_period_end') if obj.get('add_at_period_end') is not None else False,
        'price_id': obj.get('price_id'),
        'proration_behavior': obj.get('proration_behavior'),
        'quantity': obj.get('quantity') if obj.get('quantity') is not None else 1,
        'subscription_id': obj.get('subscription_id')
      }
    )
    return _obj
