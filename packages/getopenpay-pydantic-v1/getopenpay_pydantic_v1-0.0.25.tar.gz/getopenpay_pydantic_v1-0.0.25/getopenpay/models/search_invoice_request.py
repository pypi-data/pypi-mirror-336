# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conint


class SearchInvoiceRequest(BaseModel):
  """
    SearchInvoiceRequest
    """
  page_number: Optional[conint(strict=True, ge=1)] = Field(1, description='Page number')
  page_size: Optional[conint(strict=True, le=100, ge=1)] = Field(100, description='Page size')
  query: StrictStr = Field(
    ...,
    description=
    "The search query string in limited Lucene Query Syntax. Query is case insensitive.     Limitations:        1. You can combine multiple query clauses in a search by either separating them with a space, or using the AND or OR keywords (case insensitive). By default, the API combines clauses with AND logic. AND and OR operators are mutually exclusive.       2. Nesting of Queries by ( ) is not supported.     Example searches.       1. search by exact field. example: `name:'field_name'`       2. search by wildcard. example: `name:'*sub_string_1*'`, `name:'prefix_string*'`       3. range search using [], both bounds are included in result. example: `amount:[100 TO *]`, `amount:[10 TO 100]`.     "
  )
  __properties = ['page_number', 'page_size', 'query']

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> SearchInvoiceRequest:
    """Create an instance of SearchInvoiceRequest from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> SearchInvoiceRequest:
    """Create an instance of SearchInvoiceRequest from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return SearchInvoiceRequest.parse_obj(obj)

    _obj = SearchInvoiceRequest.parse_obj(
      {
        'page_number': obj.get('page_number') if obj.get('page_number') is not None else 1,
        'page_size': obj.get('page_size') if obj.get('page_size') is not None else 100,
        'query': obj.get('query')
      }
    )
    return _obj
