# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List, Optional

from getopenpay.models.payment_provider_type import PaymentProviderType
from pydantic import BaseModel, StrictStr, conlist


class CheckoutProcessorsPreferences(BaseModel):
  """
    Allows customization of which payment processors are available during each checkout session.  # noqa: E501
    """
  filter_providers: Optional[conlist(PaymentProviderType)] = None
  ids_whitelist: Optional[conlist(StrictStr)] = None
  names_whitelist: Optional[conlist(StrictStr)] = None
  __properties = ['filter_providers', 'ids_whitelist', 'names_whitelist']

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CheckoutProcessorsPreferences:
    """Create an instance of CheckoutProcessorsPreferences from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CheckoutProcessorsPreferences:
    """Create an instance of CheckoutProcessorsPreferences from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CheckoutProcessorsPreferences.parse_obj(obj)

    _obj = CheckoutProcessorsPreferences.parse_obj(
      {
        'filter_providers': obj.get('filter_providers'),
        'ids_whitelist': obj.get('ids_whitelist'),
        'names_whitelist': obj.get('names_whitelist')
      }
    )
    return _obj
