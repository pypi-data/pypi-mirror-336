# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from getopenpay.models.proration_enum import ProrationEnum
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class UpdateSubscriptionItemRequest(BaseModel):
  """
    UpdateSubscriptionItemRequest
    """
  drop_at_end: Optional[StrictBool] = None
  price_id: Optional[StrictStr] = None
  proration_behavior: Optional[ProrationEnum] = Field(
    None,
    description=
    'Determines how to handle prorations when the billable items changes.In case of subscription is in trialing state, invoice items if any will be for amount_atom 0.'
  )
  quantity: Optional[StrictInt] = None
  __properties = ['drop_at_end', 'price_id', 'proration_behavior', 'quantity']

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> UpdateSubscriptionItemRequest:
    """Create an instance of UpdateSubscriptionItemRequest from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if drop_at_end (nullable) is None
    # and __fields_set__ contains the field
    if self.drop_at_end is None and 'drop_at_end' in self.__fields_set__:
      _dict['drop_at_end'] = None

    # set to None if price_id (nullable) is None
    # and __fields_set__ contains the field
    if self.price_id is None and 'price_id' in self.__fields_set__:
      _dict['price_id'] = None

    # set to None if quantity (nullable) is None
    # and __fields_set__ contains the field
    if self.quantity is None and 'quantity' in self.__fields_set__:
      _dict['quantity'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> UpdateSubscriptionItemRequest:
    """Create an instance of UpdateSubscriptionItemRequest from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return UpdateSubscriptionItemRequest.parse_obj(obj)

    _obj = UpdateSubscriptionItemRequest.parse_obj(
      {
        'drop_at_end': obj.get('drop_at_end'),
        'price_id': obj.get('price_id'),
        'proration_behavior': obj.get('proration_behavior'),
        'quantity': obj.get('quantity')
      }
    )
    return _obj
