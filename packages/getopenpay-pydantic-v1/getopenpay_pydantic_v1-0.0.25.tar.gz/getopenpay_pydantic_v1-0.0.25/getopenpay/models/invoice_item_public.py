# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.invoice_item_discount_amounts_public import InvoiceItemDiscountAmountsPublic
from getopenpay.models.price_tier_public import PriceTierPublic
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist


class InvoiceItemPublic(BaseModel):
  """
    InvoiceItemPublic
    """
  amount_atom: StrictInt = Field(
    ..., description='Total amount of invoice_item in atomic units (in USD this is cents).'
  )
  amount_atom_considering_discount_applied: StrictInt = Field(
    ..., description='Total amount of invoice_item in atomic units considering discounts'
  )
  currency: CurrencyEnum = Field(..., description='Three-letter ISO currency code, in lowercase.')
  discount_amount_atoms: conlist(InvoiceItemDiscountAmountsPublic) = Field(...)
  discounts: conlist(StrictStr) = Field(...)
  invoice_item_description: Optional[StrictStr] = Field(...)
  name: StrictStr = Field(
    ..., description='The name of the line item as it appears in the invoice.'
  )
  period_end: datetime = Field(
    ..., description="End of the usage period of the invoice_item. It is in 'ISO 8601' format."
  )
  price_tiers: Optional[conlist(PriceTierPublic)] = None
  quantity: StrictInt = Field(..., description='Quantity of the line item.')
  __properties = [
    'amount_atom', 'amount_atom_considering_discount_applied', 'currency', 'discount_amount_atoms',
    'discounts', 'invoice_item_description', 'name', 'period_end', 'price_tiers', 'quantity'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> InvoiceItemPublic:
    """Create an instance of InvoiceItemPublic from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of each item in discount_amount_atoms (list)
    _items = []
    if self.discount_amount_atoms:
      for _item in self.discount_amount_atoms:
        if _item:
          _items.append(_item.to_dict())
      _dict['discount_amount_atoms'] = _items
    # override the default output from pydantic by calling `to_dict()` of each item in price_tiers (list)
    _items = []
    if self.price_tiers:
      for _item in self.price_tiers:
        if _item:
          _items.append(_item.to_dict())
      _dict['price_tiers'] = _items
    # set to None if invoice_item_description (nullable) is None
    # and __fields_set__ contains the field
    if self.invoice_item_description is None and 'invoice_item_description' in self.__fields_set__:
      _dict['invoice_item_description'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> InvoiceItemPublic:
    """Create an instance of InvoiceItemPublic from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return InvoiceItemPublic.parse_obj(obj)

    _obj = InvoiceItemPublic.parse_obj(
      {
        'amount_atom': obj.get('amount_atom'),
        'amount_atom_considering_discount_applied':
          obj.get('amount_atom_considering_discount_applied'),
        'currency': obj.get('currency'),
        'discount_amount_atoms':
          [
            InvoiceItemDiscountAmountsPublic.from_dict(_item)
            for _item in obj.get('discount_amount_atoms')
          ] if obj.get('discount_amount_atoms') is not None else None,
        'discounts': obj.get('discounts'),
        'invoice_item_description': obj.get('invoice_item_description'),
        'name': obj.get('name'),
        'period_end': obj.get('period_end'),
        'price_tiers':
          [PriceTierPublic.from_dict(_item) for _item in obj.get('price_tiers')]
          if obj.get('price_tiers') is not None else None,
        'quantity': obj.get('quantity')
      }
    )
    return _obj
