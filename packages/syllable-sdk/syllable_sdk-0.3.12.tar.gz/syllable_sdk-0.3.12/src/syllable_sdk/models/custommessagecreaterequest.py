"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .custommessagerule import CustomMessageRule, CustomMessageRuleTypedDict
from pydantic import model_serializer
from syllable_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class CustomMessageCreateRequestTypedDict(TypedDict):
    name: str
    r"""The name of the custom message"""
    text: str
    r"""The text of the custom message"""
    label: NotRequired[Nullable[str]]
    r"""The label of the custom message"""
    rules: NotRequired[List[CustomMessageRuleTypedDict]]
    r"""Rules for time-specific message variants"""
    type: NotRequired[str]


class CustomMessageCreateRequest(BaseModel):
    name: str
    r"""The name of the custom message"""

    text: str
    r"""The text of the custom message"""

    label: OptionalNullable[str] = UNSET
    r"""The label of the custom message"""

    rules: Optional[List[CustomMessageRule]] = None
    r"""Rules for time-specific message variants"""

    type: Optional[str] = "greeting"

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["label", "rules", "type"]
        nullable_fields = ["label"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
