Metadata-Version: 2.1
Name: python-scs
Version: 1.1
Summary: Agendador de Scripts Python usando Crontab com Painel Streamlit
Author-email: Iago Almeida <seuemail@example.com>
License: MIT License
        
        Copyright (c) 2025 Iago Borba de Almeida
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/iagobalmeida/python_scs
Project-URL: Documentation, https://github.com/iagobalmeida/python_scs/blob/main/README.md
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: python-crontab
Requires-Dist: croniter
Requires-Dist: psutil
Provides-Extra: streamlit
Requires-Dist: streamlit; extra == "streamlit"

# Python Scripts Cron Scheduler

**AbstraÃ§Ã£o com Painel em Streamlit para gestÃ£o do agendamento de scripts Python atravÃ©s de CronJobs.**

![Demo](./demo.png)

## ðŸ“Œ InstalaÃ§Ã£o

```bash
pip install python_scs
```

Caso vÃ¡ utilizar o painel em Streamlit
```bash
pip install python_scs[streamlit]
```

## ðŸš€ ConfiguraÃ§Ã£o

Confira o [exemplo completo](https://github.com/iagobalmeida/python_scs/tree/master/examples).

1. Certifique-se de ter a seguinte estrutura de diretÃ³rios:

```
â”œâ”€â”€ scripts/
â”‚   â”œâ”€â”€ logs/
â”‚   â”œâ”€â”€ script_teste.py
â”‚   â”œâ”€â”€ __init__.py
â”œâ”€â”€ streamlit_pannel.py
```

2. Instancie o gerenciador de scripts e configure o painel:

```python
# streamlit_pannel.py
from python_scs import PythonScriptsCronManager, streamlit_ui

manager = PythonScriptsCronManager(
    user=True
)

streamlit_pannel = streamlit_ui.init(
    manager,
    layout='wide',
    title='Scripts Manager',
    subheader='Manage your python scripts'
)
```

3. Execute o painel utilizando o `streamlit`:

```bash
streamlit run streamlit_pannel.py
```

## ðŸ›  Uso da API

### Instanciando o gerenciador de scripts

```python
import os
from python_scs import PythonScriptsCronManager

scripts_manager = PythonScriptsCronManager(
    config=PythonScriptsCronManager.Config(
        app_path=os.path.abspath("."),  # Raiz onde scripts_folder estarÃ¡
        scripts_folder="scripts",       # DiretÃ³rio com os cÃ³digos
        logs_folder="scripts/logs"      # DiretÃ³rio de logs
    ),
    user=True
)
```

ðŸ“Œ *Veja a [documentaÃ§Ã£o do python-crontab](https://pypi.org/project/python-crontab/#how-to-use-the-module) para entender o parÃ¢metro `user`.*

### Listando os scripts disponÃ­veis

```python
scripts = scripts_manager.get_scripts()
print(scripts)  # ["script_teste.py"]
```

### Criando um agendamento

```python
job = scripts_manager.set_script_job(
    script_name="script_teste.py",
    schedule=["* * * * *"],
    comment="Agendamento teste",
    enable=True
)

# Criando um agendamento com comando customizado
job = scripts_manager.set_job(
    command='echo "Teste"',
    schedule=["* * * * *"],
    log_file_name="teste.txt",  # NecessÃ¡rio para armazenar a saÃ­da
    comment="Agendamento customizado",
    enable=True
)
```

ðŸ“Œ Para verificar se o agendamento foi criado, execute:
```bash
crontab -l
```

### Listando os agendamentos configurados

```python
jobs = scripts_manager.get_jobs()
for job in jobs:
    print(f"{job.comment} - {job.script_name} - {job.is_runing()}")

# Busca um agendamento por filtros
job_script_test = scripts_manager.get_job({
    "script_name": "script_teste.py",
    "comment": "Agendamento teste"
})
```

### Habilitando, desabilitando, executando e removendo um agendamento

```python
job = scripts_manager.get_job({
    "script_name": "script_teste.py",
    "comment": "Agendamento teste"
})

job.enable_job()     # Habilita o job
job.disable_job()    # Desabilita o job
job.toggle_job()     # Alterna entre ativado/desativado

# Executa o script manualmente
scripts_manager.execute(job)

# Executa como subprocesso
scripts_manager.execute(job, use_subprocess=True)

# Remove o agendamento
scripts_manager.remove_job(job)
```

## ðŸ“œ LicenÃ§a

Este projeto Ã© distribuÃ­do sob a licenÃ§a MIT. Consulte o arquivo [LICENSE](./LICENSE) para mais detalhes.

