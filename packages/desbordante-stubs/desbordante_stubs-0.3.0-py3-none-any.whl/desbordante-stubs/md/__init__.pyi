from __future__ import annotations
import desbordante
from . import algorithms
from . import column_matches

__all__ = [
    "ColumnDescription",
    "ColumnMatchDescription",
    "LhsSimilarityClassifierDesctription",
    "MD",
    "MDDescription",
    "MdAlgorithm",
    "RhsSimilarityClassifierDesctription",
    "algorithms",
    "column_matches",
]

class ColumnDescription:
    @property
    def column_index(self) -> int: ...
    @property
    def column_name(self) -> str: ...

class ColumnMatchDescription:
    @property
    def column_match_name(self) -> str: ...
    @property
    def left_column_description(self) -> ColumnDescription: ...
    @property
    def right_column_description(self) -> ColumnDescription: ...

class LhsSimilarityClassifierDesctription:
    @property
    def column_match_description(self) -> ColumnMatchDescription: ...
    @property
    def decision_boundary(self) -> float: ...
    @property
    def max_invalid_bound(self) -> float | None: ...

class MD:
    def __str__(self) -> str: ...
    def get_description(self) -> MDDescription: ...
    def to_long_string(self) -> str: ...
    def to_short_string(self) -> str: ...
    def to_string_active(self) -> str: ...
    @property
    def lhs_bounds(self) -> list[float]: ...
    @property
    def rhs(self) -> tuple[int, float]: ...
    @property
    def single_table(self) -> bool: ...

class MDDescription:
    @property
    def left_table_name(self) -> str: ...
    @property
    def lhs(self) -> list[LhsSimilarityClassifierDesctription]: ...
    @property
    def rhs(self) -> RhsSimilarityClassifierDesctription: ...
    @property
    def right_table_name(self) -> str: ...

class MdAlgorithm(desbordante.Algorithm):
    def get_mds(self) -> list[MD]: ...

class RhsSimilarityClassifierDesctription:
    @property
    def column_match_description(self) -> ColumnMatchDescription: ...
    @property
    def decision_boundary(self) -> float: ...
