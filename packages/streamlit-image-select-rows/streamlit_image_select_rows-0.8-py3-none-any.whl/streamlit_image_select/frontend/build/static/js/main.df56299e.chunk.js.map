{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","container","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","args","styleElement","getElementById","id","head","textContent","console","log","style","width","theme","font","color","textColor","base","querySelectorAll","forEach","el","remove","innerHTML","images","imagesRows","index","selectedIndex","selectedRowIndex","undefined","renderImageRow","row","rowIndex","rowWrapper","display","alignItems","marginBottom","vertical_label","verticalLabel","marginRight","writingMode","textAlign","transform","rowContainer","flexWrap","gap","align","justifyContent","image","i","item","box","flex","img","src","tooltip","title","captions","caption","onclick","setComponentValue","error","setFrameHeight","setComponentReady"],"mappings":"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","file":"static/js/main.df56299e.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\r\n\r\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\r\nconst container = document.body.appendChild(document.createElement(\"div\"))\r\ncontainer.classList.add(\"container\")\r\n\r\nfunction onRender(event: Event): void {\r\n  // Get the RenderData from the event\r\n  const data = (event as CustomEvent<RenderData>).detail\r\n\r\n  // Apply custom CSS if provided\r\n  if (data.args[\"custom_css\"]) {\r\n    let styleElement = document.getElementById(\"custom-style\");\r\n    if (!styleElement) {\r\n      styleElement = document.createElement(\"style\");\r\n      styleElement.id = \"custom-style\";\r\n      document.head.appendChild(styleElement);\r\n    }\r\n    styleElement.textContent = data.args[\"custom_css\"];\r\n  }\r\n\r\n    console.log(data.args[\"use_container_width\"])\r\n    // Adjust container width based on use_container_width\r\n    if (data.args[\"use_container_width\"]) {\r\n        container.style.width = \"100%\";\r\n    } else {\r\n        container.style.width = \"auto\";\r\n    }\r\n    \r\n\r\n  if (data.theme) {\r\n    labelDiv.style.font = data.theme.font;\r\n    labelDiv.style.color = data.theme.textColor;\r\n    if (data.theme.base === \"dark\") {\r\n      document.body.querySelectorAll(\".image-box, .caption\").forEach((el) => {\r\n        el.classList.add(\"dark\");\r\n      });\r\n    } else {\r\n      document.body.querySelectorAll(\".image-box, .caption\").forEach((el) => {\r\n        el.classList.remove(\"dark\");\r\n      });\r\n    }\r\n  }\r\n\r\n  // Set the label HTML content\r\n  labelDiv.innerHTML = data.args[\"label\"];\r\n\r\n  let images = data.args[\"images\"];\r\n  let imagesRows = data.args[\"images_rows\"];\r\n  let index = data.args[\"index\"];\r\n\r\n  // Declare selectedIndex and selectedRowIndex outside of the if block\r\n  let selectedIndex: number = -1;\r\n  let selectedRowIndex: number = -1;\r\n\r\n  if (index !== undefined) {\r\n    selectedIndex = index[\"index\"];\r\n    selectedRowIndex = index[\"rowIndex\"];\r\n  }\r\n\r\n  // Clear container for re-rendering\r\n  container.innerHTML = \"\";\r\n\r\n  const renderImageRow = (row: any, rowIndex: number) => {\r\n    // Create a container for the row and the vertical label\r\n    const rowWrapper = container.appendChild(document.createElement(\"div\"));\r\n    rowWrapper.classList.add(\"row-wrapper\");\r\n    rowWrapper.style.display = \"flex\";\r\n    rowWrapper.style.alignItems = \"center\";\r\n    rowWrapper.style.marginBottom = \"1rem\";\r\n\r\n    // Add the vertical label if provided\r\n    if (row.vertical_label) {\r\n      const verticalLabel = rowWrapper.appendChild(document.createElement(\"div\"));\r\n      verticalLabel.classList.add(\"vertical-label\");\r\n      verticalLabel.innerHTML = row.vertical_label;\r\n      verticalLabel.style.marginRight = \"1rem\";\r\n      verticalLabel.style.writingMode = \"vertical-rl\";\r\n      verticalLabel.style.textAlign = \"center\";\r\n      verticalLabel.style.transform = \"rotate(180deg)\"; // Rotate the label 180 degrees\r\n\r\n    }\r\n\r\n    const rowContainer = rowWrapper.appendChild(document.createElement(\"div\"));\r\n    rowContainer.classList.add(\"image-row\");  // Add CSS class for row styling\r\n    rowContainer.style.display = \"flex\";  // Flexbox for horizontal layout\r\n    rowContainer.style.flexWrap = \"nowrap\"; // Prevent wrapping\r\n    rowContainer.style.gap = \"1rem\"; // Set gap between images\r\n\r\n    // Align images based on the `align` parameter\r\n    const align = data.args[\"align\"];\r\n    if (align === \"center\") {\r\n      rowContainer.style.justifyContent = \"center\";\r\n    } else if (align === \"right\") {\r\n      rowContainer.style.justifyContent = \"flex-end\";\r\n    } else {\r\n      rowContainer.style.justifyContent = \"flex-start\"; // default to left\r\n    }\r\n\r\n    row.images.forEach((image: string, i: number) => {\r\n      let item = rowContainer.appendChild(document.createElement(\"div\"));\r\n      item.classList.add(\"item\");\r\n\r\n      if (data.args[\"use_container_width\"]) {\r\n        item.classList.add(\"stretch\");\r\n      } else {\r\n        item.classList.add(\"fixed\");\r\n      }\r\n     // item.style.boxSizing = \"border-box\"; // Include padding and border in the element's width and height\r\n\r\n      let box = item.appendChild(document.createElement(\"div\"));\r\n      box.classList.add(\"image-box\");\r\n\r\n      if (data.args[\"use_container_width\"]) {\r\n        item.style.flex = \"1 1 auto\";\r\n      }\r\n      // Ensure the image is a string before setting it as src\r\n      if (typeof image === \"string\") {\r\n        let img = box.appendChild(document.createElement(\"img\"));\r\n        img.classList.add(\"image\");\r\n        img.src = image;\r\n\r\n        // Set the tooltip if provided\r\n        if (row.tooltip && row.tooltip[i]) {\r\n          img.title = row.tooltip[i];\r\n        }\r\n\r\n        if (row.captions && row.captions[i]) {\r\n          let caption = item.appendChild(document.createElement(\"div\"));\r\n          caption.classList.add(\"caption\");\r\n          caption.innerHTML = row.captions[i];\r\n          if (rowIndex === selectedRowIndex && i === selectedIndex) {\r\n            caption.classList.add(\"selected_caption\");\r\n          }\r\n        }\r\n\r\n        // Check if this image should be selected by default\r\n        if (rowIndex === selectedRowIndex && i === selectedIndex) {\r\n          box.classList.add(\"selected\");\r\n          img.classList.add(\"selected\");\r\n        }\r\n\r\n        img.onclick = function () {\r\n          if (!data.args[\"disabled\"]) {  // Ensure click only works when not disabled\r\n            container.querySelectorAll(\".selected\").forEach((el) => {\r\n              el.classList.remove(\"selected\");\r\n            });\r\n            Streamlit.setComponentValue({ rowIndex, index: i });\r\n            box.classList.add(\"selected\");\r\n            img.classList.add(\"selected\");\r\n\r\n          }\r\n        };\r\n      } else {\r\n        console.error(\"Invalid image format: \", image);\r\n      }\r\n    });\r\n  };\r\n\r\n  if (images) {\r\n    images.forEach((row: any, rowIndex: number) => {\r\n      renderImageRow(row, rowIndex);\r\n    });\r\n  } else if (imagesRows) {\r\n    imagesRows.forEach((row: any, rowIndex: number) => {\r\n      renderImageRow(row, rowIndex);\r\n    });\r\n  }\r\n\r\n  // Apply the disabled state if data.args[\"disabled\"] is true\r\n  if (data.args[\"disabled\"]) {\r\n    container.classList.add(\"disabled\");\r\n  } else {\r\n    container.classList.remove(\"disabled\");\r\n  }\r\n\r\n  // We tell Streamlit to update our frameHeight after each render event, in\r\n  // case it has changed. (This isn't strictly necessary for the example\r\n  // because our height stays fixed, but this is a low-cost function, so\r\n  // there's no harm in doing it redundantly.)\r\n  Streamlit.setFrameHeight();\r\n}\r\n\r\n// Attach our `onRender` handler to Streamlit's render event.\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\r\n\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady();\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight();\r\n"],"sourceRoot":""}