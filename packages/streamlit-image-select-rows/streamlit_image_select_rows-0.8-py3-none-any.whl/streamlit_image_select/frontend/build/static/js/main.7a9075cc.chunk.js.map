{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","container","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","args","styleElement","getElementById","id","head","textContent","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","innerHTML","images","imagesRows","index","selectedIndex","selectedRowIndex","undefined","renderImageRow","row","rowIndex","rowContainer","display","flexWrap","image","i","item","margin","flex","box","img","src","tooltip","title","captions","caption","onclick","setComponentValue","console","error","setFrameHeight","setComponentReady"],"mappings":"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","file":"static/js/main.7a9075cc.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\r\n\r\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\r\nconst container = document.body.appendChild(document.createElement(\"div\"))\r\ncontainer.classList.add(\"container\")\r\n\r\n/**\r\n * The component's render function. This will be called immediately after\r\n * the component is initially loaded, and then again every time the\r\n * component gets new data from Python.\r\n */\r\nfunction onRender(event: Event): void {\r\n  // Get the RenderData from the event\r\n  const data = (event as CustomEvent<RenderData>).detail\r\n\r\n  // Apply custom CSS if provided\r\n  if (data.args[\"custom_css\"]) {\r\n    let styleElement = document.getElementById(\"custom-style\");\r\n    if (!styleElement) {\r\n      styleElement = document.createElement(\"style\");\r\n      styleElement.id = \"custom-style\";\r\n      document.head.appendChild(styleElement);\r\n    }\r\n    styleElement.textContent = data.args[\"custom_css\"];\r\n  }\r\n\r\n  if (data.theme) {\r\n    labelDiv.style.font = data.theme.font;\r\n    labelDiv.style.color = data.theme.textColor;\r\n    if (data.theme.base === \"dark\") {\r\n      document.body.querySelectorAll(\".image-box, .caption\").forEach((el) => {\r\n        el.classList.add(\"dark\");\r\n      });\r\n    } else {\r\n      document.body.querySelectorAll(\".image-box, .caption\").forEach((el) => {\r\n        el.classList.remove(\"dark\");\r\n      });\r\n    }\r\n  }\r\n\r\n  // Set the label HTML content\r\n  labelDiv.innerHTML = data.args[\"label\"];\r\n\r\n  let images = data.args[\"images\"];\r\n  let imagesRows = data.args[\"images_rows\"];\r\n  let index = data.args[\"index\"];\r\n\r\n  // Declare selectedIndex and selectedRowIndex outside of the if block\r\n  let selectedIndex: number = -1;\r\n  let selectedRowIndex: number = -1;\r\n\r\n  if (index !== undefined) {\r\n    selectedIndex = index[\"index\"];\r\n    selectedRowIndex = index[\"rowIndex\"];\r\n  }\r\n\r\n  // Clear container for re-rendering\r\n  container.innerHTML = \"\";\r\n\r\n  const renderImageRow = (row: any, rowIndex: number) => {\r\n    const rowContainer = container.appendChild(document.createElement(\"div\"));\r\n    rowContainer.classList.add(\"image-row\");  // Add CSS class for row styling\r\n    rowContainer.style.display = \"flex\";  // Flexbox for horizontal layout\r\n    rowContainer.style.flexWrap = \"wrap\"; // Wrap if necessary\r\n\r\n    row.images.forEach((image: string, i: number) => {\r\n      let item = rowContainer.appendChild(document.createElement(\"div\"));\r\n      item.classList.add(\"item\");\r\n      item.style.margin = \"0.5rem\"; // Adjust margin between images\r\n      item.style.flex = \"1 1 auto\"; // Flex-grow to handle container width\r\n\r\n      let box = item.appendChild(document.createElement(\"div\"));\r\n      box.classList.add(\"image-box\");\r\n\r\n      // Ensure the image is a string before setting it as src\r\n      if (typeof image === \"string\") {\r\n        let img = box.appendChild(document.createElement(\"img\"));\r\n        img.classList.add(\"image\");\r\n        img.src = image;\r\n\r\n        // Set the tooltip if provided\r\n        if (row.tooltip && row.tooltip[i]) {\r\n          img.title = row.tooltip[i];\r\n        }\r\n\r\n        if (row.captions && row.captions[i]) {\r\n          let caption = item.appendChild(document.createElement(\"div\"));\r\n          caption.classList.add(\"caption\");\r\n          caption.innerHTML = row.captions[i];\r\n        }\r\n\r\n        // Check if this image should be selected by default\r\n        if (rowIndex === selectedRowIndex && i === selectedIndex) {\r\n          box.classList.add(\"selected\");\r\n          img.classList.add(\"selected\");\r\n        }\r\n\r\n        img.onclick = function () {\r\n          if (!data.args[\"disabled\"]) {  // Ensure click only works when not disabled\r\n            container.querySelectorAll(\".selected\").forEach((el) => {\r\n              el.classList.remove(\"selected\");\r\n            });\r\n            Streamlit.setComponentValue({ rowIndex, index: i });\r\n            box.classList.add(\"selected\");\r\n            img.classList.add(\"selected\");\r\n          }\r\n        };\r\n      } else {\r\n        console.error(\"Invalid image format: \", image);\r\n      }\r\n    });\r\n  };\r\n\r\n  if (images) {\r\n    images.forEach((row: any, rowIndex: number) => {\r\n      renderImageRow(row, rowIndex);\r\n    });\r\n  } else if (imagesRows) {\r\n    imagesRows.forEach((row: any, rowIndex: number) => {\r\n      renderImageRow(row, rowIndex);\r\n    });\r\n  }\r\n\r\n  // Apply the disabled state if data.args[\"disabled\"] is true\r\n  if (data.args[\"disabled\"]) {\r\n    container.classList.add(\"disabled\");\r\n  } else {\r\n    container.classList.remove(\"disabled\");\r\n  }\r\n\r\n  // We tell Streamlit to update our frameHeight after each render event, in\r\n  // case it has changed. (This isn't strictly necessary for the example\r\n  // because our height stays fixed, but this is a low-cost function, so\r\n  // there's no harm in doing it redundantly.)\r\n  Streamlit.setFrameHeight();\r\n}\r\n\r\n// Attach our `onRender` handler to Streamlit's render event.\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\r\n\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady();\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight();\r\n"],"sourceRoot":""}