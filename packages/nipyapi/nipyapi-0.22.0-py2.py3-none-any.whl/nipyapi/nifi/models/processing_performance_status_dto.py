# coding: utf-8

"""
    NiFi Rest API

    The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

    OpenAPI spec version: 1.28.1
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProcessingPerformanceStatusDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'cpu_duration': 'int',
        'content_read_duration': 'int',
        'content_write_duration': 'int',
        'session_commit_duration': 'int',
        'garbage_collection_duration': 'int'
    }

    attribute_map = {
        'identifier': 'identifier',
        'cpu_duration': 'cpuDuration',
        'content_read_duration': 'contentReadDuration',
        'content_write_duration': 'contentWriteDuration',
        'session_commit_duration': 'sessionCommitDuration',
        'garbage_collection_duration': 'garbageCollectionDuration'
    }

    def __init__(self, identifier=None, cpu_duration=None, content_read_duration=None, content_write_duration=None, session_commit_duration=None, garbage_collection_duration=None):
        """
        ProcessingPerformanceStatusDTO - a model defined in Swagger
        """

        self._identifier = None
        self._cpu_duration = None
        self._content_read_duration = None
        self._content_write_duration = None
        self._session_commit_duration = None
        self._garbage_collection_duration = None

        if identifier is not None:
          self.identifier = identifier
        if cpu_duration is not None:
          self.cpu_duration = cpu_duration
        if content_read_duration is not None:
          self.content_read_duration = content_read_duration
        if content_write_duration is not None:
          self.content_write_duration = content_write_duration
        if session_commit_duration is not None:
          self.session_commit_duration = session_commit_duration
        if garbage_collection_duration is not None:
          self.garbage_collection_duration = garbage_collection_duration

    @property
    def identifier(self):
        """
        Gets the identifier of this ProcessingPerformanceStatusDTO.
        The unique ID of the process group that the Processor belongs to

        :return: The identifier of this ProcessingPerformanceStatusDTO.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this ProcessingPerformanceStatusDTO.
        The unique ID of the process group that the Processor belongs to

        :param identifier: The identifier of this ProcessingPerformanceStatusDTO.
        :type: str
        """

        self._identifier = identifier

    @property
    def cpu_duration(self):
        """
        Gets the cpu_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent on CPU usage in the last 5 minutes.

        :return: The cpu_duration of this ProcessingPerformanceStatusDTO.
        :rtype: int
        """
        return self._cpu_duration

    @cpu_duration.setter
    def cpu_duration(self, cpu_duration):
        """
        Sets the cpu_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent on CPU usage in the last 5 minutes.

        :param cpu_duration: The cpu_duration of this ProcessingPerformanceStatusDTO.
        :type: int
        """

        self._cpu_duration = cpu_duration

    @property
    def content_read_duration(self):
        """
        Gets the content_read_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent to read content in the last 5 minutes.

        :return: The content_read_duration of this ProcessingPerformanceStatusDTO.
        :rtype: int
        """
        return self._content_read_duration

    @content_read_duration.setter
    def content_read_duration(self, content_read_duration):
        """
        Sets the content_read_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent to read content in the last 5 minutes.

        :param content_read_duration: The content_read_duration of this ProcessingPerformanceStatusDTO.
        :type: int
        """

        self._content_read_duration = content_read_duration

    @property
    def content_write_duration(self):
        """
        Gets the content_write_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent to write content in the last 5 minutes.

        :return: The content_write_duration of this ProcessingPerformanceStatusDTO.
        :rtype: int
        """
        return self._content_write_duration

    @content_write_duration.setter
    def content_write_duration(self, content_write_duration):
        """
        Sets the content_write_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent to write content in the last 5 minutes.

        :param content_write_duration: The content_write_duration of this ProcessingPerformanceStatusDTO.
        :type: int
        """

        self._content_write_duration = content_write_duration

    @property
    def session_commit_duration(self):
        """
        Gets the session_commit_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent running to commit sessions the last 5 minutes.

        :return: The session_commit_duration of this ProcessingPerformanceStatusDTO.
        :rtype: int
        """
        return self._session_commit_duration

    @session_commit_duration.setter
    def session_commit_duration(self, session_commit_duration):
        """
        Sets the session_commit_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent running to commit sessions the last 5 minutes.

        :param session_commit_duration: The session_commit_duration of this ProcessingPerformanceStatusDTO.
        :type: int
        """

        self._session_commit_duration = session_commit_duration

    @property
    def garbage_collection_duration(self):
        """
        Gets the garbage_collection_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent running garbage collection in the last 5 minutes.

        :return: The garbage_collection_duration of this ProcessingPerformanceStatusDTO.
        :rtype: int
        """
        return self._garbage_collection_duration

    @garbage_collection_duration.setter
    def garbage_collection_duration(self, garbage_collection_duration):
        """
        Sets the garbage_collection_duration of this ProcessingPerformanceStatusDTO.
        The number of nanoseconds has spent running garbage collection in the last 5 minutes.

        :param garbage_collection_duration: The garbage_collection_duration of this ProcessingPerformanceStatusDTO.
        :type: int
        """

        self._garbage_collection_duration = garbage_collection_duration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProcessingPerformanceStatusDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
