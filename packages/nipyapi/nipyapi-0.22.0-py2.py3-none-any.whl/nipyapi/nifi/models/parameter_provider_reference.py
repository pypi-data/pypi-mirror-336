# coding: utf-8

"""
    NiFi Rest API

    The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

    OpenAPI spec version: 1.28.1
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParameterProviderReference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'name': 'str',
        'type': 'str',
        'bundle': 'Bundle'
    }

    attribute_map = {
        'identifier': 'identifier',
        'name': 'name',
        'type': 'type',
        'bundle': 'bundle'
    }

    def __init__(self, identifier=None, name=None, type=None, bundle=None):
        """
        ParameterProviderReference - a model defined in Swagger
        """

        self._identifier = None
        self._name = None
        self._type = None
        self._bundle = None

        if identifier is not None:
          self.identifier = identifier
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type
        if bundle is not None:
          self.bundle = bundle

    @property
    def identifier(self):
        """
        Gets the identifier of this ParameterProviderReference.
        The identifier of the parameter provider

        :return: The identifier of this ParameterProviderReference.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this ParameterProviderReference.
        The identifier of the parameter provider

        :param identifier: The identifier of this ParameterProviderReference.
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """
        Gets the name of this ParameterProviderReference.
        The name of the parameter provider

        :return: The name of this ParameterProviderReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ParameterProviderReference.
        The name of the parameter provider

        :param name: The name of this ParameterProviderReference.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this ParameterProviderReference.
        The fully qualified name of the parameter provider class.

        :return: The type of this ParameterProviderReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ParameterProviderReference.
        The fully qualified name of the parameter provider class.

        :param type: The type of this ParameterProviderReference.
        :type: str
        """

        self._type = type

    @property
    def bundle(self):
        """
        Gets the bundle of this ParameterProviderReference.
        The details of the artifact that bundled this parameter provider.

        :return: The bundle of this ParameterProviderReference.
        :rtype: Bundle
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """
        Sets the bundle of this ParameterProviderReference.
        The details of the artifact that bundled this parameter provider.

        :param bundle: The bundle of this ParameterProviderReference.
        :type: Bundle
        """

        self._bundle = bundle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParameterProviderReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
