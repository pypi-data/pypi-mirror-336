# coding: utf-8

"""
    NiFi Rest API

    The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

    OpenAPI spec version: 1.28.1
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RegisteredFlowSnapshotMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_identifier': 'str',
        'flow_identifier': 'str',
        'version': 'int',
        'timestamp': 'int',
        'author': 'str',
        'comments': 'str'
    }

    attribute_map = {
        'bucket_identifier': 'bucketIdentifier',
        'flow_identifier': 'flowIdentifier',
        'version': 'version',
        'timestamp': 'timestamp',
        'author': 'author',
        'comments': 'comments'
    }

    def __init__(self, bucket_identifier=None, flow_identifier=None, version=None, timestamp=None, author=None, comments=None):
        """
        RegisteredFlowSnapshotMetadata - a model defined in Swagger
        """

        self._bucket_identifier = None
        self._flow_identifier = None
        self._version = None
        self._timestamp = None
        self._author = None
        self._comments = None

        if bucket_identifier is not None:
          self.bucket_identifier = bucket_identifier
        if flow_identifier is not None:
          self.flow_identifier = flow_identifier
        if version is not None:
          self.version = version
        if timestamp is not None:
          self.timestamp = timestamp
        if author is not None:
          self.author = author
        if comments is not None:
          self.comments = comments

    @property
    def bucket_identifier(self):
        """
        Gets the bucket_identifier of this RegisteredFlowSnapshotMetadata.

        :return: The bucket_identifier of this RegisteredFlowSnapshotMetadata.
        :rtype: str
        """
        return self._bucket_identifier

    @bucket_identifier.setter
    def bucket_identifier(self, bucket_identifier):
        """
        Sets the bucket_identifier of this RegisteredFlowSnapshotMetadata.

        :param bucket_identifier: The bucket_identifier of this RegisteredFlowSnapshotMetadata.
        :type: str
        """

        self._bucket_identifier = bucket_identifier

    @property
    def flow_identifier(self):
        """
        Gets the flow_identifier of this RegisteredFlowSnapshotMetadata.

        :return: The flow_identifier of this RegisteredFlowSnapshotMetadata.
        :rtype: str
        """
        return self._flow_identifier

    @flow_identifier.setter
    def flow_identifier(self, flow_identifier):
        """
        Sets the flow_identifier of this RegisteredFlowSnapshotMetadata.

        :param flow_identifier: The flow_identifier of this RegisteredFlowSnapshotMetadata.
        :type: str
        """

        self._flow_identifier = flow_identifier

    @property
    def version(self):
        """
        Gets the version of this RegisteredFlowSnapshotMetadata.

        :return: The version of this RegisteredFlowSnapshotMetadata.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this RegisteredFlowSnapshotMetadata.

        :param version: The version of this RegisteredFlowSnapshotMetadata.
        :type: int
        """

        self._version = version

    @property
    def timestamp(self):
        """
        Gets the timestamp of this RegisteredFlowSnapshotMetadata.

        :return: The timestamp of this RegisteredFlowSnapshotMetadata.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this RegisteredFlowSnapshotMetadata.

        :param timestamp: The timestamp of this RegisteredFlowSnapshotMetadata.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def author(self):
        """
        Gets the author of this RegisteredFlowSnapshotMetadata.

        :return: The author of this RegisteredFlowSnapshotMetadata.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this RegisteredFlowSnapshotMetadata.

        :param author: The author of this RegisteredFlowSnapshotMetadata.
        :type: str
        """

        self._author = author

    @property
    def comments(self):
        """
        Gets the comments of this RegisteredFlowSnapshotMetadata.

        :return: The comments of this RegisteredFlowSnapshotMetadata.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this RegisteredFlowSnapshotMetadata.

        :param comments: The comments of this RegisteredFlowSnapshotMetadata.
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RegisteredFlowSnapshotMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
