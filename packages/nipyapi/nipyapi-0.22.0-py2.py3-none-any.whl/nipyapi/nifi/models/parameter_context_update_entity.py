# coding: utf-8

"""
    NiFi Rest API

    The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

    OpenAPI spec version: 1.28.1
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParameterContextUpdateEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameter_context_revision': 'RevisionDTO',
        'parameter_context': 'ParameterContextDTO',
        'referencing_components': 'list[AffectedComponentEntity]'
    }

    attribute_map = {
        'parameter_context_revision': 'parameterContextRevision',
        'parameter_context': 'parameterContext',
        'referencing_components': 'referencingComponents'
    }

    def __init__(self, parameter_context_revision=None, parameter_context=None, referencing_components=None):
        """
        ParameterContextUpdateEntity - a model defined in Swagger
        """

        self._parameter_context_revision = None
        self._parameter_context = None
        self._referencing_components = None

        if parameter_context_revision is not None:
          self.parameter_context_revision = parameter_context_revision
        if parameter_context is not None:
          self.parameter_context = parameter_context
        if referencing_components is not None:
          self.referencing_components = referencing_components

    @property
    def parameter_context_revision(self):
        """
        Gets the parameter_context_revision of this ParameterContextUpdateEntity.
        The Revision of the Parameter Context

        :return: The parameter_context_revision of this ParameterContextUpdateEntity.
        :rtype: RevisionDTO
        """
        return self._parameter_context_revision

    @parameter_context_revision.setter
    def parameter_context_revision(self, parameter_context_revision):
        """
        Sets the parameter_context_revision of this ParameterContextUpdateEntity.
        The Revision of the Parameter Context

        :param parameter_context_revision: The parameter_context_revision of this ParameterContextUpdateEntity.
        :type: RevisionDTO
        """

        self._parameter_context_revision = parameter_context_revision

    @property
    def parameter_context(self):
        """
        Gets the parameter_context of this ParameterContextUpdateEntity.
        The Parameter Context that is being operated on. This may not be populated until the request has successfully completed.

        :return: The parameter_context of this ParameterContextUpdateEntity.
        :rtype: ParameterContextDTO
        """
        return self._parameter_context

    @parameter_context.setter
    def parameter_context(self, parameter_context):
        """
        Sets the parameter_context of this ParameterContextUpdateEntity.
        The Parameter Context that is being operated on. This may not be populated until the request has successfully completed.

        :param parameter_context: The parameter_context of this ParameterContextUpdateEntity.
        :type: ParameterContextDTO
        """

        self._parameter_context = parameter_context

    @property
    def referencing_components(self):
        """
        Gets the referencing_components of this ParameterContextUpdateEntity.
        The components that are referenced by the update.

        :return: The referencing_components of this ParameterContextUpdateEntity.
        :rtype: list[AffectedComponentEntity]
        """
        return self._referencing_components

    @referencing_components.setter
    def referencing_components(self, referencing_components):
        """
        Sets the referencing_components of this ParameterContextUpdateEntity.
        The components that are referenced by the update.

        :param referencing_components: The referencing_components of this ParameterContextUpdateEntity.
        :type: list[AffectedComponentEntity]
        """

        self._referencing_components = referencing_components

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParameterContextUpdateEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
