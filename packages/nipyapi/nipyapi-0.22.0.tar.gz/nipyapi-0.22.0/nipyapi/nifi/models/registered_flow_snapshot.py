# coding: utf-8

"""
    NiFi Rest API

    The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

    OpenAPI spec version: 1.28.1
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RegisteredFlowSnapshot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snapshot_metadata': 'RegisteredFlowSnapshotMetadata',
        'flow': 'RegisteredFlow',
        'bucket': 'FlowRegistryBucket',
        'flow_contents': 'VersionedProcessGroup',
        'external_controller_services': 'dict(str, ExternalControllerServiceReference)',
        'parameter_contexts': 'dict(str, VersionedParameterContext)',
        'flow_encoding_version': 'str',
        'parameter_providers': 'dict(str, ParameterProviderReference)',
        'latest': 'bool'
    }

    attribute_map = {
        'snapshot_metadata': 'snapshotMetadata',
        'flow': 'flow',
        'bucket': 'bucket',
        'flow_contents': 'flowContents',
        'external_controller_services': 'externalControllerServices',
        'parameter_contexts': 'parameterContexts',
        'flow_encoding_version': 'flowEncodingVersion',
        'parameter_providers': 'parameterProviders',
        'latest': 'latest'
    }

    def __init__(self, snapshot_metadata=None, flow=None, bucket=None, flow_contents=None, external_controller_services=None, parameter_contexts=None, flow_encoding_version=None, parameter_providers=None, latest=None):
        """
        RegisteredFlowSnapshot - a model defined in Swagger
        """

        self._snapshot_metadata = None
        self._flow = None
        self._bucket = None
        self._flow_contents = None
        self._external_controller_services = None
        self._parameter_contexts = None
        self._flow_encoding_version = None
        self._parameter_providers = None
        self._latest = None

        if snapshot_metadata is not None:
          self.snapshot_metadata = snapshot_metadata
        if flow is not None:
          self.flow = flow
        if bucket is not None:
          self.bucket = bucket
        if flow_contents is not None:
          self.flow_contents = flow_contents
        if external_controller_services is not None:
          self.external_controller_services = external_controller_services
        if parameter_contexts is not None:
          self.parameter_contexts = parameter_contexts
        if flow_encoding_version is not None:
          self.flow_encoding_version = flow_encoding_version
        if parameter_providers is not None:
          self.parameter_providers = parameter_providers
        if latest is not None:
          self.latest = latest

    @property
    def snapshot_metadata(self):
        """
        Gets the snapshot_metadata of this RegisteredFlowSnapshot.

        :return: The snapshot_metadata of this RegisteredFlowSnapshot.
        :rtype: RegisteredFlowSnapshotMetadata
        """
        return self._snapshot_metadata

    @snapshot_metadata.setter
    def snapshot_metadata(self, snapshot_metadata):
        """
        Sets the snapshot_metadata of this RegisteredFlowSnapshot.

        :param snapshot_metadata: The snapshot_metadata of this RegisteredFlowSnapshot.
        :type: RegisteredFlowSnapshotMetadata
        """

        self._snapshot_metadata = snapshot_metadata

    @property
    def flow(self):
        """
        Gets the flow of this RegisteredFlowSnapshot.

        :return: The flow of this RegisteredFlowSnapshot.
        :rtype: RegisteredFlow
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """
        Sets the flow of this RegisteredFlowSnapshot.

        :param flow: The flow of this RegisteredFlowSnapshot.
        :type: RegisteredFlow
        """

        self._flow = flow

    @property
    def bucket(self):
        """
        Gets the bucket of this RegisteredFlowSnapshot.

        :return: The bucket of this RegisteredFlowSnapshot.
        :rtype: FlowRegistryBucket
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """
        Sets the bucket of this RegisteredFlowSnapshot.

        :param bucket: The bucket of this RegisteredFlowSnapshot.
        :type: FlowRegistryBucket
        """

        self._bucket = bucket

    @property
    def flow_contents(self):
        """
        Gets the flow_contents of this RegisteredFlowSnapshot.

        :return: The flow_contents of this RegisteredFlowSnapshot.
        :rtype: VersionedProcessGroup
        """
        return self._flow_contents

    @flow_contents.setter
    def flow_contents(self, flow_contents):
        """
        Sets the flow_contents of this RegisteredFlowSnapshot.

        :param flow_contents: The flow_contents of this RegisteredFlowSnapshot.
        :type: VersionedProcessGroup
        """

        self._flow_contents = flow_contents

    @property
    def external_controller_services(self):
        """
        Gets the external_controller_services of this RegisteredFlowSnapshot.

        :return: The external_controller_services of this RegisteredFlowSnapshot.
        :rtype: dict(str, ExternalControllerServiceReference)
        """
        return self._external_controller_services

    @external_controller_services.setter
    def external_controller_services(self, external_controller_services):
        """
        Sets the external_controller_services of this RegisteredFlowSnapshot.

        :param external_controller_services: The external_controller_services of this RegisteredFlowSnapshot.
        :type: dict(str, ExternalControllerServiceReference)
        """

        self._external_controller_services = external_controller_services

    @property
    def parameter_contexts(self):
        """
        Gets the parameter_contexts of this RegisteredFlowSnapshot.

        :return: The parameter_contexts of this RegisteredFlowSnapshot.
        :rtype: dict(str, VersionedParameterContext)
        """
        return self._parameter_contexts

    @parameter_contexts.setter
    def parameter_contexts(self, parameter_contexts):
        """
        Sets the parameter_contexts of this RegisteredFlowSnapshot.

        :param parameter_contexts: The parameter_contexts of this RegisteredFlowSnapshot.
        :type: dict(str, VersionedParameterContext)
        """

        self._parameter_contexts = parameter_contexts

    @property
    def flow_encoding_version(self):
        """
        Gets the flow_encoding_version of this RegisteredFlowSnapshot.

        :return: The flow_encoding_version of this RegisteredFlowSnapshot.
        :rtype: str
        """
        return self._flow_encoding_version

    @flow_encoding_version.setter
    def flow_encoding_version(self, flow_encoding_version):
        """
        Sets the flow_encoding_version of this RegisteredFlowSnapshot.

        :param flow_encoding_version: The flow_encoding_version of this RegisteredFlowSnapshot.
        :type: str
        """

        self._flow_encoding_version = flow_encoding_version

    @property
    def parameter_providers(self):
        """
        Gets the parameter_providers of this RegisteredFlowSnapshot.

        :return: The parameter_providers of this RegisteredFlowSnapshot.
        :rtype: dict(str, ParameterProviderReference)
        """
        return self._parameter_providers

    @parameter_providers.setter
    def parameter_providers(self, parameter_providers):
        """
        Sets the parameter_providers of this RegisteredFlowSnapshot.

        :param parameter_providers: The parameter_providers of this RegisteredFlowSnapshot.
        :type: dict(str, ParameterProviderReference)
        """

        self._parameter_providers = parameter_providers

    @property
    def latest(self):
        """
        Gets the latest of this RegisteredFlowSnapshot.

        :return: The latest of this RegisteredFlowSnapshot.
        :rtype: bool
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """
        Sets the latest of this RegisteredFlowSnapshot.

        :param latest: The latest of this RegisteredFlowSnapshot.
        :type: bool
        """

        self._latest = latest

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RegisteredFlowSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
