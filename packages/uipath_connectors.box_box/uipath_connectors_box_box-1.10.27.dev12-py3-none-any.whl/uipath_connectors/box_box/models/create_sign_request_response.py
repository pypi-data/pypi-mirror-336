from pydantic import BaseModel, ConfigDict, Field
from typing import Any, Dict, Optional, Type

from ..models.create_sign_request_response_parent_folder import (
    CreateSignRequestResponseParentFolder,
)
from ..models.create_sign_request_response_prefill_tags_array_item_ref import (
    CreateSignRequestResponsePrefillTagsArrayItemRef,
)
from ..models.create_sign_request_response_sign_files import (
    CreateSignRequestResponseSignFiles,
)
from ..models.create_sign_request_response_signers_array_item_ref import (
    CreateSignRequestResponseSignersArrayItemRef,
)
from ..models.create_sign_request_response_signing_log import (
    CreateSignRequestResponseSigningLog,
)
from ..models.create_sign_request_response_source_files_array_item_ref import (
    CreateSignRequestResponseSourceFilesArrayItemRef,
)
from ..models.create_sign_request_response_status import CreateSignRequestResponseStatus
from ..models.create_sign_request_response_type import CreateSignRequestResponseType
import datetime


class CreateSignRequestResponse(BaseModel):
    """
    Attributes:
        parent_folder_id (str): The unique identifier that represent a folder.
        are_reminders_enabled (Optional[bool]): If set, signers receive reminders to sign a document on day 3, 8, 13 and
                18. Reminders are only sent to any outstanding signers.
        are_text_signatures_enabled (Optional[bool]): Disables the usage of signatures generated by typing (text)
        auto_expire_at (Optional[datetime.datetime]): Uses `days_valid` to calculate the date and time, in GMT, the sign
                request will expire if unsigned.
        days_valid (Optional[int]): Number of days after which this request will automatically expire if not completed.
        email_message (Optional[str]): Message to include in sign request email.
        email_subject (Optional[str]): Subject of sign request email.
        external_id (Optional[str]): This can be used to reference an ID in an external system that the sign request is
                related to.
        id (Optional[str]): The ID of the sign request
        is_document_preparation_needed (Optional[bool]): Indicates if the sender should receive a `prepare_url` in the
                response to complete document preparation via UI.
        parent_folder (Optional[CreateSignRequestResponseParentFolder]):
        prefill_tags (Optional[list['CreateSignRequestResponsePrefillTagsArrayItemRef']]):
        prepare_url (Optional[str]): This URL is returned if `is_document_preparation_needed` is
                set to `true` in the request. It is used to prepare the sign request
                via UI. The sign request is not sent until preparation is complete.
        sign_files (Optional[CreateSignRequestResponseSignFiles]):
        signers (Optional[list['CreateSignRequestResponseSignersArrayItemRef']]):
        signing_log (Optional[CreateSignRequestResponseSigningLog]):
        source_files (Optional[list['CreateSignRequestResponseSourceFilesArrayItemRef']]):
        status (Optional[CreateSignRequestResponseStatus]): Describes the status of the sign request
        type_ (Optional[CreateSignRequestResponseType]): object type
    """

    model_config = ConfigDict(extra="allow", populate_by_name=True)

    parent_folder_id: str = Field(alias="parent_folder_id")
    are_reminders_enabled: Optional[bool] = Field(
        alias="are_reminders_enabled", default=None
    )
    are_text_signatures_enabled: Optional[bool] = Field(
        alias="are_text_signatures_enabled", default=None
    )
    auto_expire_at: Optional[datetime.datetime] = Field(
        alias="auto_expire_at", default=None
    )
    days_valid: Optional[int] = Field(alias="days_valid", default=None)
    email_message: Optional[str] = Field(alias="email_message", default=None)
    email_subject: Optional[str] = Field(alias="email_subject", default=None)
    external_id: Optional[str] = Field(alias="external_id", default=None)
    id: Optional[str] = Field(alias="id", default=None)
    is_document_preparation_needed: Optional[bool] = Field(
        alias="is_document_preparation_needed", default=None
    )
    parent_folder: Optional["CreateSignRequestResponseParentFolder"] = Field(
        alias="parent_folder", default=None
    )
    prefill_tags: Optional[list["CreateSignRequestResponsePrefillTagsArrayItemRef"]] = (
        Field(alias="prefill_tags", default=None)
    )
    prepare_url: Optional[str] = Field(alias="prepare_url", default=None)
    sign_files: Optional["CreateSignRequestResponseSignFiles"] = Field(
        alias="sign_files", default=None
    )
    signers: Optional[list["CreateSignRequestResponseSignersArrayItemRef"]] = Field(
        alias="signers", default=None
    )
    signing_log: Optional["CreateSignRequestResponseSigningLog"] = Field(
        alias="signing_log", default=None
    )
    source_files: Optional[list["CreateSignRequestResponseSourceFilesArrayItemRef"]] = (
        Field(alias="source_files", default=None)
    )
    status: Optional["CreateSignRequestResponseStatus"] = Field(
        alias="status", default=None
    )
    type_: Optional["CreateSignRequestResponseType"] = Field(alias="type", default=None)

    def to_dict(self) -> Dict[str, Any]:
        return self.model_dump(exclude_none=True, by_alias=True)

    @classmethod
    def from_dict(cls: Type["CreateSignRequestResponse"], src_dict: Dict[str, Any]):
        return cls.model_validate(src_dict)

    @property
    def additional_keys(self) -> list[str]:
        base_fields = self.model_fields.keys()
        return [k for k in self.__dict__ if k not in base_fields]

    def __getitem__(self, key: str) -> Any:
        if key in self.__dict__:
            return self.__dict__[key]
        raise KeyError(key)

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

    def __delitem__(self, key: str) -> None:
        if key in self.__dict__:
            del self.__dict__[key]
        else:
            raise KeyError(key)

    def __contains__(self, key: str) -> bool:
        return key in self.__dict__
