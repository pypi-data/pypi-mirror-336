from pydantic import BaseModel, ConfigDict, Field
from typing import Any, Dict, Optional, Type

from ..models.create_sign_request_request_prefill_tags_array_item_ref import (
    CreateSignRequestRequestPrefillTagsArrayItemRef,
)


class CreateSignRequestRequest(BaseModel):
    """
    Attributes:
        parent_folder_id (str): The unique identifier that represent a folder.
        signer_emails (str): The email addresses of all people that need to sign the document, with the option to add
                the order.  Please note that the first signer must be set as 0.
        source_file_id (str): The unique identifier that represent a file.
        are_reminders_enabled (Optional[bool]): If set, signers receive reminders to sign a document on day 3, 8, 13 and
                18. Reminders are only sent to any outstanding signers.
        are_text_signatures_enabled (Optional[bool]): Disables the usage of signatures generated by typing (text)
        days_valid (Optional[int]): Number of days after which this request will automatically expire if not completed.
        email_message (Optional[str]): Message to include in sign request email.
        email_subject (Optional[str]): Subject of sign request email.
        external_id (Optional[str]): This can be used to reference an ID in an external system that the sign request is
                related to.
        is_document_preparation_needed (Optional[bool]): Indicates if the sender should receive a `prepare_url` in the
                response to complete document preparation via UI.
        prefill_tags (Optional[list['CreateSignRequestRequestPrefillTagsArrayItemRef']]):
        template_id (Optional[str]): The name of the folder.
    """

    model_config = ConfigDict(extra="allow", populate_by_name=True)

    parent_folder_id: str = Field(alias="parent_folder_id")
    signer_emails: str = Field(alias="signer_emails")
    source_file_id: str = Field(alias="source_file_id")
    are_reminders_enabled: Optional[bool] = Field(
        alias="are_reminders_enabled", default=None
    )
    are_text_signatures_enabled: Optional[bool] = Field(
        alias="are_text_signatures_enabled", default=None
    )
    days_valid: Optional[int] = Field(alias="days_valid", default=None)
    email_message: Optional[str] = Field(alias="email_message", default=None)
    email_subject: Optional[str] = Field(alias="email_subject", default=None)
    external_id: Optional[str] = Field(alias="external_id", default=None)
    is_document_preparation_needed: Optional[bool] = Field(
        alias="is_document_preparation_needed", default=None
    )
    prefill_tags: Optional[list["CreateSignRequestRequestPrefillTagsArrayItemRef"]] = (
        Field(alias="prefill_tags", default=None)
    )
    template_id: Optional[str] = Field(alias="template_id", default=None)

    def to_dict(self) -> Dict[str, Any]:
        return self.model_dump(exclude_none=True, by_alias=True)

    @classmethod
    def from_dict(cls: Type["CreateSignRequestRequest"], src_dict: Dict[str, Any]):
        return cls.model_validate(src_dict)

    @property
    def additional_keys(self) -> list[str]:
        base_fields = self.model_fields.keys()
        return [k for k in self.__dict__ if k not in base_fields]

    def __getitem__(self, key: str) -> Any:
        if key in self.__dict__:
            return self.__dict__[key]
        raise KeyError(key)

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

    def __delitem__(self, key: str) -> None:
        if key in self.__dict__:
            del self.__dict__[key]
        else:
            raise KeyError(key)

    def __contains__(self, key: str) -> bool:
        return key in self.__dict__
