/* This file is automatically generated from "mitsuba.conf" using the script
   "resources/configure.py". Please do not attempt to change it manually,
   as any changes will be overwritten. The main purpose of this file is to
   helper various macros to instantiate multiple variants of Mitsuba. */

#pragma once

#include <mitsuba/core/fwd.h>
#include <drjit/jit.h>
#include <drjit/autodiff.h>

/// List of enabled Mitsuba variants
#define MI_VARIANTS                                                             \
    "scalar_mono\n"                                                             \
    "scalar_mono_double\n"                                                      \
    "scalar_mono_polarized\n"                                                   \
    "scalar_mono_polarized_double\n"                                            \
    "scalar_rgb\n"                                                              \
    "scalar_spectral\n"                                                         \
    "llvm_ad_rgb\n"                                                             \

/// Default variant to be used by the "mitsuba" executable
#define MI_DEFAULT_VARIANT "scalar_mono"                                        \

/// Declare that a "struct" template is to be imported and not instantiated
#define MI_EXTERN_STRUCT(Name)                                                  \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<float, Color<float, 1>>;   \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<double, Color<double, 1>>; \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<float, MuellerMatrix<Color<float, 1>>>; \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<double, MuellerMatrix<Color<double, 1>>>; \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<float, Color<float, 3>>;   \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<float, Spectrum<float, 4>>; \
    MI_EXTERN_LIB template struct MI_EXPORT_LIB Name<dr::DiffArray<dr::LLVMArray<float>>, Color<dr::DiffArray<dr::LLVMArray<float>>, 3>>; \

/// Declare that a "class" template is to be imported and not instantiated
#define MI_EXTERN_CLASS(Name)                                                   \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<float, Color<float, 1>>;    \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<double, Color<double, 1>>;  \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<float, MuellerMatrix<Color<float, 1>>>; \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<double, MuellerMatrix<Color<double, 1>>>; \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<float, Color<float, 3>>;    \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<float, Spectrum<float, 4>>; \
    MI_EXTERN_LIB template class MI_EXPORT_LIB Name<dr::DiffArray<dr::LLVMArray<float>>, Color<dr::DiffArray<dr::LLVMArray<float>>, 3>>; \

/// Explicitly instantiate all variants of a "struct" template
#define MI_INSTANTIATE_STRUCT(Name)                                             \
    template struct MI_EXPORT Name<float, Color<float, 1>>;                     \
    template struct MI_EXPORT Name<double, Color<double, 1>>;                   \
    template struct MI_EXPORT Name<float, MuellerMatrix<Color<float, 1>>>;      \
    template struct MI_EXPORT Name<double, MuellerMatrix<Color<double, 1>>>;    \
    template struct MI_EXPORT Name<float, Color<float, 3>>;                     \
    template struct MI_EXPORT Name<float, Spectrum<float, 4>>;                  \
    template struct MI_EXPORT Name<dr::DiffArray<dr::LLVMArray<float>>, Color<dr::DiffArray<dr::LLVMArray<float>>, 3>>; \

/// Explicitly instantiate all variants of a "class" template
#define MI_INSTANTIATE_CLASS(Name)                                              \
    template class MI_EXPORT Name<float, Color<float, 1>>;                      \
    template class MI_EXPORT Name<double, Color<double, 1>>;                    \
    template class MI_EXPORT Name<float, MuellerMatrix<Color<float, 1>>>;       \
    template class MI_EXPORT Name<double, MuellerMatrix<Color<double, 1>>>;     \
    template class MI_EXPORT Name<float, Color<float, 3>>;                      \
    template class MI_EXPORT Name<float, Spectrum<float, 4>>;                   \
    template class MI_EXPORT Name<dr::DiffArray<dr::LLVMArray<float>>, Color<dr::DiffArray<dr::LLVMArray<float>>, 3>>; \

/// Call the variant function "func" for a specific variant "variant"
#define MI_INVOKE_VARIANT(variant, func, ...)                                   \
    [&]() {                                                                     \
        if (variant == "scalar_mono")                                           \
            return func<float, Color<float, 1>>(__VA_ARGS__);                   \
        else if (variant == "scalar_mono_double")                               \
            return func<double, Color<double, 1>>(__VA_ARGS__);                 \
        else if (variant == "scalar_mono_polarized")                            \
            return func<float, MuellerMatrix<Color<float, 1>>>(__VA_ARGS__);    \
        else if (variant == "scalar_mono_polarized_double")                     \
            return func<double, MuellerMatrix<Color<double, 1>>>(__VA_ARGS__);  \
        else if (variant == "scalar_rgb")                                       \
            return func<float, Color<float, 3>>(__VA_ARGS__);                   \
        else if (variant == "scalar_spectral")                                  \
            return func<float, Spectrum<float, 4>>(__VA_ARGS__);                \
        else if (variant == "llvm_ad_rgb")                                      \
            return func<dr::DiffArray<dr::LLVMArray<float>>, Color<dr::DiffArray<dr::LLVMArray<float>>, 3>>(__VA_ARGS__); \
        else                                                                    \
            Throw("Unsupported variant: \"%s\". Must be one of scalar_mono, scalar_mono_double, scalar_mono_polarized, scalar_mono_polarized_double, scalar_rgb, scalar_spectral, llvm_ad_rgb!", variant); \
    }()                                                                         \

NAMESPACE_BEGIN(mitsuba)
NAMESPACE_BEGIN(detail)
/// Convert a <Float, Spectrum> type pair into one of the strings in MI_VARIANT
template <typename Float_, typename Spectrum_> constexpr const char *get_variant() {
    if constexpr (std::is_same_v<Float_, float> &&
                  std::is_same_v<Spectrum_, Color<float, 1>>)
        return "scalar_mono";
    else if constexpr (std::is_same_v<Float_, double> &&
                       std::is_same_v<Spectrum_, Color<double, 1>>)
        return "scalar_mono_double";
    else if constexpr (std::is_same_v<Float_, float> &&
                       std::is_same_v<Spectrum_, MuellerMatrix<Color<float, 1>>>)
        return "scalar_mono_polarized";
    else if constexpr (std::is_same_v<Float_, double> &&
                       std::is_same_v<Spectrum_, MuellerMatrix<Color<double, 1>>>)
        return "scalar_mono_polarized_double";
    else if constexpr (std::is_same_v<Float_, float> &&
                       std::is_same_v<Spectrum_, Color<float, 3>>)
        return "scalar_rgb";
    else if constexpr (std::is_same_v<Float_, float> &&
                       std::is_same_v<Spectrum_, Spectrum<float, 4>>)
        return "scalar_spectral";
    else if constexpr (std::is_same_v<Float_, dr::DiffArray<dr::LLVMArray<float>>> &&
                       std::is_same_v<Spectrum_, Color<dr::DiffArray<dr::LLVMArray<float>>, 3>>)
        return "llvm_ad_rgb";
    else
        return "";
}
NAMESPACE_END(detail)
NAMESPACE_END(mitsuba)
