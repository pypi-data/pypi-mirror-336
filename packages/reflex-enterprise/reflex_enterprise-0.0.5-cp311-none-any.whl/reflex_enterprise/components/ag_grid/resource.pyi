"""Stub file for reflex_enterprise/components/ag_grid/resource.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from types import SimpleNamespace
from typing import Any, Literal

from reflex.components.base import Image
from reflex.components.props import PropsBase
from reflex.components.radix.themes.typography.link import Link
from reflex.event import EventChain
from reflex.vars.base import Var
from reflex.vars.function import ArgsFunctionOperation

def value_func_factory(return_expr: str | Var[str]) -> ArgsFunctionOperation: ...

class AGFilters(SimpleNamespace):
    text = "agTextColumnFilter"
    number = "agNumberColumnFilter"
    date = "agDateColumnFilter"
    set = "agSetColumnFilter"
    multi = "agMultiColumnFilter"

class AGEditors(SimpleNamespace):
    text = "agTextCellEditor"
    large_text = "agLargeTextCellEditor"
    select = "agSelectCellEditor"
    rich_select = "agRichSelectCellEditor"
    number = "agNumberCellEditor"
    date = "agDateCellEditor"
    checkbox = "agCheckboxCellEditor"

class AGRenderers(SimpleNamespace):
    link = ArgsFunctionOperation.create(
        ("params",),
        Link.create(
            Var("params.value"),
            href=Var("params.value? params.value?.toString():''", _var_type=str),
        ),
    )
    link_external = ArgsFunctionOperation.create(
        ("params",),
        Link.create(
            Var("params.value"),
            href=Var("params.value? params.value?.toString() :''", _var_type=str),
            target="_blank",
        ),
    )
    image = ArgsFunctionOperation.create(
        ("params",), Image.create(src=Var("params.value"))
    )
    checkbox_cell = "agCheckboxCellRenderer"

class ColumnDef(PropsBase):
    field: str | Var[str]
    col_id: str | Var[str] | None
    type: str | Var[str] | None
    cell_data_type: bool | str | Var[bool] | Var[str] | None
    hide: bool | Var[bool] | None
    editable: bool | Var[bool] | None
    filter: AGFilters | str | Var[AGFilters] | Var[str] | None
    floating_filter: bool | Var[bool] | None
    header_name: str | Var[str] | None
    header_tooltip: str | Var[str] | None
    checkbox_selection: bool | Var[bool] | None
    cell_editor: AGEditors | str | Var[AGEditors] | Var[str] | None
    cell_editor_params: dict[str, list[Any]] | Var[dict[str, list[Any]]] | None
    value_getter: Var | str | None
    value_setter: EventChain | Var[EventChain] | None
    value_formatter: Var | str | None
    wrap_text: bool | None
    auto_height: bool | None
    auto_header_height: bool | None
    enable_cell_change_flash: bool | None
    cell_editor_popup: bool | None
    cell_editor_popup_position: str | None
    resizable: bool | None
    suppress_span_header_height: bool | None
    cell_renderer: ArgsFunctionOperation | str | None
    cell_renderer_params: dict[str, Any] | Var[dict[str, Any]] | None
    flex: int | Var[int] | None
    width: int | Var[int] | None
    min_width: int | Var[int] | None
    max_width: int | Var[int] | None
    agg_func: str | Var[str] | None

    def dict(self, *args, **kwargs): ...

class ColumnGroup(PropsBase):
    children: list["ColumnDef | ColumnGroup"] | Var[list["ColumnDef | ColumnGroup"]]
    group_id: str | Var[str] | None
    marry_children: bool | Var[bool]
    open_by_default: bool | Var[bool]
    column_group_show: Literal["open", "closed"] | Var[str]
    header_name: str | Var[str]
    header_tooltip: str | Var[str] | None

class AGStatusPanels(SimpleNamespace): ...

class StatusPanelDef(PropsBase):
    status_panel: str | Var[str]
    status_panel_params: dict[str, Any] | Var[dict[str, Any]] | None
    align: str | Var[str] | None
    key: str | Var[str] | None

class SideBarDef(PropsBase):
    tool_panels: list[str] | Var[list[str]]
    default_tool_panel: str | Var[str] | None
    hidden_by_default: bool | Var[bool]
    position: str | Var[str] | None

class ToolPanelDef(PropsBase):
    id: str
    label_key: str
    label_default: str
    min_width: int | Var[int] | None
    max_width: int | Var[int] | None
    width: int | Var[int] | None
