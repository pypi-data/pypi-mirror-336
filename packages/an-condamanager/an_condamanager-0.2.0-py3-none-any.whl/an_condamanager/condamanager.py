# -*- coding: utf-8 -*-
"""CONM_20250327_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nX_IAJPgb8-vs01CMaUHOZDcQLvaBXk2

# CondaManager
Conda 仮想環境におけるCUDA コンポーネントなどの管理を行うクラス

```
2025/03/19 0.1.0 BranchRouter 用ダミー生成
2025/03/19 0.1.1 デバッグ
2025/03/27 0.2.0 EnvironmentChecker 追加
```

# CondaManager

## 1. condacolab 設定
"""

# @title a. GDrive接続とcondacolab設定
if __name__ == '__main__':
    get_ipython().system( "pip install an_CondaInitializer" )
    from an_condainitializer import CondaInitializer

    condainitializer = CondaInitializer()

"""## 2. モジュール定義"""

# %%writefile /content/drive/MyDrive/code/CondaManager.py
# @title a. CondaManager 定義
import os
import sys
import subprocess
import shutil
from pathlib import Path
# from CondaEnvManager import CondaEnvManager
get_ipython().system( "pip install an_DebugHelper" )
from an_debughelper import DebugHelper
get_ipython().system( "pip install an_CudaUtility" )
from an_cudautility import CudaUtility
get_ipython().system( "pip install an_QuickViper2" )
from an_quickviper2 import QuickViper2
get_ipython().system( "pip install an_UniqueEnvVar" )
from an_uniqueenvvar import UniqueEnvVar
get_ipython().system( "pip install an_EasyVen" )
from an_easyven import EasyVen


class CondaManager:
    """Conda 仮想環境における CUDA コンポーネントの管理を行うクラス"""
    def __init__(self):
        """CondaManager の初期化。デバッグ用オブジェクトを受け取る。"""
        self.debug = DebugHelper(instance_name="CondaManager")
        self.debug.enable_log_to_file_stdout()
        self.debug.enable_log_to_file_stderr()
        self.debug.enable_timestamp()
        if shutil.which("conda") is None:
            self.debug.log_step("Conda is not available. Ensure Conda is installed and activated.", success=False)
            raise Exception("Conda is not available. Ensure Conda is installed and activated.")
        # self.condaenv = CondaEnvManager()
        self.cudau = CudaUtility()
        # self.envmanager = EnvManager(env_files=["settings_ven.env"])
        self.unv_ld_library = UniqueEnvVar( var_name = "LD_LIBRARY_PATH" )
        self.unv_cuda_home = UniqueEnvVar( var_name = "CUDA_HOME" )



    def cleanup_cuda(self, venv_name = None ):
        """CUDA 関連のすべてのパッケージ (cudatoolkit, cudnn, cublas) をアンインストールする。"""
        # CUDA 関連パッケージのアンインストール開始をログに記録
        self.debug.log_step( "引数reset_cudaがTrueなので、CUDAのリセットを行います", success = True )
        self.debug.log_step("CUDA 関連パッケージ (cudatoolkit, cudnn, cublas) をアンインストールします。")
        try:
            # conda コマンドで CUDA パッケージを削除
            # conda remove -n kohya_env --yes cudatoolkit cudnn cublas
            # result, stdout, stderr = self.debug.run_command(f"conda remove -n {env} --yes cudatoolkit cudnn cublas", stdout = True, stderr = True)
            # envs = self.condaenv.list_envs()
            if not venv_name is None:
                envs = [ venv_name ]
            else:
                self.debug.log_step( "リセットする仮想環境が設定されていません", success = False )
                return

            for env in envs:
                self.debug.log_step( f"env: { env }", success = None )
                self.remove_cuda_packages_from_env( env )
                # アンインストールが成功したことをログに記録
            self.debug.log_step("指定された仮想環境のCUDA 関連パッケージをすべて環境から削除しました。", success = True)
        except subprocess.CalledProcessError as e:
            # コマンド実行に失敗した場合はエラーをログに記録し、例外を再送出
            self.debug.log_step(f"CUDA パッケージの削除に失敗しました: {e}", success = False)
            raise Exception("CUDA パッケージの削除に失敗しました")



    def remove_cuda_packages_from_env( self, venv_name ):
        """
        指定した環境 (env_path) から cudatoolkit, cudnn, cublas を削除する。
        存在しない場合はスキップする。
        """
        packages = ["cudatoolkit", "cudnn", "cublas"]
        for pkg in packages:
            venv_path = self.lcl_path.joinpath( venv_name )
            result = self.debug.installer( command = f"conda list -p { venv_path } | grep {pkg}", shell = True, back = 1 )
            if result.returncode == 0:
                self.debug.log_step(f"{ pkg } が { venv_name } に存在します。削除を試みます。", success=None)
                cmd_remove = f"conda remove -p { venv_path } --yes {pkg}"
                try:
                    subprocess.run(cmd_remove, shell=True, check=True)
                    self.debug.log_step(f"{ pkg } の削除に成功しました。", success=True)
                except subprocess.CalledProcessError as e:
                    self.debug.log_step(f"{ pkg } の削除に失敗しました: {e}", success=False)
                    # pipでの削除は試みない
            elif result.returncode == 1:
                self.debug.log_step(f"{ pkg } は { venv_name } に存在しないため、スキップします。", success=True)
            else:
                self.debug.log_step("原因不明のエラーが発生しました", success=False)



# # 例: 仮想環境ディレクトリのベースパスと環境名のリスト
# base_env_dir = "/content/drive/MyDrive/cEnv/venv"
# envs = ["kohya_env", "sd_env", "comfy_env"]

# for env in envs:
#     full_env_path = os.path.join(base_env_dir, env)
#     print(f"\n=== 環境 {env} のCUDA関連パッケージを削除 ===")
#     remove_cuda_packages_from_env(full_env_path)


    def install_cuda( self, venv_name = "kohya_env", cuda_version = "CU118" ):
        self.venv_name = venv_name
        self.cuda_version = cuda_version
        self.even = EasyVen()
        [ self.bch_path,
          self.dst_path,
          self.cur_path,
          self.src_path,
          self.arc_path,
          self.lcl_path,
          self.bin_path,
          self.lib_path ] = self.even.setup( venv_name = self.venv_name )

        self.quickviper = QuickViper2( venv_name = self.venv_name )
        self.quickviper.unlock( force_unlock = True )

        # self.debug.log_step( f"仮想環境: { self.env_name } をリセットし、CUDAを { cuda_version } にセットします。", success = None )
        # self.cleanup_cuda( env_name = env_name )
        self.install_cuda_toolkit()
        self.install_cuda_dependencies()
        self.install_pytorch()
        self.install_xformers()
        self.install_bitsandbytes()
        self.set_cuda_environment_vars()
        # self.verify_cuda_installation() 環境チェックをするプログラムをつくったが、時間がかかるのでパス。
        self.debug.log_step( f"仮想環境: { self.venv_name } がリセットされ、CUDAが { cuda_version } にセットされました。", success = True )

    def install_cuda_toolkit( self ):
        self.debug.log_step(f"Checking for CUDA Toolkit {self.cudau.version_number( self.cuda_version )} in the Conda environment...", success=None)
        # mambaを使ってインストール
        cmd = f"mamba install -y cudatoolkit={self.cudau.version_number( self.cuda_version )} -c nvidia -c conda-forge"
        result = self.debug.installer( command = cmd, shell = True, back = 1 )
        if result.returncode == 0:
            self.debug.log_step(f"CUDA Toolkit { self.cuda_version } installation completed.", success=True)
        else:
            self.debug.log_step(f"CUDA Toolkit { self.cuda_version } のインストールに失敗しました: {result.stderr}", success=False)
            raise Exception("CUDA Toolkit のインストールに失敗しました" )


    def install_cuda_dependencies( self ):
        if self.cuda_version not in ("CU118", "CU124"):
            self.debug.log_step(f"サポートされていない cuda_version '{ self.cuda_version }' が指定されました。", success=False)
            raise ValueError("cuda_version は 'CU118' または 'CU124' のみ指定可能です。")
        if self.cuda_version == "CU118":
            commands = [
                "mamba install -y cudatoolkit=11.8 -c nvidia -c conda-forge",
                "mamba install -y cudnn=8.4.1.50 -c conda-forge"
            ]
        else:  # cuda_version == "CU124"
            commands = [
                "mamba install -y cudatoolkit=12.4 -c nvidia -c conda-forge",
                "mamba install -y cudnn=8.9 -c conda-forge"
            ]
        self.debug.log_step(f"CUDA バージョン {self.cuda_version} 用の依存パッケージをインストールします。", success=None)
        for cmd in commands:
            self.debug.log_step( f"cmd :\n{ cmd }", success = None )
            result = self.debug.installer( command = cmd, shell = True, back = 1 )
            if result.returncode != 0:
                self.debug.log_step(f"CUDA 依存パッケージのインストールに失敗しました: {result.stderr}", success=False)
                raise Exception("CUDA 依存パッケージのインストールに失敗しました")
        self.debug.log_step("CUDA 関連の依存パッケージのインストールが正常に完了しました。", success=True)

    def install_pytorch( self ):
        """PyTorch をインストールする。既にインストールされている場合はスキップする。"""
        self.debug.log_step("Checking for PyTorch in the Conda environment...", success=None)
        # cmd = f"conda install pytorch torchvision torchaudio cudatoolkit={ self.cudau.version_number( cuda_version ) } -c pytorch -c nvidia"
        cmd = f"mamba install pytorch torchvision torchaudio -c pytorch -c nvidia"
        ### 2025/03/25 挙動がおかしいのでsubprocessを直接使ってインストールを試みる
        ### reset, stdout, stderr = self.debug.run_command( command = cmd, stdout = True, stderr = True, sync = True )
        ### self.debug.log_step(f"stdout:\n{stdout}", success = None)
        ### self.debug.log_step(f"stderr:\n{stderr}", success = None)
        self.debug.log_step( f"cmd :\n{ cmd }", success = None )
        result = self.debug.installer( cmd, shell = True, back = 1 )
        if result.returncode == 0:
            self.debug.log_step("PyTorch is already installed.", success=True)
        else:
            raise Exception("PyTorch のインストールに失敗しました")

    def install_xformers(self):
        """xformers パッケージを仮想環境にインストールする。"""
        self.debug.log_step("xformers をインストールします...", success=None)
        python_path = self.lcl_path.joinpath( self.venv_name, self.bin_path, "python" )
        cmd = f"{python_path} -m pip install xformers"
        self.debug.log_step(f"インストールコマンド: {cmd}", success=None)
        result = self.debug.installer( command = cmd, shell = True, back = 1 )
        if result.returncode == 0:
            self.debug.log_step("xformers のインストールに成功しました。", success=True)
        else:
            raise Exception("xformers のインストールに失敗しました。")

    def install_bitsandbytes( self ):
        self.debug.log_step("Checking for Bitsandbytes in the Conda environment...", success=None)
        cuda_version_number = float( self.cudau.version_number( self.cuda_version) )
        if not (11.0 <= cuda_version_number <= 12.8):
            raise Exception("サポートされていない cuda_version が指定されました。")
        cmd = f"pip install bitsandbytes"
        result = self.debug.installer( command = cmd, shell = True, back = 1 )
        if result.returncode == 0:
            self.debug.log_step("Bitsandbytes is already installed.", success=True)
        else:
            raise Exception("Bitsandbytes のインストールに失敗しました")

    def set_cuda_environment_vars(self):
        """CUDA_HOME 環境変数を設定し、LD_LIBRARY_PATH に CUDA ライブラリパスを追加する。"""
        self.unv_cuda_home.add_value( "/usr/local/cuda" )
        self.debug.log_step(f"環境変数 CUDA_HOME を {self.unv_cuda_home.get_values()} に設定しました。", success = True )
        self.unv_ld_library.add_value( "/usr/local/cuda/lib" )
        self.debug.log_step(f"環境変数 LD_LIBRARY_PATH を {self.unv_ld_library.get_values()} に設定しました。", success = True)

    def verify_cuda_installation(self):
        """CUDA 関連パッケージのインストール状況と PyTorch による GPU 認識を検証する。"""
        # インストール済みの CUDA 関連パッケージを確認
        # packages = ["cudatoolkit", "cudnn", "cublas"]
        packages = ["cudatoolkit", "cudnn" ]
        all_installed = True
        for pkg in packages:
            result, stdout, stderr = self.debug.run_command(f"conda list {pkg}", stdout = True, stderr = True)
            output = stdout
            if pkg not in output:
                self.debug.log_step(f"{pkg} が環境にインストールされていません。", success = False)
                all_installed = False
            else:
                # パッケージ行（名前とバージョン）をログに記録
                for line in output.splitlines():
                    if line.strip().startswith(pkg):
                        self.debug.log_step(f"{pkg} インストール済み: {line.strip()}")
                        break
        if not all_installed:
            raise RuntimeError("一部のCUDA関連パッケージが正しくインストールされていません。")
        # PyTorch による GPU 認識を確認  'print(\"Hello World!\")'
        cmd = f"{os.path.join( self.envmanager.get_env_var( 'Ven_venv_folder' ), 'kohya_env', 'bin', 'python')} -c 'import torch; print(torch.cuda.is_available())'"
        self.debug.log_step( f"cmd : { cmd }", success = None )
        result, stdout, stderr = self.debug.run_command( command = cmd , stdout = True, stderr= True )
        self.debug.log_step( f"stdout: { stdout }", success = True )
        self.debug.log_step( f"stderr: { stderr }", success = False )
        torch_check = stdout.strip()
        self.debug.log_step(f"torch.cuda.is_available() の結果: {torch_check}")
        if result == 0:
            if torch_check != "True":
                self.debug.log_step("PyTorch が CUDA 対応GPUを認識できませんでした。", success = False )
                raise RuntimeError("PyTorch が GPU を認識できません。CUDA のインストールに問題がある可能性があります。")
            else:
                self.debug.log_step("CUDA 環境は正常です (PyTorch が GPU を認識しました)。", success = True )
        else:
            raise Exception( f"resultが0以外の値を返しています{ result }")

"""## 3. テスト"""

# @title a. CondaManager 実行
if __name__ == "__main__":
    condamanager = CondaManager()
    condamanager.install_cuda()