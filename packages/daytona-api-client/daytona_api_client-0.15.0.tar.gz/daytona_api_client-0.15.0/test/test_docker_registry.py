# coding: utf-8

"""
    Daytona Workspaces

    Daytona Workspaces API Docs

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from daytona_api_client.models.docker_registry import DockerRegistry

class TestDockerRegistry(unittest.TestCase):
    """DockerRegistry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DockerRegistry:
        """Test DockerRegistry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DockerRegistry`
        """
        model = DockerRegistry()
        if include_optional:
            return DockerRegistry(
                id = '123e4567-e89b-12d3-a456-426614174000',
                name = 'My Docker Hub',
                url = 'https://registry.hub.docker.com',
                username = 'username',
                project = 'my-project',
                registry_type = 'internal',
                created_at = '2024-01-31T12:00Z',
                updated_at = '2024-01-31T12:00Z'
            )
        else:
            return DockerRegistry(
                id = '123e4567-e89b-12d3-a456-426614174000',
                name = 'My Docker Hub',
                url = 'https://registry.hub.docker.com',
                username = 'username',
                project = 'my-project',
                registry_type = 'internal',
                created_at = '2024-01-31T12:00Z',
                updated_at = '2024-01-31T12:00Z',
        )
        """

    def testDockerRegistry(self):
        """Test DockerRegistry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
