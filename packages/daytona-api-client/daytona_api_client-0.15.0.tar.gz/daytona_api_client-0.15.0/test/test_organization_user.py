# coding: utf-8

"""
    Daytona Workspaces

    Daytona Workspaces API Docs

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from daytona_api_client.models.organization_user import OrganizationUser

class TestOrganizationUser(unittest.TestCase):
    """OrganizationUser unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrganizationUser:
        """Test OrganizationUser
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrganizationUser`
        """
        model = OrganizationUser()
        if include_optional:
            return OrganizationUser(
                user_id = '',
                organization_id = '',
                name = '',
                email = '',
                role = 'owner',
                assigned_roles = [
                    daytona_api_client.models.organization_role.OrganizationRole(
                        id = '', 
                        name = '', 
                        description = '', 
                        permissions = [
                            'write:registries'
                            ], 
                        is_global = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return OrganizationUser(
                user_id = '',
                organization_id = '',
                name = '',
                email = '',
                role = 'owner',
                assigned_roles = [
                    daytona_api_client.models.organization_role.OrganizationRole(
                        id = '', 
                        name = '', 
                        description = '', 
                        permissions = [
                            'write:registries'
                            ], 
                        is_global = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testOrganizationUser(self):
        """Test OrganizationUser"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
