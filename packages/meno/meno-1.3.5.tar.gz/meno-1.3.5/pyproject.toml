[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "meno"
version = "1.3.5"
description = "Topic modeling toolkit for messy text data"
readme = "README.md"
requires-python = ">=3.9,<3.14"
license = {text = "MIT"}
authors = [
    {name = "Stephen Oates", email = "stephen.oates@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    # Core dependencies with version bounds
    "pandas>=2.0.0,<3.0.0",
    "pyarrow>=11.0.0",  # Keep version constraint open for NumPy 2.0 compatibility
    "scikit-learn>=1.2.0,<2.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "pyyaml>=6.0,<7.0",
    "jinja2>=3.1.2,<4.0.0",
    # Text processing
    "thefuzz>=0.20.0,<0.21.0",  # Fork of fuzzywuzzy that includes Levenshtein by default
    # CLI support
    "argparse>=1.4.0,<2.0.0",
]

[project.optional-dependencies]
# Simplified installation options
lightweight = [
    "scikit-learn>=1.2.0,<2.0.0",
    "plotly>=5.14.0,<6.0.0",
    "wordcloud>=1.9.0,<2.0.0",
]
cpu = [
    "sentence-transformers>=2.2.2,<3.0.0", 
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "plotly>=5.14.0,<6.0.0",
    "umap-learn>=0.5.3,<0.6.0",
    "hdbscan>=0.8.29,<0.9.0", 
    "bertopic>=0.15.0,<0.16.0",
    "gensim>=4.3.0,<5.0.0",
    "spacy>=3.5.0,<4.0.0",
    "wordcloud>=1.9.0,<2.0.0",
    "en_core_web_sm>=3.5.0,<4.0.0",
]
gpu = [
    "sentence-transformers>=2.2.2,<3.0.0", 
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "plotly>=5.14.0,<6.0.0",
    "umap-learn>=0.5.3,<0.6.0",
    "hdbscan>=0.8.29,<0.9.0", 
    "bertopic>=0.15.0,<0.16.0",
    "gensim>=4.3.0,<5.0.0",
    "spacy>=3.5.0,<4.0.0",
    "wordcloud>=1.9.0,<2.0.0",
    "en_core_web_sm>=3.5.0,<4.0.0",
    "bitsandbytes>=0.41.0,<1.0.0",
    "accelerate>=0.20.0,<1.0.0",
    "safetensors>=0.3.1,<0.4.0",
]

# Legacy and specialized options
web = [
    "dash>=2.10.0,<3.0.0",
    "dash-bootstrap-components>=1.5.0,<2.0.0",
    "plotly>=5.14.0,<6.0.0",
]
embeddings = [
    "sentence-transformers>=2.2.2,<3.0.0",
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
]
embeddings-gpu = [
    "sentence-transformers>=2.2.2,<3.0.0",
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "accelerate>=0.20.0,<1.0.0",
    "bitsandbytes>=0.41.0,<1.0.0",
]
lda = [
    "gensim>=4.3.0,<5.0.0",
]
viz = [
    "plotly>=5.14.0,<6.0.0",
    "umap-learn>=0.5.3,<0.6.0",
]
clustering = [
    "hdbscan>=0.8.29,<0.9.0",
]
nlp = [
    "spacy>=3.5.0,<4.0.0",
]
active = [
    "cleanlab>=2.3.0,<3.0.0",
]
additional_models = [
    "bertopic>=0.15.0,<0.16.0",
    "top2vec>=1.0.27,<2.0.0",
    "contextualized-topic-models>=2.5.0,<3.0.0",
]
simple_models = [
    "scikit-learn>=1.2.0,<2.0.0",  # For KMeans, NMF, LSA/TruncatedSVD
]
optimization = [
    "polars>=1.11.0,<1.15.0",
    "pyarrow>=11.0.0",
]
memory_efficient = [
    "optimum>=1.15.0,<2.0.0",  # For model quantization
    "bitsandbytes>=0.41.0,<1.0.0",  # For 8-bit optimization
]
minimal = [
    "sentence-transformers>=2.2.2,<3.0.0", 
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "plotly>=5.14.0,<6.0.0",
    "umap-learn>=0.5.3,<0.6.0",
    "hdbscan>=0.8.29,<0.9.0", 
    "bertopic>=0.15.0,<0.16.0",
    "gensim>=4.3.0,<5.0.0",
    "spacy>=3.5.0,<4.0.0",
    "wordcloud>=1.9.0,<2.0.0",
]
spacy_model = [
    "en_core_web_sm>=3.5.0,<4.0.0",
]
llm = [
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "tqdm>=4.65.0,<5.0.0",
    "accelerate>=0.20.0,<0.22.0",
]
llm_openai = [
    "openai>=1.0.0,<2.0.0",
    "tqdm>=4.65.0,<5.0.0",
]
llm_multi = [
    "openai>=1.0.0,<2.0.0",
    "google-generativeai>=0.3.0",
    "anthropic>=0.8.0",
    "huggingface_hub>=0.20.0",
    "boto3>=1.28.0",
    "tqdm>=4.65.0,<5.0.0",
]
full = [
    "sentence-transformers>=2.2.2,<3.0.0",
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "gensim>=4.3.0,<5.0.0",
    "plotly>=5.14.0,<6.0.0",
    "umap-learn>=0.5.3,<0.6.0",
    "hdbscan>=0.8.29,<0.9.0",
    "spacy>=3.5.0,<4.0.0",
    "en_core_web_sm>=3.5.0,<4.0.0",   # Include the spaCy model directly
    "cleanlab>=2.3.0,<3.0.0",
    "polars>=1.11.0,<1.15.0",
    "bertopic>=0.15.0,<0.16.0",
    "top2vec>=1.0.27,<2.0.0",
    "wordcloud>=1.9.0,<2.0.0",
    "openai>=1.0.0,<2.0.0",           # For LLM topic labeling with OpenAI
    "tqdm>=4.65.0,<5.0.0",
]
full-gpu = [
    "sentence-transformers>=2.2.2,<3.0.0",
    "transformers>=4.28.0,<5.0.0",
    "torch>=2.0.0,<3.0.0",
    "accelerate>=0.20.0,<1.0.0",
    "bitsandbytes>=0.41.0,<1.0.0",
    "gensim>=4.3.0,<5.0.0",
    "plotly>=5.14.0,<6.0.0",
    "umap-learn>=0.5.3,<0.6.0",
    "hdbscan>=0.8.29,<0.9.0",
    "spacy>=3.5.0,<4.0.0",
    "en_core_web_sm>=3.5.0,<4.0.0",   # Include the spaCy model directly
    "cleanlab>=2.3.0,<3.0.0",
    "polars>=1.11.0,<1.15.0",
    "bertopic>=0.15.0,<0.16.0",
    "top2vec>=1.0.27,<2.0.0",
    "wordcloud>=1.9.0,<2.0.0",
    "openai>=1.0.0,<2.0.0",           # For LLM topic labeling with OpenAI
    "tqdm>=4.65.0,<5.0.0",
]
# Development dependencies split into logical groups
dev = [
    "black>=23.3.0,<24.0.0",
    "ruff>=0.0.265,<0.1.0",
    "mypy>=1.3.0,<2.0.0",
]
test = [
    "pytest>=7.3.1,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "hypothesis>=6.75.0,<7.0.0",
]
docs = [
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.2.0,<2.0.0",
    "jupyter>=1.0.0,<2.0.0",
]

[project.urls]
"Homepage" = "https://github.com/srepho/meno"
"Bug Tracker" = "https://github.com/srepho/meno/issues"

[project.scripts]
meno = "meno.cli.meno_cli:main"
meno-config = "meno.cli.team_config_cli:main"
meno-web = "meno.cli.web_interface_cli:main"

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.ruff]
line-length = 88
target-version = "py310"
select = ["E", "F", "B", "I", "UP", "N", "C4", "SIM", "ARG"]
ignore = ["E501"]  # Let black handle line length

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = ""

[tool.setuptools]
packages = [
    "meno",
    "meno.active_learning",
    "meno.cli",
    "meno.modeling",
    "meno.modeling.simple_models",
    "meno.preprocessing",
    "meno.reporting",
    "meno.utils",
    "meno.visualization",
    "meno.visualization.enhanced_viz"
]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.package-data]
meno = ["config/*.yaml", "default_config.yaml"]