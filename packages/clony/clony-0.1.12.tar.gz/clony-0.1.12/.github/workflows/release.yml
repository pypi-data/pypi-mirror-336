# GitHub Actions workflow for automated package releases
# This workflow builds and publishes new package versions when a version tag is pushed
name: Release

# Trigger the workflow only when a version tag (v*) is pushed
# Example tags: v1.0.0, v2.1.3, v0.5.0-beta
on:
    push:
        tags:
            - "v*"

jobs:
    # Main release job that builds and publishes the package
    release:
        # Use latest Ubuntu runner for building
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the repository code at the tagged version
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # Fetch all history and tags

            # Step 2: Set up Python environment
            # Using Python 3.10 for building to ensure compatibility
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.10"

            # Step 3: Install build dependencies
            - name: Install dependencies
              run: |
                  # Upgrade pip to latest version
                  python -m pip install --upgrade pip
                  # Install build dependencies explicitly
                  python -m pip install setuptools wheel setuptools_scm>=6.2
                  # Install project in editable mode with dev dependencies
                  python -m pip install -e ".[dev]"
                  # Install build tools for packaging
                  python -m pip install build

            # Step 4: Build source distribution and wheel
            - name: Build package
              run: |
                  # Debug info
                  echo "GitHub ref: $GITHUB_REF"
                  echo "GitHub ref name: $GITHUB_REF_NAME"

                  # Extract version from git tag (remove 'v' prefix)
                  VERSION=$(echo $GITHUB_REF_NAME | sed 's/^v//')
                  echo "Building version: $VERSION"

                  # Create version file manually to override setuptools_scm
                  echo "# Generated from tag" > clony/_version.py
                  echo "version = '$VERSION'" >> clony/_version.py

                  # Update hardcoded version in __init__.py as well
                  sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"  # Fallback version/" clony/__init__.py

                  # Disable setuptools_scm entirely by setting environment variables
                  export SETUPTOOLS_SCM_PRETEND_VERSION=$VERSION

                  # Show generated version files
                  cat clony/_version.py
                  cat clony/__init__.py | grep __version__

                  # Build the package with explicit version
                  python -m build --no-isolation

                  # Verify version in built packages
                  echo "Built packages in dist/:"
                  ls -la dist/

            # Step 5: Create GitHub Release with built artifacts
            # This step uploads the built distributions and generates release notes
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  # Include both source distribution and wheel in the release
                  files: |
                      dist/*.tar.gz
                      dist/*.whl
                  # Automatically generate release notes from commits
                  generate_release_notes: true
              env:
                  # Use repository-specific token for authentication
                  GITHUB_TOKEN: ${{ secrets.CLONY_REPO_TOKEN }}
