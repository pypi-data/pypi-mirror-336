"use strict";(self.webpackChunkjupyterlab_kishu=self.webpackChunkjupyterlab_kishu||[]).push([[763],{763:(e,t,o)=>{o.r(t),o.d(t,{default:()=>p});var i=o(76),n=o(920),a=o(490),s=o(83),c=o(344),r=o(558);async function u(e="",t={}){const o=r.ServerConnection.makeSettings(),i=c.URLExt.join(o.baseUrl,"kishu",e);let n;try{n=await r.ServerConnection.makeRequest(i,t,o)}catch(e){throw new r.ServerConnection.NetworkError(e)}const a=await n.text();if(!n.ok)throw new r.ServerConnection.ResponseError(n,a);if(a.length>0)try{return JSON.parse(a)}catch(e){console.log("Not a JSON response body.",n)}throw new r.ServerConnection.ResponseError(n,a)}const d="jupyterlab_kishu:plugin";var m,l;function h(e){i.Notification.error(e,{autoClose:3e3})}function _(e){const t=e.currentWidget;if(t)return t.context.localPath;console.log("Missing tracker widget to detect currently viewed notebook.")}function g(e){return`[${new Date(e.timestamp).toLocaleString()}]: ${e.message} (${e.commit_id})`}function k(e){l.kishu_dir=e.get("kishu_dir").composite,console.log(`Settings: kishu_dir= ${l.kishu_dir}`)}!function(e){e.init="kishu:init",e.checkout="kishu:checkout",e.commit="kishu:commit",e.undo="kishu:undo"}(m||(m={})),function(e){e.kishu_dir=""}(l||(l={}));const p={id:d,description:"Jupyter extension to interact with Kishu",autoStart:!0,requires:[i.ICommandPalette,s.ITranslator,a.ISettingRegistry,n.INotebookTracker],activate:(e,t,o,n,a)=>{Promise.all([e.restored,n.load(d)]).then((([,n])=>{k(n),n.changed.connect(k),function(e,t,o,n){const{commands:a}=e,s=o.load("jupyterlab");a.addCommand(m.init,{label:e=>e.label&&"short"==e.label?s.__("Initialize/Re-attach"):s.__("Kishu: Initialize/Re-attach..."),execute:async e=>{const t=_(n);if(!t)return void h(s.__("No currently viewed notebook detected to initialize/attach."));const o=u("init",{method:"POST",body:JSON.stringify({notebook_path:t})}),a=i.Notification.manager,c=a.notify(s.__(`Initializing Kishu on ${t}...`),"in-progress",{autoClose:!1});o.then((e=>{"ok"!=e.status?a.update({id:c,message:s.__(`Kishu init failed.\n"${e.message}"`),type:"error",autoClose:3e3}):a.update({id:c,message:s.__(`Kishu init succeeded!\n"${e.message}"`),type:"success",autoClose:3e3})}))}}),t.addItem({command:m.init,category:"Kishu"}),a.addCommand(m.checkout,{label:e=>e.label&&"short"==e.label?s.__("Checkout"):s.__("Kishu: Checkout..."),execute:async e=>{var t;const o=_(n);if(!o)return void h(s.__("No currently viewed notebook detected to checkout."));const a=await u("log_all",{method:"POST",body:JSON.stringify({notebook_path:o,kinds:["manual"]})});let c;if(a&&0!=a.commit_graph.length){let e=a.commit_graph.findIndex((e=>e.commit_id===a.head.commit_id));-1==e&&(e=a.commit_graph.length-1);const o=null!==(t=(await i.InputDialog.getItem({items:a.commit_graph.map(g),current:e,editable:!1,title:s.__("Checkout to..."),okLabel:s.__("Checkout")})).value)&&void 0!==t?t:void 0;void 0!==o&&(c=function(e){const t=e.match(/\(([0-9a-fA-F-]+)\)$/);if(t&&t[1])return t[1]}(o))}else r=s.__("No Kishu commit found."),i.Notification.warning(r,{autoClose:3e3});var r;if(!c)return;const d=c,m=u("checkout",{method:"POST",body:JSON.stringify({notebook_path:o,commit_id:d})}),l=i.Notification.manager,k=l.notify(s.__(`Checking out ${d}...`),"in-progress",{autoClose:!1});m.then((e=>{"ok"!=e.status?l.update({id:k,message:s.__(`Kishu checkout failed.\n"${e.message}"`),type:"error",autoClose:3e3}):l.update({id:k,message:s.__(`Kishu checkout to ${d} succeeded!`),type:"success",autoClose:3e3})}))}}),t.addItem({command:m.checkout,category:"Kishu"}),a.addCommand(m.commit,{label:e=>e.label&&"short"==e.label?s.__("Commit"):s.__("Kishu: Commit..."),execute:async e=>{var t;const o=_(n);if(!o)return void h(s.__("No currently viewed notebook detected to commit."));const a=null!==(t=(await i.InputDialog.getText({placeholder:"<commit_message>",title:s.__("Commit message"),okLabel:s.__("Commit")})).value)&&void 0!==t?t:void 0;if(null==a)return;a||h(s.__("Kishu commit requires a commit message."));const c=u("commit",{method:"POST",body:JSON.stringify({notebook_path:o,message:a})}),r=i.Notification.manager,d=r.notify(s.__("Creating a commit..."),"in-progress",{autoClose:!1});c.then((e=>{"ok"!=e.status?r.update({id:d,message:s.__(`Kishu commit failed.\n"${e.message}"`),type:"error",autoClose:3e3}):r.update({id:d,message:s.__("Kishu commit succeeded!"),type:"success",autoClose:3e3})}))}}),t.addItem({command:m.commit,category:"Kishu"}),a.addCommand(m.undo,{label:e=>e.label&&"short"==e.label?s.__("Undo Execution"):s.__("Kishu: Undo Execution..."),execute:async e=>{const t=_(n);if(!t)return void h(s.__("No currently viewed notebook detected to undo execution."));const o=u("undo",{method:"POST",body:JSON.stringify({notebook_path:t})}),a=i.Notification.manager,c=a.notify(s.__(`Undoing execution for ${t}...`),"in-progress",{autoClose:!1});o.then((e=>{"ok"!=e.status?a.update({id:c,message:s.__(`Undo execution failed.\n"${e.message}"`),type:"error",autoClose:3e3}):a.update({id:c,message:s.__("Undo execution succeeded!"),type:"success",autoClose:3e3})}))}}),t.addItem({command:m.undo,category:"Kishu"})}(e,t,o,a)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)}))}}}}]);