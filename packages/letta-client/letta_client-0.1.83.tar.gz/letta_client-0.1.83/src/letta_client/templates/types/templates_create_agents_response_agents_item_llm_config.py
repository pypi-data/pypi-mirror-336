# This file was auto-generated by Fern from our API Definition.

from ...core.unchecked_base_model import UncheckedBaseModel
from .templates_create_agents_response_agents_item_llm_config_model_endpoint_type import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigModelEndpointType,
)
import typing
from .templates_create_agents_response_agents_item_llm_config_model_endpoint import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigModelEndpoint,
)
from .templates_create_agents_response_agents_item_llm_config_model_wrapper import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigModelWrapper,
)
from .templates_create_agents_response_agents_item_llm_config_put_inner_thoughts_in_kwargs import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigPutInnerThoughtsInKwargs,
)
from .templates_create_agents_response_agents_item_llm_config_handle import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigHandle,
)
from .templates_create_agents_response_agents_item_llm_config_temperature import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigTemperature,
)
from .templates_create_agents_response_agents_item_llm_config_max_tokens import (
    TemplatesCreateAgentsResponseAgentsItemLlmConfigMaxTokens,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class TemplatesCreateAgentsResponseAgentsItemLlmConfig(UncheckedBaseModel):
    model: str
    model_endpoint_type: TemplatesCreateAgentsResponseAgentsItemLlmConfigModelEndpointType
    model_endpoint: typing.Optional[TemplatesCreateAgentsResponseAgentsItemLlmConfigModelEndpoint] = None
    model_wrapper: typing.Optional[TemplatesCreateAgentsResponseAgentsItemLlmConfigModelWrapper] = None
    context_window: float
    put_inner_thoughts_in_kwargs: typing.Optional[
        TemplatesCreateAgentsResponseAgentsItemLlmConfigPutInnerThoughtsInKwargs
    ] = None
    handle: typing.Optional[TemplatesCreateAgentsResponseAgentsItemLlmConfigHandle] = None
    temperature: typing.Optional[TemplatesCreateAgentsResponseAgentsItemLlmConfigTemperature] = None
    max_tokens: typing.Optional[TemplatesCreateAgentsResponseAgentsItemLlmConfigMaxTokens] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
