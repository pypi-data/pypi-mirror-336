# This file was auto-generated by Fern from our API Definition.

from ...core.unchecked_base_model import UncheckedBaseModel
from .agents_search_response_agents_item_multi_agent_group_agent_ids_manager_type import (
    AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsManagerType,
)
import typing
from .agents_search_response_agents_item_multi_agent_group_agent_ids_manager_agent_id import (
    AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsManagerAgentId,
)
from .agents_search_response_agents_item_multi_agent_group_agent_ids_termination_token import (
    AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsTerminationToken,
)
from .agents_search_response_agents_item_multi_agent_group_agent_ids_max_turns import (
    AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsMaxTurns,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class AgentsSearchResponseAgentsItemMultiAgentGroupAgentIds(UncheckedBaseModel):
    id: str
    manager_type: AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsManagerType
    agent_ids: typing.List[str]
    description: str
    manager_agent_id: typing.Optional[AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsManagerAgentId] = None
    termination_token: typing.Optional[AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsTerminationToken] = None
    max_turns: typing.Optional[AgentsSearchResponseAgentsItemMultiAgentGroupAgentIdsMaxTurns] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
