# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class StationFilePaths(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container_id': 'str',
        'dataset_id': 'str',
        'file_paths': 'list[str]',
        'thumbnail_paths': 'list[str]',
        'error_list': 'list[bool]',
        'classes': 'list[str]',
        'station_id': 'str'
    }

    attribute_map = {
        'container_id': 'container_id',
        'dataset_id': 'dataset_id',
        'file_paths': 'file_paths',
        'thumbnail_paths': 'thumbnail_paths',
        'error_list': 'error_list',
        'classes': 'classes',
        'station_id': 'station_id'
    }

    def __init__(self, container_id=None, dataset_id=None, file_paths=None, thumbnail_paths=None, error_list=None, classes=None, station_id=None, local_vars_configuration=None):  # noqa: E501
        """StationFilePaths - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._container_id = None
        self._dataset_id = None
        self._file_paths = None
        self._thumbnail_paths = None
        self._error_list = None
        self._classes = None
        self._station_id = None
        self.discriminator = None

        if container_id is not None:
            self.container_id = container_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if file_paths is not None:
            self.file_paths = file_paths
        if thumbnail_paths is not None:
            self.thumbnail_paths = thumbnail_paths
        if error_list is not None:
            self.error_list = error_list
        if classes is not None:
            self.classes = classes
        self.station_id = station_id

    @property
    def container_id(self):
        """Gets the container_id of this StationFilePaths.  # noqa: E501


        :return: The container_id of this StationFilePaths.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this StationFilePaths.


        :param container_id: The container_id of this StationFilePaths.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this StationFilePaths.  # noqa: E501


        :return: The dataset_id of this StationFilePaths.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this StationFilePaths.


        :param dataset_id: The dataset_id of this StationFilePaths.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def file_paths(self):
        """Gets the file_paths of this StationFilePaths.  # noqa: E501


        :return: The file_paths of this StationFilePaths.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_paths

    @file_paths.setter
    def file_paths(self, file_paths):
        """Sets the file_paths of this StationFilePaths.


        :param file_paths: The file_paths of this StationFilePaths.  # noqa: E501
        :type file_paths: list[str]
        """

        self._file_paths = file_paths

    @property
    def thumbnail_paths(self):
        """Gets the thumbnail_paths of this StationFilePaths.  # noqa: E501


        :return: The thumbnail_paths of this StationFilePaths.  # noqa: E501
        :rtype: list[str]
        """
        return self._thumbnail_paths

    @thumbnail_paths.setter
    def thumbnail_paths(self, thumbnail_paths):
        """Sets the thumbnail_paths of this StationFilePaths.


        :param thumbnail_paths: The thumbnail_paths of this StationFilePaths.  # noqa: E501
        :type thumbnail_paths: list[str]
        """

        self._thumbnail_paths = thumbnail_paths

    @property
    def error_list(self):
        """Gets the error_list of this StationFilePaths.  # noqa: E501


        :return: The error_list of this StationFilePaths.  # noqa: E501
        :rtype: list[bool]
        """
        return self._error_list

    @error_list.setter
    def error_list(self, error_list):
        """Sets the error_list of this StationFilePaths.


        :param error_list: The error_list of this StationFilePaths.  # noqa: E501
        :type error_list: list[bool]
        """

        self._error_list = error_list

    @property
    def classes(self):
        """Gets the classes of this StationFilePaths.  # noqa: E501


        :return: The classes of this StationFilePaths.  # noqa: E501
        :rtype: list[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this StationFilePaths.


        :param classes: The classes of this StationFilePaths.  # noqa: E501
        :type classes: list[str]
        """

        self._classes = classes

    @property
    def station_id(self):
        """Gets the station_id of this StationFilePaths.  # noqa: E501


        :return: The station_id of this StationFilePaths.  # noqa: E501
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this StationFilePaths.


        :param station_id: The station_id of this StationFilePaths.  # noqa: E501
        :type station_id: str
        """
        if self.local_vars_configuration.client_side_validation and station_id is None:  # noqa: E501
            raise ValueError("Invalid value for `station_id`, must not be `None`")  # noqa: E501

        self._station_id = station_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StationFilePaths):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StationFilePaths):
            return True

        return self.to_dict() != other.to_dict()
