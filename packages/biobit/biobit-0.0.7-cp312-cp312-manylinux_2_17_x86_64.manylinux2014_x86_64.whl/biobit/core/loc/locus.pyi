from .orientation import Orientation, IntoOrientation
from .interval import Interval, IntoInterval


class Locus:
    contig: str
    interval: Interval
    orientation: Orientation

    def __init__(self, contig: str, interval: IntoInterval, orientation: IntoOrientation) -> None: ...

    @property
    def start(self) -> int: ...

    @property
    def end(self) -> int: ...

    def len(self) -> int: ...

    def flip(self) -> Locus: ...

    def flipped(self) -> Locus: ...

    # def contains(self, pos: int) -> bool: ...
    #
    # def intersects(self, other: LocusLike) -> bool: ...
    #
    # def touches(self, other: LocusLike) -> bool: ...
    #
    # def extend(self, left: int = 0, right: int = 0) -> Locus: ...
    #
    # def extended(self, left: int = 0, right: int = 0) -> Locus: ...
    #
    # def intersection(self, other: LocusLike) -> Locus | None: ...
    #
    # def union(self, other: LocusLike) -> Locus | None: ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

    def __hash__(self) -> int: ...

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: object) -> bool: ...

    def __le__(self, other: object) -> bool: ...

    def __gt__(self, other: object) -> bool: ...

    def __ge__(self, other: object) -> bool: ...


IntoLocus = Locus | tuple[str, IntoInterval, IntoOrientation]
