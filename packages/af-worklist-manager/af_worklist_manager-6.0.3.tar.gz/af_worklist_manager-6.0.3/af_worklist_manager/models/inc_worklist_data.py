# coding: utf-8

"""
    AristaFlowREST/WorklistManager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncWorklistData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_class': 'str',
        'inc_wl_id': 'str',
        'rem_alive_time': 'int',
        'closed': 'bool'
    }

    attribute_map = {
        'sub_class': 'subClass',
        'inc_wl_id': 'incWlId',
        'rem_alive_time': 'remAliveTime',
        'closed': 'closed'
    }

    def __init__(self, sub_class=None, inc_wl_id=None, rem_alive_time=None, closed=None):  # noqa: E501
        """IncWorklistData - a model defined in Swagger"""  # noqa: E501
        self._sub_class = None
        self._inc_wl_id = None
        self._rem_alive_time = None
        self._closed = None
        if not(hasattr(self, "discriminator")) or not(self.discriminator):
            self.discriminator = None
        if sub_class is not None:
            self.sub_class = sub_class
        if inc_wl_id is not None:
            self.inc_wl_id = inc_wl_id
        self.rem_alive_time = rem_alive_time
        self.closed = closed

    @property
    def sub_class(self):
        """Gets the sub_class of this IncWorklistData.  # noqa: E501


        :return: The sub_class of this IncWorklistData.  # noqa: E501
        :rtype: str
        """
        return self._sub_class

    @sub_class.setter
    def sub_class(self, sub_class):
        """Sets the sub_class of this IncWorklistData.


        :param sub_class: The sub_class of this IncWorklistData.  # noqa: E501
        :type: str
        """

        self._sub_class = sub_class

    @property
    def inc_wl_id(self):
        """Gets the inc_wl_id of this IncWorklistData.  # noqa: E501


        :return: The inc_wl_id of this IncWorklistData.  # noqa: E501
        :rtype: str
        """
        return self._inc_wl_id

    @inc_wl_id.setter
    def inc_wl_id(self, inc_wl_id):
        """Sets the inc_wl_id of this IncWorklistData.


        :param inc_wl_id: The inc_wl_id of this IncWorklistData.  # noqa: E501
        :type: str
        """

        self._inc_wl_id = inc_wl_id

    @property
    def rem_alive_time(self):
        """Gets the rem_alive_time of this IncWorklistData.  # noqa: E501


        :return: The rem_alive_time of this IncWorklistData.  # noqa: E501
        :rtype: int
        """
        return self._rem_alive_time

    @rem_alive_time.setter
    def rem_alive_time(self, rem_alive_time):
        """Sets the rem_alive_time of this IncWorklistData.


        :param rem_alive_time: The rem_alive_time of this IncWorklistData.  # noqa: E501
        :type: int
        """
        if rem_alive_time is None:
            raise ValueError("Invalid value for `rem_alive_time`, must not be `None`")  # noqa: E501

        self._rem_alive_time = rem_alive_time

    @property
    def closed(self):
        """Gets the closed of this IncWorklistData.  # noqa: E501


        :return: The closed of this IncWorklistData.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this IncWorklistData.


        :param closed: The closed of this IncWorklistData.  # noqa: E501
        :type: bool
        """
        if closed is None:
            raise ValueError("Invalid value for `closed`, must not be `None`")  # noqa: E501

        self._closed = closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncWorklistData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncWorklistData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
