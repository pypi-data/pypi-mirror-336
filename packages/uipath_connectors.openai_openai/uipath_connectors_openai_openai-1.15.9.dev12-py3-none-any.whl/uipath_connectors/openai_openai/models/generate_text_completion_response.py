from pydantic import BaseModel, ConfigDict, Field
from typing import Any, Dict, Optional, Type

from ..models.generate_text_completion_response_choices_array_item_ref import (
    GenerateTextCompletionResponseChoicesArrayItemRef,
)
from ..models.generate_text_completion_response_model import (
    GenerateTextCompletionResponseModel,
)
from ..models.generate_text_completion_response_usage import (
    GenerateTextCompletionResponseUsage,
)


class GenerateTextCompletionResponse(BaseModel):
    """
    Attributes:
        choices (Optional[list['GenerateTextCompletionResponseChoicesArrayItemRef']]):
        created (Optional[int]): The created date/time in milliseconds since the Epoch Example: 1675302413.0.
        id (Optional[str]): The ID of the returned completion Example: <someCompletionId>.
        model (Optional[GenerateTextCompletionResponseModel]): The large language model (LLM) to use for the text
                completion. Defaults to gpt-3.5-turbo-instruct Default:
                GenerateTextCompletionResponseModel.GPT_35_TURBO_INSTRUCT. Example: gpt-3.5-turbo-instruct.
        object_ (Optional[str]): The Object Example: text_completion.
        text (Optional[str]): The text for the top choice generated by the AI
        usage (Optional[GenerateTextCompletionResponseUsage]):
    """

    model_config = ConfigDict(extra="allow", populate_by_name=True)

    choices: Optional[list["GenerateTextCompletionResponseChoicesArrayItemRef"]] = (
        Field(alias="choices", default=None)
    )
    created: Optional[int] = Field(alias="created", default=None)
    id: Optional[str] = Field(alias="id", default=None)
    model: Optional["GenerateTextCompletionResponseModel"] = Field(
        alias="model", default=GenerateTextCompletionResponseModel.GPT_35_TURBO_INSTRUCT
    )
    object_: Optional[str] = Field(alias="object", default=None)
    text: Optional[str] = Field(alias="text", default=None)
    usage: Optional["GenerateTextCompletionResponseUsage"] = Field(
        alias="usage", default=None
    )

    def to_dict(self) -> Dict[str, Any]:
        return self.model_dump(exclude_none=True, by_alias=True)

    @classmethod
    def from_dict(
        cls: Type["GenerateTextCompletionResponse"], src_dict: Dict[str, Any]
    ):
        return cls.model_validate(src_dict)

    @property
    def additional_keys(self) -> list[str]:
        base_fields = self.model_fields.keys()
        return [k for k in self.__dict__ if k not in base_fields]

    def __getitem__(self, key: str) -> Any:
        if key in self.__dict__:
            return self.__dict__[key]
        raise KeyError(key)

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

    def __delitem__(self, key: str) -> None:
        if key in self.__dict__:
            del self.__dict__[key]
        else:
            raise KeyError(key)

    def __contains__(self, key: str) -> bool:
        return key in self.__dict__
