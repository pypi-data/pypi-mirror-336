"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import aserto.directory.assertion.v3.assertion_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AssertionStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetAssertion: grpc.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.GetAssertionRequest,
        aserto.directory.assertion.v3.assertion_pb2.GetAssertionResponse,
    ]

    ListAssertions: grpc.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.ListAssertionsRequest,
        aserto.directory.assertion.v3.assertion_pb2.ListAssertionsResponse,
    ]

    SetAssertion: grpc.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.SetAssertionRequest,
        aserto.directory.assertion.v3.assertion_pb2.SetAssertionResponse,
    ]

    DeleteAssertion: grpc.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionRequest,
        aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionResponse,
    ]

class AssertionAsyncStub:
    GetAssertion: grpc.aio.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.GetAssertionRequest,
        aserto.directory.assertion.v3.assertion_pb2.GetAssertionResponse,
    ]

    ListAssertions: grpc.aio.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.ListAssertionsRequest,
        aserto.directory.assertion.v3.assertion_pb2.ListAssertionsResponse,
    ]

    SetAssertion: grpc.aio.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.SetAssertionRequest,
        aserto.directory.assertion.v3.assertion_pb2.SetAssertionResponse,
    ]

    DeleteAssertion: grpc.aio.UnaryUnaryMultiCallable[
        aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionRequest,
        aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionResponse,
    ]

class AssertionServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetAssertion(
        self,
        request: aserto.directory.assertion.v3.assertion_pb2.GetAssertionRequest,
        context: _ServicerContext,
    ) -> typing.Union[aserto.directory.assertion.v3.assertion_pb2.GetAssertionResponse, collections.abc.Awaitable[aserto.directory.assertion.v3.assertion_pb2.GetAssertionResponse]]: ...

    @abc.abstractmethod
    def ListAssertions(
        self,
        request: aserto.directory.assertion.v3.assertion_pb2.ListAssertionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[aserto.directory.assertion.v3.assertion_pb2.ListAssertionsResponse, collections.abc.Awaitable[aserto.directory.assertion.v3.assertion_pb2.ListAssertionsResponse]]: ...

    @abc.abstractmethod
    def SetAssertion(
        self,
        request: aserto.directory.assertion.v3.assertion_pb2.SetAssertionRequest,
        context: _ServicerContext,
    ) -> typing.Union[aserto.directory.assertion.v3.assertion_pb2.SetAssertionResponse, collections.abc.Awaitable[aserto.directory.assertion.v3.assertion_pb2.SetAssertionResponse]]: ...

    @abc.abstractmethod
    def DeleteAssertion(
        self,
        request: aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionRequest,
        context: _ServicerContext,
    ) -> typing.Union[aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionResponse, collections.abc.Awaitable[aserto.directory.assertion.v3.assertion_pb2.DeleteAssertionResponse]]: ...

def add_AssertionServicer_to_server(servicer: AssertionServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
