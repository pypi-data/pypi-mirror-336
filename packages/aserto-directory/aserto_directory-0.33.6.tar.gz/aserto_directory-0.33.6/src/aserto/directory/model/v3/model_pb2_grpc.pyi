"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import aserto.directory.model.v3.model_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ModelStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetManifest: grpc.UnaryStreamMultiCallable[
        aserto.directory.model.v3.model_pb2.GetManifestRequest,
        aserto.directory.model.v3.model_pb2.GetManifestResponse,
    ]
    """get manifest instance"""

    SetManifest: grpc.StreamUnaryMultiCallable[
        aserto.directory.model.v3.model_pb2.SetManifestRequest,
        aserto.directory.model.v3.model_pb2.SetManifestResponse,
    ]
    """set manifest instance"""

    DeleteManifest: grpc.UnaryUnaryMultiCallable[
        aserto.directory.model.v3.model_pb2.DeleteManifestRequest,
        aserto.directory.model.v3.model_pb2.DeleteManifestResponse,
    ]
    """delete manifest instance"""

class ModelAsyncStub:
    GetManifest: grpc.aio.UnaryStreamMultiCallable[
        aserto.directory.model.v3.model_pb2.GetManifestRequest,
        aserto.directory.model.v3.model_pb2.GetManifestResponse,
    ]
    """get manifest instance"""

    SetManifest: grpc.aio.StreamUnaryMultiCallable[
        aserto.directory.model.v3.model_pb2.SetManifestRequest,
        aserto.directory.model.v3.model_pb2.SetManifestResponse,
    ]
    """set manifest instance"""

    DeleteManifest: grpc.aio.UnaryUnaryMultiCallable[
        aserto.directory.model.v3.model_pb2.DeleteManifestRequest,
        aserto.directory.model.v3.model_pb2.DeleteManifestResponse,
    ]
    """delete manifest instance"""

class ModelServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetManifest(
        self,
        request: aserto.directory.model.v3.model_pb2.GetManifestRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[aserto.directory.model.v3.model_pb2.GetManifestResponse], collections.abc.AsyncIterator[aserto.directory.model.v3.model_pb2.GetManifestResponse]]:
        """get manifest instance"""

    @abc.abstractmethod
    def SetManifest(
        self,
        request_iterator: _MaybeAsyncIterator[aserto.directory.model.v3.model_pb2.SetManifestRequest],
        context: _ServicerContext,
    ) -> typing.Union[aserto.directory.model.v3.model_pb2.SetManifestResponse, collections.abc.Awaitable[aserto.directory.model.v3.model_pb2.SetManifestResponse]]:
        """set manifest instance"""

    @abc.abstractmethod
    def DeleteManifest(
        self,
        request: aserto.directory.model.v3.model_pb2.DeleteManifestRequest,
        context: _ServicerContext,
    ) -> typing.Union[aserto.directory.model.v3.model_pb2.DeleteManifestResponse, collections.abc.Awaitable[aserto.directory.model.v3.model_pb2.DeleteManifestResponse]]:
        """delete manifest instance"""

def add_ModelServicer_to_server(servicer: ModelServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
