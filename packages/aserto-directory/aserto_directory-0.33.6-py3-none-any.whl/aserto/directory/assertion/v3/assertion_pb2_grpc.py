# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aserto.directory.assertion.v3 import assertion_pb2 as aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2


class AssertionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAssertion = channel.unary_unary(
                '/aserto.directory.assertion.v3.Assertion/GetAssertion',
                request_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.GetAssertionRequest.SerializeToString,
                response_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.GetAssertionResponse.FromString,
                _registered_method=True)
        self.ListAssertions = channel.unary_unary(
                '/aserto.directory.assertion.v3.Assertion/ListAssertions',
                request_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.ListAssertionsRequest.SerializeToString,
                response_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.ListAssertionsResponse.FromString,
                _registered_method=True)
        self.SetAssertion = channel.unary_unary(
                '/aserto.directory.assertion.v3.Assertion/SetAssertion',
                request_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.SetAssertionRequest.SerializeToString,
                response_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.SetAssertionResponse.FromString,
                _registered_method=True)
        self.DeleteAssertion = channel.unary_unary(
                '/aserto.directory.assertion.v3.Assertion/DeleteAssertion',
                request_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.DeleteAssertionRequest.SerializeToString,
                response_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.DeleteAssertionResponse.FromString,
                _registered_method=True)


class AssertionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAssertion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAssertions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAssertion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAssertion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssertionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAssertion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssertion,
                    request_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.GetAssertionRequest.FromString,
                    response_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.GetAssertionResponse.SerializeToString,
            ),
            'ListAssertions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAssertions,
                    request_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.ListAssertionsRequest.FromString,
                    response_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.ListAssertionsResponse.SerializeToString,
            ),
            'SetAssertion': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAssertion,
                    request_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.SetAssertionRequest.FromString,
                    response_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.SetAssertionResponse.SerializeToString,
            ),
            'DeleteAssertion': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAssertion,
                    request_deserializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.DeleteAssertionRequest.FromString,
                    response_serializer=aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.DeleteAssertionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aserto.directory.assertion.v3.Assertion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aserto.directory.assertion.v3.Assertion', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Assertion(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAssertion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aserto.directory.assertion.v3.Assertion/GetAssertion',
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.GetAssertionRequest.SerializeToString,
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.GetAssertionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAssertions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aserto.directory.assertion.v3.Assertion/ListAssertions',
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.ListAssertionsRequest.SerializeToString,
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.ListAssertionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetAssertion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aserto.directory.assertion.v3.Assertion/SetAssertion',
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.SetAssertionRequest.SerializeToString,
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.SetAssertionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAssertion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aserto.directory.assertion.v3.Assertion/DeleteAssertion',
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.DeleteAssertionRequest.SerializeToString,
            aserto_dot_directory_dot_assertion_dot_v3_dot_assertion__pb2.DeleteAssertionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
