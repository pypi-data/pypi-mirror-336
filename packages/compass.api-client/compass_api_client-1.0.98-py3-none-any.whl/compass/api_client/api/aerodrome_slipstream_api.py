# coding: utf-8

"""
    Compass API

    #### Welcome to the DeFi API from [Compass Labs](https://www.compasslabs.ai)!  Our API allows you to interact and transact in DeFi with ease.  We help you construct your transactions via a **simple REST API**.   You maintain custody at all times and **sign** all transactions **yourself**.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from compass.api_client.models.aerodrome_lp_positions_info import AerodromeLPPositionsInfo
from compass.api_client.models.aerodrome_slipstream_get_liquidity_provision_positions import AerodromeSlipstreamGetLiquidityProvisionPositions
from compass.api_client.models.aerodrome_slipstream_get_pool_price import AerodromeSlipstreamGetPoolPrice
from compass.api_client.models.aerodrome_slipstream_pool_price import AerodromeSlipstreamPoolPrice
from compass.api_client.models.base_transaction_request_aerodrome_slipstream_buy_exactly_call_data import BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData
from compass.api_client.models.base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data import BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData
from compass.api_client.models.base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data import BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData
from compass.api_client.models.base_transaction_request_aerodrome_slipstream_sell_exactly_call_data import BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData
from compass.api_client.models.base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data import BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData
from compass.api_client.models.unsigned_transaction import UnsignedTransaction

from compass.api_client.api_client import ApiClient, RequestSerialized
from compass.api_client.api_response import ApiResponse
from compass.api_client.rest import RESTResponseType


class AerodromeSlipstreamApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post(
        self,
        base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UnsignedTransaction:
        """Increase an LP position

        Increase the liquidity of an existing Liquidity Provider (LP) position.         This endpoint allows users to add more tokens to their current LP position,         enhancing their participation in liquidity provision. By increasing liquidity,         users can potentially earn more rewards and improve their position in the pool.         The process involves specifying additional token amounts and updating the pool details.         The response will confirm the successful increase of the LP position,         providing users with updated information about their enhanced position.         This functionality is vital for users aiming to optimize their liquidity provision strategy,         enabling them to adapt to market conditions and maximize their returns in decentralized finance (DeFi) markets.

        :param base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post_serialize(
            base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post_with_http_info(
        self,
        base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UnsignedTransaction]:
        """Increase an LP position

        Increase the liquidity of an existing Liquidity Provider (LP) position.         This endpoint allows users to add more tokens to their current LP position,         enhancing their participation in liquidity provision. By increasing liquidity,         users can potentially earn more rewards and improve their position in the pool.         The process involves specifying additional token amounts and updating the pool details.         The response will confirm the successful increase of the LP position,         providing users with updated information about their enhanced position.         This functionality is vital for users aiming to optimize their liquidity provision strategy,         enabling them to adapt to market conditions and maximize their returns in decentralized finance (DeFi) markets.

        :param base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post_serialize(
            base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post_without_preload_content(
        self,
        base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Increase an LP position

        Increase the liquidity of an existing Liquidity Provider (LP) position.         This endpoint allows users to add more tokens to their current LP position,         enhancing their participation in liquidity provision. By increasing liquidity,         users can potentially earn more rewards and improve their position in the pool.         The process involves specifying additional token amounts and updating the pool details.         The response will confirm the successful increase of the LP position,         providing users with updated information about their enhanced position.         This functionality is vital for users aiming to optimize their liquidity provision strategy,         enabling them to adapt to market conditions and maximize their returns in decentralized finance (DeFi) markets.

        :param base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamIncreaseLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post_serialize(
            base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post_serialize(
        self,
        base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data is not None:
            _body_params = base_transaction_request_aerodrome_slipstream_increase_liquidity_provision_call_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/liquidity_provision/increase',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post(
        self,
        base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UnsignedTransaction:
        """Open a new LP position

        Initiate a new Liquidity Provider (LP) position by minting tokens.         This endpoint allows users to open a new LP position, enabling them to participate in liquidity provision.         The minting process involves creating a new position with specified parameters,         such as token amounts and pool details. The response will confirm the successful creation of the LP position,         providing users with the necessary information to manage their newly minted position.         This functionality is crucial for users looking to expand their liquidity provision activities,         offering them the opportunity to engage in decentralized finance (DeFi) markets effectively.

        :param base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post_serialize(
            base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post_with_http_info(
        self,
        base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UnsignedTransaction]:
        """Open a new LP position

        Initiate a new Liquidity Provider (LP) position by minting tokens.         This endpoint allows users to open a new LP position, enabling them to participate in liquidity provision.         The minting process involves creating a new position with specified parameters,         such as token amounts and pool details. The response will confirm the successful creation of the LP position,         providing users with the necessary information to manage their newly minted position.         This functionality is crucial for users looking to expand their liquidity provision activities,         offering them the opportunity to engage in decentralized finance (DeFi) markets effectively.

        :param base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post_serialize(
            base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post_without_preload_content(
        self,
        base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Open a new LP position

        Initiate a new Liquidity Provider (LP) position by minting tokens.         This endpoint allows users to open a new LP position, enabling them to participate in liquidity provision.         The minting process involves creating a new position with specified parameters,         such as token amounts and pool details. The response will confirm the successful creation of the LP position,         providing users with the necessary information to manage their newly minted position.         This functionality is crucial for users looking to expand their liquidity provision activities,         offering them the opportunity to engage in decentralized finance (DeFi) markets effectively.

        :param base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamMintLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post_serialize(
            base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post_serialize(
        self,
        base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data is not None:
            _body_params = base_transaction_request_aerodrome_slipstream_mint_liquidity_provision_call_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/liquidity_provision/mint',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post(
        self,
        aerodrome_slipstream_get_liquidity_provision_positions: AerodromeSlipstreamGetLiquidityProvisionPositions,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AerodromeLPPositionsInfo:
        """Get the number of LP positions for a given sender

        Retrieve the total number of Liquidity Provider (LP) positions associated with a specific sender.         This endpoint allows users to query and obtain detailed information about their LP positions,         including the number of active positions they hold. The response model, AerodromeLPPositionsInfo,         provides a structured representation of the LP positions data, ensuring clarity and ease of use.         This functionality is essential for users managing their liquidity provision activities,         enabling them to make informed decisions based on their current positions.

        :param aerodrome_slipstream_get_liquidity_provision_positions: (required)
        :type aerodrome_slipstream_get_liquidity_provision_positions: AerodromeSlipstreamGetLiquidityProvisionPositions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post_serialize(
            aerodrome_slipstream_get_liquidity_provision_positions=aerodrome_slipstream_get_liquidity_provision_positions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AerodromeLPPositionsInfo",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post_with_http_info(
        self,
        aerodrome_slipstream_get_liquidity_provision_positions: AerodromeSlipstreamGetLiquidityProvisionPositions,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AerodromeLPPositionsInfo]:
        """Get the number of LP positions for a given sender

        Retrieve the total number of Liquidity Provider (LP) positions associated with a specific sender.         This endpoint allows users to query and obtain detailed information about their LP positions,         including the number of active positions they hold. The response model, AerodromeLPPositionsInfo,         provides a structured representation of the LP positions data, ensuring clarity and ease of use.         This functionality is essential for users managing their liquidity provision activities,         enabling them to make informed decisions based on their current positions.

        :param aerodrome_slipstream_get_liquidity_provision_positions: (required)
        :type aerodrome_slipstream_get_liquidity_provision_positions: AerodromeSlipstreamGetLiquidityProvisionPositions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post_serialize(
            aerodrome_slipstream_get_liquidity_provision_positions=aerodrome_slipstream_get_liquidity_provision_positions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AerodromeLPPositionsInfo",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post_without_preload_content(
        self,
        aerodrome_slipstream_get_liquidity_provision_positions: AerodromeSlipstreamGetLiquidityProvisionPositions,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the number of LP positions for a given sender

        Retrieve the total number of Liquidity Provider (LP) positions associated with a specific sender.         This endpoint allows users to query and obtain detailed information about their LP positions,         including the number of active positions they hold. The response model, AerodromeLPPositionsInfo,         provides a structured representation of the LP positions data, ensuring clarity and ease of use.         This functionality is essential for users managing their liquidity provision activities,         enabling them to make informed decisions based on their current positions.

        :param aerodrome_slipstream_get_liquidity_provision_positions: (required)
        :type aerodrome_slipstream_get_liquidity_provision_positions: AerodromeSlipstreamGetLiquidityProvisionPositions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post_serialize(
            aerodrome_slipstream_get_liquidity_provision_positions=aerodrome_slipstream_get_liquidity_provision_positions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AerodromeLPPositionsInfo",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post_serialize(
        self,
        aerodrome_slipstream_get_liquidity_provision_positions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if aerodrome_slipstream_get_liquidity_provision_positions is not None:
            _body_params = aerodrome_slipstream_get_liquidity_provision_positions


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/liquidity_provision/positions/get',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post(
        self,
        base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UnsignedTransaction:
        """Withdraw an LP position

        Withdraw an existing Liquidity Provider (LP) position.         This endpoint allows users to remove their tokens from an LP position,         effectively closing their participation in the liquidity pool.         The withdrawal process involves specifying the LP position to be closed,         and the response will confirm the successful removal of liquidity,         providing users with details about the withdrawn tokens and any remaining balances.         This functionality is essential for users who wish to exit their liquidity provision activities,         enabling them to reclaim their assets and potentially reallocate them to other investment opportunities.         The endpoint ensures a smooth and secure withdrawal process,         facilitating users' strategic management of their decentralized finance (DeFi) portfolios.

        :param base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post_serialize(
            base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post_with_http_info(
        self,
        base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UnsignedTransaction]:
        """Withdraw an LP position

        Withdraw an existing Liquidity Provider (LP) position.         This endpoint allows users to remove their tokens from an LP position,         effectively closing their participation in the liquidity pool.         The withdrawal process involves specifying the LP position to be closed,         and the response will confirm the successful removal of liquidity,         providing users with details about the withdrawn tokens and any remaining balances.         This functionality is essential for users who wish to exit their liquidity provision activities,         enabling them to reclaim their assets and potentially reallocate them to other investment opportunities.         The endpoint ensures a smooth and secure withdrawal process,         facilitating users' strategic management of their decentralized finance (DeFi) portfolios.

        :param base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post_serialize(
            base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post_without_preload_content(
        self,
        base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Withdraw an LP position

        Withdraw an existing Liquidity Provider (LP) position.         This endpoint allows users to remove their tokens from an LP position,         effectively closing their participation in the liquidity pool.         The withdrawal process involves specifying the LP position to be closed,         and the response will confirm the successful removal of liquidity,         providing users with details about the withdrawn tokens and any remaining balances.         This functionality is essential for users who wish to exit their liquidity provision activities,         enabling them to reclaim their assets and potentially reallocate them to other investment opportunities.         The endpoint ensures a smooth and secure withdrawal process,         facilitating users' strategic management of their decentralized finance (DeFi) portfolios.

        :param base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data: BaseTransactionRequestAerodromeSlipstreamWithdrawLiquidityProvisionCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post_serialize(
            base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data=base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post_serialize(
        self,
        base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data is not None:
            _body_params = base_transaction_request_aerodrome_slipstream_withdraw_liquidity_provision_call_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/liquidity_provision/withdraw',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def process_request_v0_aerodrome_slipstream_pool_price_get_post(
        self,
        aerodrome_slipstream_get_pool_price: AerodromeSlipstreamGetPoolPrice,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AerodromeSlipstreamPoolPrice:
        """Get the current price of a pool (how many token0 you can buy for 1 token1). This is only the instantaneous price; during any trade the price will change. Use the quote endpoint to get a more realistic idea of the ratios of the two assets you could trade.

        This endpoint retrieves the current price of a pool, indicating how many token0         you can purchase for 1 token1. Note that this is an instantaneous price and may         change during any trade. For a more accurate representation of the trade ratios         between the two assets, consider using the quote endpoint.

        :param aerodrome_slipstream_get_pool_price: (required)
        :type aerodrome_slipstream_get_pool_price: AerodromeSlipstreamGetPoolPrice
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_pool_price_get_post_serialize(
            aerodrome_slipstream_get_pool_price=aerodrome_slipstream_get_pool_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AerodromeSlipstreamPoolPrice",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_pool_price_get_post_with_http_info(
        self,
        aerodrome_slipstream_get_pool_price: AerodromeSlipstreamGetPoolPrice,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AerodromeSlipstreamPoolPrice]:
        """Get the current price of a pool (how many token0 you can buy for 1 token1). This is only the instantaneous price; during any trade the price will change. Use the quote endpoint to get a more realistic idea of the ratios of the two assets you could trade.

        This endpoint retrieves the current price of a pool, indicating how many token0         you can purchase for 1 token1. Note that this is an instantaneous price and may         change during any trade. For a more accurate representation of the trade ratios         between the two assets, consider using the quote endpoint.

        :param aerodrome_slipstream_get_pool_price: (required)
        :type aerodrome_slipstream_get_pool_price: AerodromeSlipstreamGetPoolPrice
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_pool_price_get_post_serialize(
            aerodrome_slipstream_get_pool_price=aerodrome_slipstream_get_pool_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AerodromeSlipstreamPoolPrice",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_pool_price_get_post_without_preload_content(
        self,
        aerodrome_slipstream_get_pool_price: AerodromeSlipstreamGetPoolPrice,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the current price of a pool (how many token0 you can buy for 1 token1). This is only the instantaneous price; during any trade the price will change. Use the quote endpoint to get a more realistic idea of the ratios of the two assets you could trade.

        This endpoint retrieves the current price of a pool, indicating how many token0         you can purchase for 1 token1. Note that this is an instantaneous price and may         change during any trade. For a more accurate representation of the trade ratios         between the two assets, consider using the quote endpoint.

        :param aerodrome_slipstream_get_pool_price: (required)
        :type aerodrome_slipstream_get_pool_price: AerodromeSlipstreamGetPoolPrice
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_pool_price_get_post_serialize(
            aerodrome_slipstream_get_pool_price=aerodrome_slipstream_get_pool_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AerodromeSlipstreamPoolPrice",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_pool_price_get_post_serialize(
        self,
        aerodrome_slipstream_get_pool_price,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if aerodrome_slipstream_get_pool_price is not None:
            _body_params = aerodrome_slipstream_get_pool_price


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/pool_price/get',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def process_request_v0_aerodrome_slipstream_swap_buy_exactly_post(
        self,
        base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UnsignedTransaction:
        """Trade the amount of a token it takes to end up with a specified quantity of the other token

        This endpoint facilitates the trading of tokens by allowing users to         specify the exact amount of the output token they wish to receive.         Utilizing the Aerodrome Slipstream protocol, the system calculates         the necessary amount of the input token required to achieve the         desired output. This operation is particularly useful for users who         have a specific target amount of the output token in mind and are         willing to provide the corresponding input token amount. The         transaction is executed with consideration of current market         conditions, including liquidity and price impact, ensuring that the         trade is completed efficiently and effectively.

        :param base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_swap_buy_exactly_post_serialize(
            base_transaction_request_aerodrome_slipstream_buy_exactly_call_data=base_transaction_request_aerodrome_slipstream_buy_exactly_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_swap_buy_exactly_post_with_http_info(
        self,
        base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UnsignedTransaction]:
        """Trade the amount of a token it takes to end up with a specified quantity of the other token

        This endpoint facilitates the trading of tokens by allowing users to         specify the exact amount of the output token they wish to receive.         Utilizing the Aerodrome Slipstream protocol, the system calculates         the necessary amount of the input token required to achieve the         desired output. This operation is particularly useful for users who         have a specific target amount of the output token in mind and are         willing to provide the corresponding input token amount. The         transaction is executed with consideration of current market         conditions, including liquidity and price impact, ensuring that the         trade is completed efficiently and effectively.

        :param base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_swap_buy_exactly_post_serialize(
            base_transaction_request_aerodrome_slipstream_buy_exactly_call_data=base_transaction_request_aerodrome_slipstream_buy_exactly_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_swap_buy_exactly_post_without_preload_content(
        self,
        base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Trade the amount of a token it takes to end up with a specified quantity of the other token

        This endpoint facilitates the trading of tokens by allowing users to         specify the exact amount of the output token they wish to receive.         Utilizing the Aerodrome Slipstream protocol, the system calculates         the necessary amount of the input token required to achieve the         desired output. This operation is particularly useful for users who         have a specific target amount of the output token in mind and are         willing to provide the corresponding input token amount. The         transaction is executed with consideration of current market         conditions, including liquidity and price impact, ensuring that the         trade is completed efficiently and effectively.

        :param base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_buy_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamBuyExactlyCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_swap_buy_exactly_post_serialize(
            base_transaction_request_aerodrome_slipstream_buy_exactly_call_data=base_transaction_request_aerodrome_slipstream_buy_exactly_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_swap_buy_exactly_post_serialize(
        self,
        base_transaction_request_aerodrome_slipstream_buy_exactly_call_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if base_transaction_request_aerodrome_slipstream_buy_exactly_call_data is not None:
            _body_params = base_transaction_request_aerodrome_slipstream_buy_exactly_call_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/swap/buy_exactly',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def process_request_v0_aerodrome_slipstream_swap_sell_exactly_post(
        self,
        base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UnsignedTransaction:
        """Trade a specific amount of a token into another.

        This endpoint allows users to trade a specific amount of one token         into another token using the Aerodrome Slipstream protocol. The         transaction is executed by specifying the exact amount of the input         token to be sold, and the system calculates the amount of the output         token that will be received. The operation ensures that the trade is         conducted within the constraints of the current market conditions,         taking into account the liquidity and price impact. This endpoint is         suitable for users who want to sell a precise quantity of a token         and are willing to accept the resulting amount of the other token.

        :param base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_swap_sell_exactly_post_serialize(
            base_transaction_request_aerodrome_slipstream_sell_exactly_call_data=base_transaction_request_aerodrome_slipstream_sell_exactly_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def process_request_v0_aerodrome_slipstream_swap_sell_exactly_post_with_http_info(
        self,
        base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UnsignedTransaction]:
        """Trade a specific amount of a token into another.

        This endpoint allows users to trade a specific amount of one token         into another token using the Aerodrome Slipstream protocol. The         transaction is executed by specifying the exact amount of the input         token to be sold, and the system calculates the amount of the output         token that will be received. The operation ensures that the trade is         conducted within the constraints of the current market conditions,         taking into account the liquidity and price impact. This endpoint is         suitable for users who want to sell a precise quantity of a token         and are willing to accept the resulting amount of the other token.

        :param base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_swap_sell_exactly_post_serialize(
            base_transaction_request_aerodrome_slipstream_sell_exactly_call_data=base_transaction_request_aerodrome_slipstream_sell_exactly_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def process_request_v0_aerodrome_slipstream_swap_sell_exactly_post_without_preload_content(
        self,
        base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Trade a specific amount of a token into another.

        This endpoint allows users to trade a specific amount of one token         into another token using the Aerodrome Slipstream protocol. The         transaction is executed by specifying the exact amount of the input         token to be sold, and the system calculates the amount of the output         token that will be received. The operation ensures that the trade is         conducted within the constraints of the current market conditions,         taking into account the liquidity and price impact. This endpoint is         suitable for users who want to sell a precise quantity of a token         and are willing to accept the resulting amount of the other token.

        :param base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: (required)
        :type base_transaction_request_aerodrome_slipstream_sell_exactly_call_data: BaseTransactionRequestAerodromeSlipstreamSellExactlyCallData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._process_request_v0_aerodrome_slipstream_swap_sell_exactly_post_serialize(
            base_transaction_request_aerodrome_slipstream_sell_exactly_call_data=base_transaction_request_aerodrome_slipstream_sell_exactly_call_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UnsignedTransaction",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _process_request_v0_aerodrome_slipstream_swap_sell_exactly_post_serialize(
        self,
        base_transaction_request_aerodrome_slipstream_sell_exactly_call_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if base_transaction_request_aerodrome_slipstream_sell_exactly_call_data is not None:
            _body_params = base_transaction_request_aerodrome_slipstream_sell_exactly_call_data


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0/aerodrome_slipstream/swap/sell_exactly',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


