"""
Created on March, 2019

@author: Claudio Munoz Crego (ESAC)

This Module allows to report soa_report summary subsections
"""

import logging
import numpy as np


def report_summary_table(dfs, proc_report):
    """
    Create a summary report including for all sub-periods:
    - Generated data Volume (total)
    - Total Downlink Data Volume capability
    - Actual Total Downlink Data Volume to ground
    - data in the SSMM at the beginning of scenario
    - Remaining data in the SSMM at the end of scenario

    Notes:
    - The sum of all (sub-periods) in included in a an additional (last) column if the number of sub-periods > 1.
    - The table is transposed (rows <-> lines) if number of sub-periods > 3 for user readability.

    :param dfs: diccionary including a subset of dataframes; keys are labels <start>_<end>
    :param proc_report:
    :param scenario: name of scenario (directory structure generated by juice_ref_kernel_for_testing timeline)
    :return:
    """

    title = 'Generated DV, downlink, and SSM status in Gbits'
    logging.debug(title)
    text = ''

    periods = [s.replace('_', ' ') for s in sorted(dfs.keys())]
    periods = [s.replace('T', ' ') for s in periods]
    sub_phases_header = ['Metric'] + periods + ['Total']
    metrics = [sub_phases_header]
    values = [round(sum(dfs[k].get_total_accum_data_volume().values()), 2) for k in sorted(dfs.keys())]
    metrics.append(['Generated data Volume (total)'] + values + [sum(values)])
    values = [round(dfs[k].get_total_downlink(), 2) for k in sorted(dfs.keys())]
    metrics.append(['Total Downlink Data Volume capability'] + values + [sum(values)])
    values = [round(dfs[k].get_total_ssmm_accum(), 2) for k in sorted(dfs.keys())]
    metrics.append(['Actual Total Downlink Data Volume to ground'] + values + [sum(values)])
    values = [round(dfs[k].get_ssmm_initial_value(), 2) for k in sorted(dfs.keys())]
    metrics.append(['data in the SSMM at the beginning of scenario'] + values + [values[0]])
    values = [round(dfs[k].get_ssmm_last_value(), 2) for k in sorted(dfs.keys())]
    metrics.append(['Remaining data in the SSMM at the end of scenario'] + values + [values[-1]])

    if len(dfs) <= 1:
        metrics = [row[:-1] for row in metrics]

    if len(dfs.keys()) > 3:
        metrics = np.array(metrics).T.tolist()
    proc_report.print_summary_sub_subsection(title, objective_summary=text, metrics=metrics, figure=[])


def report_summary_table_generated_dv_per_inst(dfs, proc_report):
    """
    Report data volume generated per instrument.

    Notes:
    - The sum of all (sub-periods) in included in a an additional (last) column if the number of sub-periods > 1.
    - The table is transposed (rows <-> lines) if number of sub-periods > 3 for user readability.

    :param dfs: diccionary including a subset of dataframes; keys are labels <start>_<end>
    :param proc_report:
    :param scenario: name of scenario (directory structure generated by juice_ref_kernel_for_testing timeline)
    :return:
    """

    title = 'Generated DV per experiment in Gbits'
    logging.debug(title)
    text = ''

    df_key = list(dfs.keys())[0]
    list_of_experiments = sorted(dfs[df_key].get_total_accum_data_volume().keys())

    periods = [s.replace('_', ' ') for s in sorted(dfs.keys())]
    periods = [s.replace('T', ' ') for s in periods]
    metrics = [['Metric'] + periods + ['Total']]

    for inst in list_of_experiments:
        values = [round(dfs[k].get_total_accum_data_volume()[inst], 2) for k in sorted(dfs.keys())]
        metrics.append([inst] + values + [sum(values)])

    if len(dfs) <= 1:
        metrics = [row[:-1] for row in metrics]

    if len(dfs.keys()) > 3:
        metrics = np.array(metrics).T.tolist()
    proc_report.print_summary_sub_subsection(title, objective_summary=text, metrics=metrics, figure=[])
