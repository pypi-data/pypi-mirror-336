"""{{ description }}

Generated by DCC-MCP-Core action template generator.
"""

# Import built-in modules
from typing import Any, Dict, List, Optional, Union

# Import DCC-MCP-Core modules
from dcc_mcp_core.models import ActionResultModel

# -------------------------------------------------------------------
# Plugin Metadata - Basic information about this action
# -------------------------------------------------------------------
__action_name__ = "{{ action_name }}"
__action_version__ = "0.1.0"
__action_description__ = "{{ description }}"
__action_author__ = "{{ author }}"
__action_requires__ = ["{{ dcc_name }}"]  # Specify the DCC environment this action depends on

# -------------------------------------------------------------------
# Action Function Implementation
# -------------------------------------------------------------------

{% for func in functions %}
def {{ func.name }}({% for param in func.parameters %}{{ param.name }}: {{ param.type }}{% if param.default is not none %}{% if param.default is string %} = '{{ param.default }}'{% else %} = {{ param.default }}{% endif %}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}{% if func.parameters %}, {% endif %}**context) -> ActionResultModel:
    """{{ func.description }}

    {% if func.parameters %}
    Args:
        {% for param in func.parameters %}
        {{ param.name }}: {{ param.description }}
        {% endfor %}
        context: Additional context information
    {% else %}
    Args:
        context: Context information for the action
    {% endif %}

    Returns:
        {{ func.return_description or 'ActionResultModel containing operation result' }}
    """
    # Get DCC client from context
    {{ dcc_name }}_client = context.get("{{ dcc_name }}_client")
    if not {{ dcc_name }}_client:
        return ActionResultModel(
            success=False,
            message="{{ dcc_name|capitalize }} client not found in context",
            error="{{ dcc_name|capitalize }} client not available"
        )

    try:
        # TODO: Implement your function logic here
        # Example implementation:
        return ActionResultModel(
            success=True,
            message="{{ func.name }} executed successfully",
            prompt="What would you like to do next?",
            context={"result": None}
        )
    except Exception as e:
        # Handle exceptions and return structured error
        return ActionResultModel(
            success=False,
            message=f"Error in {{ func.name }}: {str(e)}",
            error=str(e),
            context={"error_details": {"exception_type": type(e).__name__}}
        )

{% endfor %}
