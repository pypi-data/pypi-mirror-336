import os
from typing import Optional


def github_token() -> Optional[str]:
    """Get GitHub token"""
    return os.environ.get("GITHUB_TOKEN")


def openai_api_key() -> Optional[str]:
    """Get OpenAI API key"""
    return os.environ.get("OPENAI_API_KEY")


def openai_host() -> Optional[str]:
    """Get OpenAI API host"""
    return os.environ.get("OPENAI_API_HOST")


# Constant definitions
SIGN_OFF = "\n\n---\n\n*Generated by Requirement Test Alignment*"

# Model information
MODEL_INFO = [
    {"model": "gpt-4", "maxPromptLength": 24000},
    {"model": "gpt-4-32k", "maxPromptLength": 96000},
    {"model": "gpt-4-turbo", "maxPromptLength": 128000},
    {"model": "gpt-4o", "maxPromptLength": 128000},
    {"model": "gpt-4o-mini", "maxPromptLength": 128000},
    {"model": "gpt-3.5-turbo", "maxPromptLength": 16000},
    {"model": "gpt-3.5-turbo-16k", "maxPromptLength": 48000},
    {"model": "deepseek-r1", "maxPromptLength": 64000},
    {"model": "deepseek-v3", "maxPromptLength": 64000},
]

# Language mapping
LANGUAGE_MAP = {
    ".js": "JavaScript",
    ".jsx": "JavaScript (React)",
    ".ts": "TypeScript",
    ".tsx": "TypeScript (React)",
    ".py": "Python",
    ".java": "Java",
    ".c": "C",
    ".cpp": "C++",
    ".cs": "C#",
    ".go": "Go",
    ".rb": "Ruby",
    ".php": "PHP",
    ".swift": "Swift",
    ".kt": "Kotlin",
    ".rs": "Rust",
    ".html": "HTML",
    ".css": "CSS",
    ".sh": "Shell",
    ".sql": "SQL",
    ".vue": "Vue",
    ".tf": "Terraform",
}

# Supported file types
SUPPORTED_FILES = list(LANGUAGE_MAP.keys())

# Excluded keywords
EXCLUDED_KEYWORDS = [
    "node_modules",
    "dist",
    "build",
    "vendor",
    "package-lock.json",
    "yarn.lock",
]

# Maximum surrounding lines
MAX_SURROUNDING_LINES = 5

# Instruction prompt template
INSTRUCTION_PROMPT = """
You are a code review assistant. Please review the following code and provide feedback.

Please provide feedback in the following format:
1. Comment on each file, pointing out potential issues, improvement suggestions, and best practices.
2. Assign a risk score (1-5) to each file, where 1 indicates low risk and 5 indicates high risk.
3. Respond in {ReviewLanguage} language.

The code is in {program_language} language.

Please return your feedback in JSON format as follows:
[
  {
    "fileName": "file name",
    "riskScore": risk score,
    "review": [
      {
        "reasoning": "your comment"
      }
    ]
  }
]

Here is the code to be reviewed:
"""

REQUIREMENT_GENERATION_PROMPT = """
You are a development expert who is proficient in software testing and requirements engineering.
Please use the code provided below to deduce what the requirement is for these code changes.

Please provide feedback based on the following requirements:
1. Respond in {ReviewLanguage} language.
2. The code is in {program_language} language.
3. Use only one requirement per response.

Please return your feedback in JSON format as follows:
{
  "requirement": "your requirement"
}

Here is the code to be reviewed:
"""

# Prompt template constants
TEST_CASE_GENERATION_PROMPT_PREFIX = """
You are a senior software development expert skilled in software testing and requirements engineering.

## TASK:
You will receive:
- New requirement
- Updated function code
- Existing test cases

Your job is to:
- Check if current test cases align with the new requirement
- Modify outdated test cases if needed
- Add new test cases only if necessary

## RULES (Strictly Follow):
0. Not only the logic but also the logic of the test case should be aligned with the new requirement and function code. If not, the test case is considered outdated or irrelevant.

1. **Modify existing outdated test cases** to cover the new requirement whenever possible. **Add new test cases ONLY when the requirement cannot be covered by modifying existing ones.**

2. **Ensure correctness of every new test case.** If the logic is incorrect, regenerate it. Incorrect test cases will cause millions of dollars in loss.

3. **Return your answer ONLY in pure JSON format** as shown below. **Do not output any explanations or text.**

4. **Ignore test cases marked 'irrelevant'. Do not return them in the JSON.**

5. **Maximum 5 new test cases per test file.** New test cases must have unique names and logic, different from all existing ones.

6. The JSON output must follow this structure:
```json
[
  {
    "file": "name of the test file (provided in the input)",
    "testcases": [
      {
        "start_line": "start line number of the test case in the test file",
        "line": "end line number of the test case in the test file",
        "previous": "original test case code",
        "status": "aligned / outdated",
        "added": "1 (new test case) / 0 (existing test case)",
        "testcase": "updated or new test case code (empty if unchanged)",
        "reason": "reason for the status"
      }
    ]
  }
]
```

## WORKFLOW:
1. Check each test case and assign one status:
   - **"aligned"**: Test case meets the new requirement. Keep it unchanged.
   - **"outdated"**: Test case does not meet the new requirement. Update it if necessary.
   - **"irrelevant"**: Not related to the new requirement. Skip and do not return it.

2. If **aligned**:
   - `testcase` is empty
   - `added` is `0`

3. If **outdated**:
   - First, check if other existing test cases (excluding your new ones) already cover the new requirement.
   - If yes → skip updating, set `testcase` empty, `added` = `0`
   - If no → update the test case (name, logic, or both). You can remove or change the original test case.

4. If needed, generate new test cases:
   - New test case must be unique (name and logic)
   - Mark `status`: "aligned"
   - `added`: "1"
   - `start_line`, `line`, `previous`: empty
   - Maximum 5 new test cases per test file

5. **Return only valid JSON. No extra text.**

## INPUT INFORMATION:
You will be provided with:
- Original function code
- Updated function code
- Original test cases
- New requirement description

**Focus only on function changes and the modified test file.**

"""

TEST_CASE_GENERATION_PROMPT = "// New Requirement: {requirement} \n // Current Function code: {function_code} \n // Current Testcases: {testcase} \n"

JUDGE_ALIGNMENT_PROMPT = """
You are a development expert who is proficient in software testing(ST) and requirements engineering(RE).
Please review the test cases and determine if they align with the new requirement and function code.

Here are some detailed definitions of alignment:
1. Alignment = “adjustment of RE and ST efforts for  coordinated functioning & optimized product  development”
2. Alignment-as-activity = “act of adjusting/arranging efforts  involved in RE & ST so they work better together”
3. Alignment-as-state = “condition of RE & ST efforts  having established a coordinated functioning”
4. Not only the logic but also the logic of the test case should be aligned with the new requirement and function code. If not, the test case is considered unaligned.

Please only return the aligned ones and return your feedback in JSON format as follows:
[
  {
    "file": "name of the test file. It's provided in the following information.",
    "testcases": [
      {
        "test_name": "name of the test case",
        "line": "line number of the test case",
        "code": "the test case function code",
        "reason": "your reason for the status of the test case"
      }
    ]
  }
]

The new requirement is: {requirement}
The current function code is: {function_code}
The current test cases are: {testcase}
"""

ALIGNED_TEST_CASE_GENERATION_PROMPT = """
You are a software testing and requirements engineering expert.

## TASK:  
You are given:  
- New requirement  
- Updated function code  
- **Unaligned** test cases  
- **Aligned** test cases (reference only, do not modify)

Your job is to review the unaligned test cases and:
- Determine if they are **'irrelevant'** to the new requirement, in which case the cases are sill valid but not aligned with the new requirement
- If not, **modify them** to align with the new requirement
- Generate **new test cases** if necessary

## STRICT RULES:
1. **Return ONLY pure JSON** in this format, no extra text or explanation:
```json
[
  {
    "file": "test file name (provided in the input)",
    "testcases": [
      {
        "start_line": "test case start line number",
        "line": "test case end line number",
        "previous": "original test case code",
        "status": "irrelevant / aligned(only if the test case is updated or newly generated) / outdated",
        "added": "1 (new) / 0 (not new)",
        "testcase": "updated or new test case code (empty if removed or unchanged)",
        "reason": "reason for the status"
      }
    ]
  }
]
```

2. **Do not return any 'irrelevant' test cases** in the output.

3. **Process each unaligned test case**:
   - If unrelated to the new requirement → mark as **'irrelevant'**, skip.
   - If related but wrong or outdated → mark as **'outdated'** and handle below.

4. **Handle 'outdated' test cases**:
   - If the test case is no longer needed (logic is removed by the new requirement):
     - Remove the test case
     - Set `"testcase": ""` and `"added": 0`
   - Else, update the test case (name, logic, or both) to align with the new requirement
   - After updating, check duplication:
     - If fully duplicate of any aligned test case → remove (set `"testcase": ""` and `"added": 0`)

5. **Generate new test cases if needed**:
   - Only if additional coverage is required
   - New test cases must be unique in both name and logic
   - `"status": "aligned"`
   - `"added": 1`
   - `"start_line"`, `"line"`, `"previous"` must be empty
   - Maximum 5 new test cases per test file

## INPUT:
- New Requirement: {requirement}
- Updated Function Code: {function_code}
- Current Unaligned Test Cases: {testcase}
- Aligned Test Cases (Reference Only): {aligned_testcases}

## REMINDER:
- Focus on function changes and test file
- JSON only, no explanations
- Follow rules strictly to avoid client loss
- Test cases in the same file should be grouped together
"""
