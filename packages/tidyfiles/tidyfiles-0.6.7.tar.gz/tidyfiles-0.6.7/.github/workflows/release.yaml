# Name of the workflow that appears in GitHub Actions UI
name: release

# Define when this workflow should run
on:
  push:
    branches:
      - main  # Run on pushes to main branch
    tags:     # Run on specific tag patterns
      - "[0-9]+.[0-9]+.[0-9]+"        # e.g., 1.2.3
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+" # e.g., 1.2.3a1 (alpha)
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+" # e.g., 1.2.3b1 (beta)
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+" # e.g., 1.2.3rc1 (release candidate)

# Environment variables available to all jobs
env:
  PACKAGE_NAME: "TidyFiles"
  OWNER: "RYZHAIEV-SERHII"

# List of jobs to run
jobs:
  # Job for semantic versioning and initial release preparation
  semantic_release:
    runs-on: ubuntu-latest
    # Only run this job when pushing to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Define outputs that can be used by other jobs
    outputs:
      version: ${{ steps.release.outputs.version }}
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      # Checkout code with full git history for semantic-release to analyze
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full git history
          token: ${{ secrets.GITHUB_TOKEN }}  # Token for authentication

      # Setup Python according to pyproject.toml version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      # Install uv package manager for faster dependency management
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # Install semantic-release for version management
      - name: Install semantic-release
        run: pip install python-semantic-release

      # Determine the next version number without making any changes
      - name: Get next version
        id: get_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(semantic-release version --print)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $VERSION"

      # Perform the actual version bump and release
      - name: Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version  # Creates version bump commit and tag
          semantic-release publish  # Publishes the release to GitHub

  # Job to extract and validate version details
  details:
    needs: semantic_release
    # Run if either a tag was pushed or semantic-release created a new version
    if: |
      (github.event_name == 'push' && github.ref_type == 'tag') ||
      (needs.semantic_release.outputs.released == 'true')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      # Extract version information from tag or semantic-release output
      - name: Extract tag and Details
        id: release
        run: |
          # Get tag name either from pushed tag or semantic-release
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
          else
            TAG_NAME=${{ needs.semantic_release.outputs.version }}
          fi
          # Parse version and suffix (if any)
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          # Set outputs for other jobs
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

  # Job to verify the new version against PyPI
  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      # Get the latest version from PyPI
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      # Ensure new version is greater than the PyPI version
      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          fi

  # Job to prepare and build the package
  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      # Install uv for dependency management
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # Install only core dependencies needed for building the package
      - name: Install dependencies
        run: uv sync

      # Build package distributions
      - name: Build package
        run: uv build

      # Save built distributions as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Job to publish the package to PyPI
  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      # Download built distributions
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      # Publish to PyPI using trusted publishing
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Job to create GitHub release with assets
  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download built distributions
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      # Create GitHub release and upload assets
      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
