name: Publish Development Version to PyPI
# This workflow is used to publish a development version to PyPI (once feature PRs are merged into main)

on:
  push:
    branches:
      - main
    paths:
      - 'midiogre/**'
      - '.github/workflows'
      - 'setup.py'
      - 'pyproject.toml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: dev-release
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Important for setuptools_scm to get git history
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine pytest pytest-cov setuptools-scm
        pip install -r requirements.txt
        pip install .
    
    - name: Run tests
      run: |
        pytest tests/ --cov=midiogre --cov-report=term-missing
    
    - name: Build package
      run: python -m build
    
    - name: Check package and verify dev version
      id: check_version
      run: |
        twine check dist/*
        # Verify this is a dev version
        WHEEL_FILE=$(ls dist/*.whl | head -n 1)
        if [[ $WHEEL_FILE == *post0* ]]; then
          echo "Warning: Not a development version. Skipping upload."
          echo "skip_upload=true" >> $GITHUB_OUTPUT
        else
          echo "Verified development version build"
          echo "skip_upload=false" >> $GITHUB_OUTPUT
        fi
        # Print the version
        python -c "from setuptools_scm import get_version; print(f'Development version: {get_version()}')"
    
    - name: Publish dev package to PyPI
      if: steps.check_version.outputs.skip_upload != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true 