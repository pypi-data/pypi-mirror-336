from ..bclr_one import BayesCCimport pytestimport numpy as npX = np.load("bclr_one.npy")prior_meanBAD1 = [0]prior_meanBAD2 = [[3,4], [1,2]]prior_covBAD1 = np.array([[3, 1], [2,2]])prior_covBAD2 = np.array([[1, 1], [1,0.999]])prior_covBAD3 = np.array([[1,0,0], [0,1,0], [0,0,1]])prior_covBAD4 = np.array([[1,0], [1,0], [0,1]])prior_mean = [0,0]prior_cov = np.array([[1,0], [0,1]])@pytest.mark.parametrize('prior_meanBAD', [prior_meanBAD1, prior_meanBAD2])def test_bad_mean(prior_meanBAD):    with pytest.raises(ValueError) as e_bad_mean:        BayesCC(X, prior_mean = prior_meanBAD, prior_cov = prior_cov, n_iter=1000)        assert e_bad_mean.type is ValueError@pytest.mark.parametrize('prior_covBAD', [prior_covBAD1, prior_covBAD2, prior_covBAD3, prior_covBAD4])def test_bad_cov(prior_covBAD):    with pytest.raises(ValueError) as e_bad_cov:        BayesCC(X, prior_mean = prior_mean, prior_cov = prior_covBAD, n_iter=1000)        assert e_bad_cov.type is ValueErrorbclr_good = BayesCC(X, prior_mean = prior_mean, prior_cov = prior_cov, n_iter=1000)bclr_good.fit()Xb = np.random.randn(100, 10, 3)Xn = np.random.randn(100, 2)@pytest.mark.parametrize("index", [1,2,3,4,5,6])def test_init(index):    if index==1:        with pytest.raises(ValueError):            BayesCC(Xb, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=1000)                elif index==2:        with pytest.raises(ValueError):            BayesCC(Xn, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=-15)                elif index==3:        with pytest.raises(ValueError):            BayesCC(Xn, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=1000, burn_in=-15)            elif index==4:        with pytest.raises(ValueError):            BayesCC(Xn, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=1000, burn_in=2000)        elif index==5:        kappa_vals = np.repeat(1, 99)        kappa_vals[34] = -2        with pytest.raises(ValueError):            BayesCC(Xn, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=1000, prior_kappa = kappa_vals)            elif index==6:        with pytest.raises(IndexError):            BayesCC(Xn, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=1000, prior_kappa = np.array([2,3,4]))def test_scale():    bclr_scale = BayesCC(Xn, prior_mean=prior_mean, prior_cov=prior_cov, n_iter=1000, scaled=True)    assert np.all(bclr_scale.X == Xn)def test_cp():    bclr_good.transform()    assert int(bclr_good.post_k_mode) == 200    def test_plot():    bclr_good.plot_k()