[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mujoco-toolbox"
version = "0.2.2"
description = "A modern package to handle MuJoCo environments"
readme = "README.md"
license = "MIT"
packages = [{ include = "mujoco_toolbox" }]
authors = ["MGross21 <MGross21@TODO.com>"]
keywords = ["MuJoCo", "robotics", "simulation", "toolbox", "wrapper"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries"
]

[tool.poetry.urls]
homepage = "https://github.com/MGross21/mujoco-toolbox"
repository = "https://github.com/MGross21/mujoco-toolbox"
documentation = "https://github.com/MGross21/mujoco-toolbox"
"Bug Tracker" = "https://github.com/MGross21/mujoco-toolbox/issues"

[tool.poetry.dependencies]
python = ">=3.10"
mujoco = "*"
numpy = "*"
scipy = "*"
matplotlib = "*"
pyyaml = "*"
mediapy = "*"
tqdm = "*"
ipywidgets = "*"
ffmpeg = "*"
trimesh = "*"
screeninfo = "*"
colorama = "*"

[tool.poetry.group.dev.dependencies]
pytest = "*"
ruff = "^0.9.9"
mypy = "^1.15.0"
pytypes = "^1.0b10"
black = "^25.1.0"
isort = "^6.0.1"
flake8 = "^7.1.2"
bandit = "^1.8.3"
pylint = "^3.3.4"

[tool.semantic_release]
version_variables = [
    "mujoco_toolbox/__init__.py:__version__",
    "pyproject.toml:tool.poetry.version",
    "CITATION.cff:version"
]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "pip install poetry && poetry build"
dist_path = "dist/"
create_pr = true
pr_branch_prefix = "release/"
upload_to_pypi = true
upload_to_release = true
commit_version_number = true
major_on_zero = false
tag_format = "v{version}"
commit_message = "chore(release): {version} [skip ci]"
commit_author = "semantic-release <semantic-release@example.com>"

[tool.semantic_release.plugins]
commit_analyzer = "@semantic-release/commit-analyzer"
release_notes_generator = "@semantic-release/release-notes-generator"

[tool.semantic_release.commit_analyzer]
preset = "angular"
release_rules = [
    { type = "feat", release = "minor" },
    { type = "fix", release = "patch" },
    { type = "perf", release = "patch" },
    { type = "refactor", release = "patch" },
    { type = "docs", release = false },
    { type = "style", release = false },
    { type = "chore", release = false },
    { type = "build", release = false },
    { type = "ci", release = false },
    { type = "test", release = false }
]
parser_opts = {allowed_tags = [
        "build",
        "chore",
        "ci",
        "docs",
        "feat",
        "fix",
        "perf",
        "style",
        "refactor",
        "test"]}

[tool.semantic_release.release_notes_generator]
preset = "angular"
preset_config = {types = [
        { type = "feat", section = "Features", hidden = false },
        { type = "fix", section = "Bug Fixes", hidden = false },
        { type = "perf", section = "Performance Improvements", hidden = false },
        { type = "refactor", section = "Refactors", hidden = false }
    ]}

[tool.ruff]
line-length = 120

[tool.ruff.lint]
# select = ["E", "F", "W", "C90"]  # Select error, warning, and flake8 rules
select = ["ALL"]    # Enable all rules
ignore = ["T20"]    # Rules to Ignore
fixable = ["ALL"]   # Enable auto-fixing for all fixable issues
extend-select = ["I", "B", "Q", "S"]

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
strict_optional = true