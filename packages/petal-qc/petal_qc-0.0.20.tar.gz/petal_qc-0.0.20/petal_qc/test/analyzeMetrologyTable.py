#!/usr/bin/env python3
"""Analyze the table generated by createMetrologyTable."""

import sys
from pathlib import Path
import math
import argparse
import pandas as pd
import numpy as np
from numpy.linalg import norm
import matplotlib.pyplot as plt
from lmfit.models import LinearModel

from petal_qc.utils.fit_utils import draw_best_fit

def distance(P1, P2, P3):
    C = np.cross(P2-P1, P3-P1)
    D = C/norm(P2-P1)
    return D

def remove_outliers_indx(data, cut=2.0, debug=False):
    """Remove points far away form the rest.

    Args:
    ----
        data : The data
        cut: max allowed distance
        debug: be verbose if True.

    Returns
    -------
        index of valid pints in data array.

    """
    d = np.abs(data - np.median(data))
    mdev = np.median(d)
    s = d / (mdev if mdev else 1.)
    indx = np.where(s < cut)[0]
    return indx


def main(options):
    """main entry."""
    fig_width = 12.0
    fig_height = 1.2*fig_width/3.0

    T = pd.read_csv(options.files[0])

    if options.mould > 0:
        x = 1000*T.loc[T['mould'] == options.mould, 'fd_dx'].values
        y = 1000*T.loc[T['mould'] == options.mould, 'fd_dy'].values

    else:
        x = 1000*T['fd_dx'].values
        y = 1000*T['fd_dy'].values

    fig, ax = plt.subplots(nrows=1, ncols=3, tight_layout=True, figsize=(fig_width, fig_height))
    fig.suptitle("Relative Position FD01-FD02")
    ax[0].set_title("FD01-FD02")
    ax[0].set_aspect('equal', adjustable='box')
    ax[0].set_xlim(-150, 150)
    ax[0].set_ylim(-150, 150)
    circle = plt.Circle((0,0), 75, color="red", alpha=0.25)
    ax[0].add_patch(circle)
    circle = plt.Circle((0,0), 25, color="green", alpha=0.25)
    ax[0].add_patch(circle)

    ax[0].set_xlabel("X (µm)")
    ax[0].set_ylabel("Y (µm)")
    ax[0].grid()

    ax[0].scatter(x, y, marker='.')

    model = LinearModel()
    params = model.guess(y, x=x)
    result = model.fit(y, params, x=x)


    P1 = np.array([0, result.eval(x=0)])
    P2 = np.array([1, result.eval(x=1)])
    values = []
    for v, w in zip(x, y):
        P3 = np.array([v, w])
        values.append(distance(P1, P2, P3))

    indx = remove_outliers_indx(values)

    xx = x[indx]
    yy = y[indx]
    params = model.guess(yy, xx)
    result = model.fit(yy, params, x=xx)
    result.plot_fit(ax=ax[0])
    print("slope {:.5f}, intercept {:.5f}".format(result.best_values['slope'], result.best_values["intercept"]))
    angle = 180*math.atan( result.best_values['slope'])/math.pi
    print("angle {:.5f} deg.".format(angle))

    ax[1].set_xlim(-150, 150)
    ax[1].set_xlabel("X (µm)")
    ax[1].grid()
    ax[1].hist(x)

    ax[2].set_xlim(-150, 150)
    ax[2].set_xlabel("Y (µm)")
    ax[2].grid()
    ax[2].hist(y)

    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='*', help="Input files")
    parser.add_argument('--mould', default=-1, type=int, help="mould index")

    opts = parser.parse_args()
    if len(opts.files) == 0:
        print("I need at least one input file")
        sys.exit()

    main(opts)