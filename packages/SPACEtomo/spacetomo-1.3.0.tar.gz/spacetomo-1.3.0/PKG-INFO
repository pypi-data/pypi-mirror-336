Metadata-Version: 2.4
Name: SPACEtomo
Version: 1.3.0
Summary: Smart Parallel Automated Cryo Electron tomography (SPACEtomo) is a package that - together with SerialEM - completely automates the cryoET data acquisition workflow.
Home-page: https://github.com/eisfabian/SPACEtomo
Maintainer: Fabian Eisenstein
Maintainer-email: Fabian Eisenstein <spacetomo.help@gmail.com>
License:                     GNU GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
         Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
                                    Preamble
        
          The GNU General Public License is a free, copyleft license for
        software and other kinds of works.
        
          The licenses for most software and other practical works are designed
        to take away your freedom to share and change the works.  By contrast,
        the GNU General Public License is intended to guarantee your freedom to
        share and change all versions of a program--to make sure it remains free
        software for all its users.  We, the Free Software Foundation, use the
        GNU General Public License for most of our software; it applies also to
        any other work released this way by its authors.  You can apply it to
        your programs, too.
        
          When we speak of free software, we are referring to freedom, not
        price.  Our General Public Licenses are designed to make sure that you
        have the freedom to distribute copies of free software (and charge for
        them if you wish), that you receive source code or can get it if you
        want it, that you can change the software or use pieces of it in new
        free programs, and that you know you can do these things.
        
          To protect your rights, we need to prevent others from denying you
        these rights or asking you to surrender the rights.  Therefore, you have
        certain responsibilities if you distribute copies of the software, or if
        you modify it: responsibilities to respect the freedom of others.
        
          For example, if you distribute copies of such a program, whether
        gratis or for a fee, you must pass on to the recipients the same
        freedoms that you received.  You must make sure that they, too, receive
        or can get the source code.  And you must show them these terms so they
        know their rights.
        
          Developers that use the GNU GPL protect your rights with two steps:
        (1) assert copyright on the software, and (2) offer you this License
        giving you legal permission to copy, distribute and/or modify it.
        
          For the developers' and authors' protection, the GPL clearly explains
        that there is no warranty for this free software.  For both users' and
        authors' sake, the GPL requires that modified versions be marked as
        changed, so that their problems will not be attributed erroneously to
        authors of previous versions.
        
          Some devices are designed to deny users access to install or run
        modified versions of the software inside them, although the manufacturer
        can do so.  This is fundamentally incompatible with the aim of
        protecting users' freedom to change the software.  The systematic
        pattern of such abuse occurs in the area of products for individuals to
        use, which is precisely where it is most unacceptable.  Therefore, we
        have designed this version of the GPL to prohibit the practice for those
        products.  If such problems arise substantially in other domains, we
        stand ready to extend this provision to those domains in future versions
        of the GPL, as needed to protect the freedom of users.
        
          Finally, every program is threatened constantly by software patents.
        States should not allow patents to restrict development and use of
        software on general-purpose computers, but in those that do, we wish to
        avoid the special danger that patents applied to a free program could
        make it effectively proprietary.  To prevent this, the GPL assures that
        patents cannot be used to render the program non-free.
        
          The precise terms and conditions for copying, distribution and
        modification follow.
        
                               TERMS AND CONDITIONS
        
          0. Definitions.
        
          "This License" refers to version 3 of the GNU General Public License.
        
          "Copyright" also means copyright-like laws that apply to other kinds of
        works, such as semiconductor masks.
        
          "The Program" refers to any copyrightable work licensed under this
        License.  Each licensee is addressed as "you".  "Licensees" and
        "recipients" may be individuals or organizations.
        
          To "modify" a work means to copy from or adapt all or part of the work
        in a fashion requiring copyright permission, other than the making of an
        exact copy.  The resulting work is called a "modified version" of the
        earlier work or a work "based on" the earlier work.
        
          A "covered work" means either the unmodified Program or a work based
        on the Program.
        
          To "propagate" a work means to do anything with it that, without
        permission, would make you directly or secondarily liable for
        infringement under applicable copyright law, except executing it on a
        computer or modifying a private copy.  Propagation includes copying,
        distribution (with or without modification), making available to the
        public, and in some countries other activities as well.
        
          To "convey" a work means any kind of propagation that enables other
        parties to make or receive copies.  Mere interaction with a user through
        a computer network, with no transfer of a copy, is not conveying.
        
          An interactive user interface displays "Appropriate Legal Notices"
        to the extent that it includes a convenient and prominently visible
        feature that (1) displays an appropriate copyright notice, and (2)
        tells the user that there is no warranty for the work (except to the
        extent that warranties are provided), that licensees may convey the
        work under this License, and how to view a copy of this License.  If
        the interface presents a list of user commands or options, such as a
        menu, a prominent item in the list meets this criterion.
        
          1. Source Code.
        
          The "source code" for a work means the preferred form of the work
        for making modifications to it.  "Object code" means any non-source
        form of a work.
        
          A "Standard Interface" means an interface that either is an official
        standard defined by a recognized standards body, or, in the case of
        interfaces specified for a particular programming language, one that
        is widely used among developers working in that language.
        
          The "System Libraries" of an executable work include anything, other
        than the work as a whole, that (a) is included in the normal form of
        packaging a Major Component, but which is not part of that Major
        Component, and (b) serves only to enable use of the work with that
        Major Component, or to implement a Standard Interface for which an
        implementation is available to the public in source code form.  A
        "Major Component", in this context, means a major essential component
        (kernel, window system, and so on) of the specific operating system
        (if any) on which the executable work runs, or a compiler used to
        produce the work, or an object code interpreter used to run it.
        
          The "Corresponding Source" for a work in object code form means all
        the source code needed to generate, install, and (for an executable
        work) run the object code and to modify the work, including scripts to
        control those activities.  However, it does not include the work's
        System Libraries, or general-purpose tools or generally available free
        programs which are used unmodified in performing those activities but
        which are not part of the work.  For example, Corresponding Source
        includes interface definition files associated with source files for
        the work, and the source code for shared libraries and dynamically
        linked subprograms that the work is specifically designed to require,
        such as by intimate data communication or control flow between those
        subprograms and other parts of the work.
        
          The Corresponding Source need not include anything that users
        can regenerate automatically from other parts of the Corresponding
        Source.
        
          The Corresponding Source for a work in source code form is that
        same work.
        
          2. Basic Permissions.
        
          All rights granted under this License are granted for the term of
        copyright on the Program, and are irrevocable provided the stated
        conditions are met.  This License explicitly affirms your unlimited
        permission to run the unmodified Program.  The output from running a
        covered work is covered by this License only if the output, given its
        content, constitutes a covered work.  This License acknowledges your
        rights of fair use or other equivalent, as provided by copyright law.
        
          You may make, run and propagate covered works that you do not
        convey, without conditions so long as your license otherwise remains
        in force.  You may convey covered works to others for the sole purpose
        of having them make modifications exclusively for you, or provide you
        with facilities for running those works, provided that you comply with
        the terms of this License in conveying all material for which you do
        not control copyright.  Those thus making or running the covered works
        for you must do so exclusively on your behalf, under your direction
        and control, on terms that prohibit them from making any copies of
        your copyrighted material outside their relationship with you.
        
          Conveying under any other circumstances is permitted solely under
        the conditions stated below.  Sublicensing is not allowed; section 10
        makes it unnecessary.
        
          3. Protecting Users' Legal Rights From Anti-Circumvention Law.
        
          No covered work shall be deemed part of an effective technological
        measure under any applicable law fulfilling obligations under article
        11 of the WIPO copyright treaty adopted on 20 December 1996, or
        similar laws prohibiting or restricting circumvention of such
        measures.
        
          When you convey a covered work, you waive any legal power to forbid
        circumvention of technological measures to the extent such circumvention
        is effected by exercising rights under this License with respect to
        the covered work, and you disclaim any intention to limit operation or
        modification of the work as a means of enforcing, against the work's
        users, your or third parties' legal rights to forbid circumvention of
        technological measures.
        
          4. Conveying Verbatim Copies.
        
          You may convey verbatim copies of the Program's source code as you
        receive it, in any medium, provided that you conspicuously and
        appropriately publish on each copy an appropriate copyright notice;
        keep intact all notices stating that this License and any
        non-permissive terms added in accord with section 7 apply to the code;
        keep intact all notices of the absence of any warranty; and give all
        recipients a copy of this License along with the Program.
        
          You may charge any price or no price for each copy that you convey,
        and you may offer support or warranty protection for a fee.
        
          5. Conveying Modified Source Versions.
        
          You may convey a work based on the Program, or the modifications to
        produce it from the Program, in the form of source code under the
        terms of section 4, provided that you also meet all of these conditions:
        
            a) The work must carry prominent notices stating that you modified
            it, and giving a relevant date.
        
            b) The work must carry prominent notices stating that it is
            released under this License and any conditions added under section
            7.  This requirement modifies the requirement in section 4 to
            "keep intact all notices".
        
            c) You must license the entire work, as a whole, under this
            License to anyone who comes into possession of a copy.  This
            License will therefore apply, along with any applicable section 7
            additional terms, to the whole of the work, and all its parts,
            regardless of how they are packaged.  This License gives no
            permission to license the work in any other way, but it does not
            invalidate such permission if you have separately received it.
        
            d) If the work has interactive user interfaces, each must display
            Appropriate Legal Notices; however, if the Program has interactive
            interfaces that do not display Appropriate Legal Notices, your
            work need not make them do so.
        
          A compilation of a covered work with other separate and independent
        works, which are not by their nature extensions of the covered work,
        and which are not combined with it such as to form a larger program,
        in or on a volume of a storage or distribution medium, is called an
        "aggregate" if the compilation and its resulting copyright are not
        used to limit the access or legal rights of the compilation's users
        beyond what the individual works permit.  Inclusion of a covered work
        in an aggregate does not cause this License to apply to the other
        parts of the aggregate.
        
          6. Conveying Non-Source Forms.
        
          You may convey a covered work in object code form under the terms
        of sections 4 and 5, provided that you also convey the
        machine-readable Corresponding Source under the terms of this License,
        in one of these ways:
        
            a) Convey the object code in, or embodied in, a physical product
            (including a physical distribution medium), accompanied by the
            Corresponding Source fixed on a durable physical medium
            customarily used for software interchange.
        
            b) Convey the object code in, or embodied in, a physical product
            (including a physical distribution medium), accompanied by a
            written offer, valid for at least three years and valid for as
            long as you offer spare parts or customer support for that product
            model, to give anyone who possesses the object code either (1) a
            copy of the Corresponding Source for all the software in the
            product that is covered by this License, on a durable physical
            medium customarily used for software interchange, for a price no
            more than your reasonable cost of physically performing this
            conveying of source, or (2) access to copy the
            Corresponding Source from a network server at no charge.
        
            c) Convey individual copies of the object code with a copy of the
            written offer to provide the Corresponding Source.  This
            alternative is allowed only occasionally and noncommercially, and
            only if you received the object code with such an offer, in accord
            with subsection 6b.
        
            d) Convey the object code by offering access from a designated
            place (gratis or for a charge), and offer equivalent access to the
            Corresponding Source in the same way through the same place at no
            further charge.  You need not require recipients to copy the
            Corresponding Source along with the object code.  If the place to
            copy the object code is a network server, the Corresponding Source
            may be on a different server (operated by you or a third party)
            that supports equivalent copying facilities, provided you maintain
            clear directions next to the object code saying where to find the
            Corresponding Source.  Regardless of what server hosts the
            Corresponding Source, you remain obligated to ensure that it is
            available for as long as needed to satisfy these requirements.
        
            e) Convey the object code using peer-to-peer transmission, provided
            you inform other peers where the object code and Corresponding
            Source of the work are being offered to the general public at no
            charge under subsection 6d.
        
          A separable portion of the object code, whose source code is excluded
        from the Corresponding Source as a System Library, need not be
        included in conveying the object code work.
        
          A "User Product" is either (1) a "consumer product", which means any
        tangible personal property which is normally used for personal, family,
        or household purposes, or (2) anything designed or sold for incorporation
        into a dwelling.  In determining whether a product is a consumer product,
        doubtful cases shall be resolved in favor of coverage.  For a particular
        product received by a particular user, "normally used" refers to a
        typical or common use of that class of product, regardless of the status
        of the particular user or of the way in which the particular user
        actually uses, or expects or is expected to use, the product.  A product
        is a consumer product regardless of whether the product has substantial
        commercial, industrial or non-consumer uses, unless such uses represent
        the only significant mode of use of the product.
        
          "Installation Information" for a User Product means any methods,
        procedures, authorization keys, or other information required to install
        and execute modified versions of a covered work in that User Product from
        a modified version of its Corresponding Source.  The information must
        suffice to ensure that the continued functioning of the modified object
        code is in no case prevented or interfered with solely because
        modification has been made.
        
          If you convey an object code work under this section in, or with, or
        specifically for use in, a User Product, and the conveying occurs as
        part of a transaction in which the right of possession and use of the
        User Product is transferred to the recipient in perpetuity or for a
        fixed term (regardless of how the transaction is characterized), the
        Corresponding Source conveyed under this section must be accompanied
        by the Installation Information.  But this requirement does not apply
        if neither you nor any third party retains the ability to install
        modified object code on the User Product (for example, the work has
        been installed in ROM).
        
          The requirement to provide Installation Information does not include a
        requirement to continue to provide support service, warranty, or updates
        for a work that has been modified or installed by the recipient, or for
        the User Product in which it has been modified or installed.  Access to a
        network may be denied when the modification itself materially and
        adversely affects the operation of the network or violates the rules and
        protocols for communication across the network.
        
          Corresponding Source conveyed, and Installation Information provided,
        in accord with this section must be in a format that is publicly
        documented (and with an implementation available to the public in
        source code form), and must require no special password or key for
        unpacking, reading or copying.
        
          7. Additional Terms.
        
          "Additional permissions" are terms that supplement the terms of this
        License by making exceptions from one or more of its conditions.
        Additional permissions that are applicable to the entire Program shall
        be treated as though they were included in this License, to the extent
        that they are valid under applicable law.  If additional permissions
        apply only to part of the Program, that part may be used separately
        under those permissions, but the entire Program remains governed by
        this License without regard to the additional permissions.
        
          When you convey a copy of a covered work, you may at your option
        remove any additional permissions from that copy, or from any part of
        it.  (Additional permissions may be written to require their own
        removal in certain cases when you modify the work.)  You may place
        additional permissions on material, added by you to a covered work,
        for which you have or can give appropriate copyright permission.
        
          Notwithstanding any other provision of this License, for material you
        add to a covered work, you may (if authorized by the copyright holders of
        that material) supplement the terms of this License with terms:
        
            a) Disclaiming warranty or limiting liability differently from the
            terms of sections 15 and 16 of this License; or
        
            b) Requiring preservation of specified reasonable legal notices or
            author attributions in that material or in the Appropriate Legal
            Notices displayed by works containing it; or
        
            c) Prohibiting misrepresentation of the origin of that material, or
            requiring that modified versions of such material be marked in
            reasonable ways as different from the original version; or
        
            d) Limiting the use for publicity purposes of names of licensors or
            authors of the material; or
        
            e) Declining to grant rights under trademark law for use of some
            trade names, trademarks, or service marks; or
        
            f) Requiring indemnification of licensors and authors of that
            material by anyone who conveys the material (or modified versions of
            it) with contractual assumptions of liability to the recipient, for
            any liability that these contractual assumptions directly impose on
            those licensors and authors.
        
          All other non-permissive additional terms are considered "further
        restrictions" within the meaning of section 10.  If the Program as you
        received it, or any part of it, contains a notice stating that it is
        governed by this License along with a term that is a further
        restriction, you may remove that term.  If a license document contains
        a further restriction but permits relicensing or conveying under this
        License, you may add to a covered work material governed by the terms
        of that license document, provided that the further restriction does
        not survive such relicensing or conveying.
        
          If you add terms to a covered work in accord with this section, you
        must place, in the relevant source files, a statement of the
        additional terms that apply to those files, or a notice indicating
        where to find the applicable terms.
        
          Additional terms, permissive or non-permissive, may be stated in the
        form of a separately written license, or stated as exceptions;
        the above requirements apply either way.
        
          8. Termination.
        
          You may not propagate or modify a covered work except as expressly
        provided under this License.  Any attempt otherwise to propagate or
        modify it is void, and will automatically terminate your rights under
        this License (including any patent licenses granted under the third
        paragraph of section 11).
        
          However, if you cease all violation of this License, then your
        license from a particular copyright holder is reinstated (a)
        provisionally, unless and until the copyright holder explicitly and
        finally terminates your license, and (b) permanently, if the copyright
        holder fails to notify you of the violation by some reasonable means
        prior to 60 days after the cessation.
        
          Moreover, your license from a particular copyright holder is
        reinstated permanently if the copyright holder notifies you of the
        violation by some reasonable means, this is the first time you have
        received notice of violation of this License (for any work) from that
        copyright holder, and you cure the violation prior to 30 days after
        your receipt of the notice.
        
          Termination of your rights under this section does not terminate the
        licenses of parties who have received copies or rights from you under
        this License.  If your rights have been terminated and not permanently
        reinstated, you do not qualify to receive new licenses for the same
        material under section 10.
        
          9. Acceptance Not Required for Having Copies.
        
          You are not required to accept this License in order to receive or
        run a copy of the Program.  Ancillary propagation of a covered work
        occurring solely as a consequence of using peer-to-peer transmission
        to receive a copy likewise does not require acceptance.  However,
        nothing other than this License grants you permission to propagate or
        modify any covered work.  These actions infringe copyright if you do
        not accept this License.  Therefore, by modifying or propagating a
        covered work, you indicate your acceptance of this License to do so.
        
          10. Automatic Licensing of Downstream Recipients.
        
          Each time you convey a covered work, the recipient automatically
        receives a license from the original licensors, to run, modify and
        propagate that work, subject to this License.  You are not responsible
        for enforcing compliance by third parties with this License.
        
          An "entity transaction" is a transaction transferring control of an
        organization, or substantially all assets of one, or subdividing an
        organization, or merging organizations.  If propagation of a covered
        work results from an entity transaction, each party to that
        transaction who receives a copy of the work also receives whatever
        licenses to the work the party's predecessor in interest had or could
        give under the previous paragraph, plus a right to possession of the
        Corresponding Source of the work from the predecessor in interest, if
        the predecessor has it or can get it with reasonable efforts.
        
          You may not impose any further restrictions on the exercise of the
        rights granted or affirmed under this License.  For example, you may
        not impose a license fee, royalty, or other charge for exercise of
        rights granted under this License, and you may not initiate litigation
        (including a cross-claim or counterclaim in a lawsuit) alleging that
        any patent claim is infringed by making, using, selling, offering for
        sale, or importing the Program or any portion of it.
        
          11. Patents.
        
          A "contributor" is a copyright holder who authorizes use under this
        License of the Program or a work on which the Program is based.  The
        work thus licensed is called the contributor's "contributor version".
        
          A contributor's "essential patent claims" are all patent claims
        owned or controlled by the contributor, whether already acquired or
        hereafter acquired, that would be infringed by some manner, permitted
        by this License, of making, using, or selling its contributor version,
        but do not include claims that would be infringed only as a
        consequence of further modification of the contributor version.  For
        purposes of this definition, "control" includes the right to grant
        patent sublicenses in a manner consistent with the requirements of
        this License.
        
          Each contributor grants you a non-exclusive, worldwide, royalty-free
        patent license under the contributor's essential patent claims, to
        make, use, sell, offer for sale, import and otherwise run, modify and
        propagate the contents of its contributor version.
        
          In the following three paragraphs, a "patent license" is any express
        agreement or commitment, however denominated, not to enforce a patent
        (such as an express permission to practice a patent or covenant not to
        sue for patent infringement).  To "grant" such a patent license to a
        party means to make such an agreement or commitment not to enforce a
        patent against the party.
        
          If you convey a covered work, knowingly relying on a patent license,
        and the Corresponding Source of the work is not available for anyone
        to copy, free of charge and under the terms of this License, through a
        publicly available network server or other readily accessible means,
        then you must either (1) cause the Corresponding Source to be so
        available, or (2) arrange to deprive yourself of the benefit of the
        patent license for this particular work, or (3) arrange, in a manner
        consistent with the requirements of this License, to extend the patent
        license to downstream recipients.  "Knowingly relying" means you have
        actual knowledge that, but for the patent license, your conveying the
        covered work in a country, or your recipient's use of the covered work
        in a country, would infringe one or more identifiable patents in that
        country that you have reason to believe are valid.
        
          If, pursuant to or in connection with a single transaction or
        arrangement, you convey, or propagate by procuring conveyance of, a
        covered work, and grant a patent license to some of the parties
        receiving the covered work authorizing them to use, propagate, modify
        or convey a specific copy of the covered work, then the patent license
        you grant is automatically extended to all recipients of the covered
        work and works based on it.
        
          A patent license is "discriminatory" if it does not include within
        the scope of its coverage, prohibits the exercise of, or is
        conditioned on the non-exercise of one or more of the rights that are
        specifically granted under this License.  You may not convey a covered
        work if you are a party to an arrangement with a third party that is
        in the business of distributing software, under which you make payment
        to the third party based on the extent of your activity of conveying
        the work, and under which the third party grants, to any of the
        parties who would receive the covered work from you, a discriminatory
        patent license (a) in connection with copies of the covered work
        conveyed by you (or copies made from those copies), or (b) primarily
        for and in connection with specific products or compilations that
        contain the covered work, unless you entered into that arrangement,
        or that patent license was granted, prior to 28 March 2007.
        
          Nothing in this License shall be construed as excluding or limiting
        any implied license or other defenses to infringement that may
        otherwise be available to you under applicable patent law.
        
          12. No Surrender of Others' Freedom.
        
          If conditions are imposed on you (whether by court order, agreement or
        otherwise) that contradict the conditions of this License, they do not
        excuse you from the conditions of this License.  If you cannot convey a
        covered work so as to satisfy simultaneously your obligations under this
        License and any other pertinent obligations, then as a consequence you may
        not convey it at all.  For example, if you agree to terms that obligate you
        to collect a royalty for further conveying from those to whom you convey
        the Program, the only way you could satisfy both those terms and this
        License would be to refrain entirely from conveying the Program.
        
          13. Use with the GNU Affero General Public License.
        
          Notwithstanding any other provision of this License, you have
        permission to link or combine any covered work with a work licensed
        under version 3 of the GNU Affero General Public License into a single
        combined work, and to convey the resulting work.  The terms of this
        License will continue to apply to the part which is the covered work,
        but the special requirements of the GNU Affero General Public License,
        section 13, concerning interaction through a network will apply to the
        combination as such.
        
          14. Revised Versions of this License.
        
          The Free Software Foundation may publish revised and/or new versions of
        the GNU General Public License from time to time.  Such new versions will
        be similar in spirit to the present version, but may differ in detail to
        address new problems or concerns.
        
          Each version is given a distinguishing version number.  If the
        Program specifies that a certain numbered version of the GNU General
        Public License "or any later version" applies to it, you have the
        option of following the terms and conditions either of that numbered
        version or of any later version published by the Free Software
        Foundation.  If the Program does not specify a version number of the
        GNU General Public License, you may choose any version ever published
        by the Free Software Foundation.
        
          If the Program specifies that a proxy can decide which future
        versions of the GNU General Public License can be used, that proxy's
        public statement of acceptance of a version permanently authorizes you
        to choose that version for the Program.
        
          Later license versions may give you additional or different
        permissions.  However, no additional obligations are imposed on any
        author or copyright holder as a result of your choosing to follow a
        later version.
        
          15. Disclaimer of Warranty.
        
          THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
        APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
        HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
        ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
        
          16. Limitation of Liability.
        
          IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
        WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
        THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
        GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
        USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
        DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
        PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
        EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
        SUCH DAMAGES.
        
          17. Interpretation of Sections 15 and 16.
        
          If the disclaimer of warranty and limitation of liability provided
        above cannot be given local legal effect according to their terms,
        reviewing courts shall apply local law that most closely approximates
        an absolute waiver of all civil liability in connection with the
        Program, unless a warranty or assumption of liability accompanies a
        copy of the Program in return for a fee.
        
                             END OF TERMS AND CONDITIONS
        
                    How to Apply These Terms to Your New Programs
        
          If you develop a new program, and you want it to be of the greatest
        possible use to the public, the best way to achieve this is to make it
        free software which everyone can redistribute and change under these terms.
        
          To do so, attach the following notices to the program.  It is safest
        to attach them to the start of each source file to most effectively
        state the exclusion of warranty; and each file should have at least
        the "copyright" line and a pointer to where the full notice is found.
        
            <one line to give the program's name and a brief idea of what it does.>
            Copyright (C) <year>  <name of author>
        
            This program is free software: you can redistribute it and/or modify
            it under the terms of the GNU General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            This program is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU General Public License for more details.
        
            You should have received a copy of the GNU General Public License
            along with this program.  If not, see <https://www.gnu.org/licenses/>.
        
        Also add information on how to contact you by electronic and paper mail.
        
          If the program does terminal interaction, make it output a short
        notice like this when it starts in an interactive mode:
        
            <program>  Copyright (C) <year>  <name of author>
            This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
            This is free software, and you are welcome to redistribute it
            under certain conditions; type `show c' for details.
        
        The hypothetical commands `show w' and `show c' should show the appropriate
        parts of the General Public License.  Of course, your program's commands
        might be different; for a GUI interface, you would use an "about box".
        
          You should also get your employer (if you work as a programmer) or school,
        if any, to sign a "copyright disclaimer" for the program, if necessary.
        For more information on this, and how to apply and follow the GNU GPL, see
        <https://www.gnu.org/licenses/>.
        
          The GNU General Public License does not permit incorporating your program
        into proprietary programs.  If your program is a subroutine library, you
        may consider it more useful to permit linking proprietary applications with
        the library.  If this is what you want to do, use the GNU Lesser General
        Public License instead of this License.  But first, please read
        <https://www.gnu.org/licenses/why-not-lgpl.html>.
        
Project-URL: Homepage, https://github.com/eisfabian/SPACEtomo
Project-URL: Documentation, https://github.com/eisfabian/SPACEtomo/blob/main/README.md
Project-URL: Repository, https://github.com/eisfabian/SPACEtomo
Project-URL: Issues, https://github.com/eisfabian/SPACEtomo/issues
Keywords: SPACEtomo,cryoET,tomography,electron-tomography,SerialEM
Requires-Python: >=3.6,!=3.7.*,!=3.8.*,!=3.10.*
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib>=3.5; python_version >= "3.9"
Requires-Dist: mrcfile>=1.5.0; python_version >= "3.9"
Requires-Dist: numpy>=1.26.4; python_version >= "3.9"
Requires-Dist: Pillow>=10.4.0; python_version >= "3.9"
Requires-Dist: scipy>=1.12.0; python_version >= "3.9"
Requires-Dist: scikit-image>=0.22.0; python_version >= "3.9"
Requires-Dist: matplotlib>=3.3; python_version < "3.7"
Requires-Dist: mrcfile>=1.5; python_version < "3.7"
Requires-Dist: numpy>=1.19; python_version < "3.7"
Requires-Dist: Pillow>=8.0; python_version < "3.7"
Requires-Dist: scipy>=1.5; python_version < "3.7"
Requires-Dist: scikit-image>=0.17; python_version < "3.7"
Requires-Dist: imageio==2.15.0; python_version < "3.7"
Provides-Extra: gui
Requires-Dist: dearpygui>=1.10.0; python_version >= "3.9" and extra == "gui"
Provides-Extra: predict
Requires-Dist: torch>=2.2.0; python_version >= "3.9" and extra == "predict"
Requires-Dist: torchvision>=0.17.0; python_version >= "3.9" and extra == "predict"
Requires-Dist: nnunetv2>=2.2.1; python_version >= "3.9" and extra == "predict"
Requires-Dist: ultralytics>=8.1.12; python_version >= "3.10" and extra == "predict"
Requires-Dist: ultralytics<8.3.10,>=8.1.12; python_version == "3.9" and extra == "predict"
Dynamic: home-page
Dynamic: license-file
Dynamic: maintainer
Dynamic: requires-python

# SPACEtomo

Smart Parallel Automated Cryo Electron tomography (SPACEtomo) is a Python package and set of SerialEM scripts to fully automate the cryoET data collection workflow.
Please refer to the [publication](https://www.nature.com/articles/s41592-024-02373-9) ([pdf](https://rdcu.be/dQlI4)) for more details.

<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACEtomo_logo.png" width="600" alt="SPACEtomo" />

## Use cases

SPACEtomo allows for a variety of automation levels applicable to a range of samples.

- Automated whole grid montage acquisition, lamella detection and medium mag lamella montage collection is **sample independent** and can be run using a multi-grid workflow.
- Manual target selection using a user-friendly drag and drop user interface **(sample independent)**.
- Automated target selection based on segmentation of biological classes in Yeast.

## Contents

- [Hardware](#hardware)
- [Installation](#installation)
- [Configuration](#configuration)
- [Usage](#usage)
	- [Preparation](#preparation)
	- [Settings](#settings)
	- [Run](#run)
	- [Lamella detection GUI](#lamella-detection-gui)
	- [Target selection GUI](#target-selection-gui)
	- [CLEM GUI](#clem-gui)
	- [Output](#output)
	- [External Processing](#external-processing)
- [Video tutorials](#video-tutorials)
- [Troubleshooting](#troubleshooting)
- [Recent changes](#recent-changes)
- [Future plans](#future-plans)
- [Training Data](#training-data)

## Hardware

SPACEtomo has only been tested on Thermo Scientific Krios and Glacios instruments equipped with a Gatan K3 or K2, or a Falcon 4 direct electron detector. A recent version of the open-source microscope control software [SerialEM](https://bio3d.colorado.edu/SerialEM/) (v4.2+) should be installed and calibrated. It also requires the [PACEtomo](https://github.com/eisfabian/PACEtomo) (v1.9.2+) scripts.

If you want to test SPACEtomo on another system, please reach out to me at [spacetomo.help@gmail.com](mailto:spacetomo.help@gmail.com).

## Installation

SPACEtomo requires SerialEM 4.2 or higher capable of running Python (>=3.9) scripts.

NOTE: A Gatan K2 computer does not support Python >3.7. You can use Python 3.6 together with an external workstation running Python >=3.9 (details [below](#external-processing)). 

You can run the following lines of code in a SerialEM script window to test if Python is configured correctly:
```python
#!Python
import serialem as sem
sem.OKBox("Python works!")
```
If you get an error message, please consult the [SerialEM website](https://bio3d.colorado.edu/SerialEM/hlp/html/about_scripts.htm#Python) on how to setup Python for SerialEM.

### Python packages

Additionally, you will require several Python packages. It is best practice to create a virtual environment for SPACEtomo running Python 3.9 or higher ([SerialEM compatible versions of Python](https://bio3d.colorado.edu/SerialEM/hlp/html/about_scripts.htm#pythonInstall)).

After [installing your desired Python version](https://docs.python.org/3/using/windows.html#the-full-installer) (following commands assume Python 3.9, since most testing was done in this version), create a folder for your virtual environment and run:

    C:\Python39\python -m venv <path_to_your_venv>

To activate the virtual environment run:

    <path_to_your_venv>\Scripts\activate.bat

The next step will be much easier if you have a network connection. Please contact your responsible IT specialist if it's possible to temporarily allow network connection or setup a proxy.

With network connection, you can run:

    pip install --extra-index-url https://download.pytorch.org/whl/cu118 SPACEtomo[gui,predict] 

With proxy, you can run:

    pip install --proxy <proxy_address> --extra-index-url https://download.pytorch.org/whl/cu118 SPACEtomo[gui,predict]

The `--extra-index-url` is only necessary if you want to use a CUDA enabled GPU for the prediction tasks. The given URL is for **CUDA 11.8**. You can check the [PyTorch download site](https://pytorch.org/get-started/locally/) for URLs to install different CUDA versions!

NOTE: If the installation fails, you can try `SPACEtomo[gui]` or only `SPACEtomo` to install the minimal environment. In that case you will require an external machine to run any deep learning dependent tasks.

<details>
 <summary>Without any network connection, you will have to go through these steps on another Windows machine (e.g. the microscope support PC).</summary>

(The Windows machine should be as similar in hardware and software as possible to the SerialEM computer.)

1. Setup the same python version and virtual environment.
2. Create a new folder to save the python packages.
3. In this folder, run: 

    ```pip download --extra-index-url https://download.pytorch.org/whl/cu118 SPACEtomo[gui,predict]```

4. Copy this folder to the SerialEM computer.
5. On the SerialEM computer, open the command prompt and activate the virtual environment with `<path_to_your_venv>\Scripts\activate.bat`.
6. Navigate to the folder containing the downloaded Python packages and ensure it does not contain anything else!
6. In this folder on the SerialEM computer, run: 

```
FOR %i in (*) DO python -m pip install --no-deps --no-build-isolation %i
```

If no error messages appear, all necessary packages should be successfully installed. If there are errors, you will have to resolve any compatibility issues. The easiest would be to try the same procedure on a Windows machine more similar to the SerialEM computer.

[Here](https://github.com/eisfabian/SPACEtomo/blob/main/docs/package_list.md) you can find a list of packages and versions that works on our Gatan K3 and K2 computers.

</details>

### SerialEM Python path

With that, all dependencies should be ready to go!

To let SerialEM access this environment, we have to adjust the *SerialEM_properties.txt* file (usually found in *C:\Program Data\SerialEM*) to include the Python path to the folder containing our environment's *python.exe*:

    PathToPython	3.9 	<path_to_your_venv>\Scripts


## Configuration

### Models

To install SPACEtomo, you will have to import the deep learning models and adjust the config file.

After activating your virtual environment in the command prompt with 

    <path_to_your_venv>\Scripts\activate.bat
    
you can run the `SPACEmodel` command:

    SPACEmodel list                                 # Lists all imported models
    SPACEmodel add --path <path_to_model_file>      # Imports model (.zip for segmentation model, .pt for detection model)
    SPACEmodel add --url <url_to_model_file>        # Downloads and imports model
    SPACEmodel activate --name <name_of_model>      # Activates model (1 detection and 1 segmentation model are necessary)
    SPACEmodel remove --name <name_of_model>        # Removes model
    SPACEmodel clear                                # Removes all models

There are 2 types of SPACEtomo models:
1. Lamella detection models that use whole grid maps to identify lamella sites.
2. Lamella segmentation models that use medium magnification maps of a lamella to create a segmentation.

[You can find information on all currently supported models here!](https://github.com/eisfabian/SPACEtomo/blob/main/docs/model_info.md)

NOTE: If you train your own models, please consider sharing them with the community!

### Config

You should also adjust the config file if you use a new model. You can access the config.py file using the `SPACEconfig` command:

    SPACEconfig get --name <file_name>              # Fetches a copy of config.py and saves it to the current directory as <file_name>
    SPACEconfig set --name <file_name>              # Applies <file_name> (config.py by default) as new config file

You can edit and adjust the config.py like a text file for your needs.

<details>
    <summary><b>Model specific config entries</b></summary>

- `WG_model_file`: Path to lamella detection model (automatically configured by `SPACEmodel add`).
- `WG_model_pix_size`: Pixel size of lamella detection model in nm.
- `WG_model_sidelen`: Side length of images used for detection model in pixel.
- `WG_model_categories`: List of category names distinguished by lamella detection model.
- `WG_model_gui_colors`: List of colors used in GUI to represent lamella categories.
- `WG_model_nav_colors`: List of colors used in SerialEM to represent lamella categories.

- `MM_model_script`: Name of script called for lamella segmentation (currently only nnU-Net is supported).
- `MM_model_folder`: Path to lamella segmentation model (automatically configured by `SPACEmodel add`)
- `MM_model_folds`: Folds of nnU-Net model (automatically configured by `SPACEmodel add`).
- `MM_model_pix_size`: Pixel size of lamella segmentation model in nm.

</details>

<details>
    <summary>Settings for controlling SerialEM externally (not yet fully supported)</summary>

- `SERIALEM_IP`: IP of computer running SerialEM (default: "127.0.0.1" for local computer).
- `SERIALEM_PORT`: Port for SerialEM connection (default: 48888)
- `SERIALEM_PYTHON_PATH`: Path to Python modules on external machine

</details>
<details>
    <summary>Settings for development and debugging</summary>

- `DUMMY`: Allows testing of some functions without SerialEM (default: False).
- `DEBUG`: Additional log output for troubleshooting (default: False).
- `BREAKPOINTS`: Waits at every debug output for user to press `B` key.

</details>
<details>
    <summary><b>Persistent acquisition settings</b></summary>

- `WG_montage_overlap`: Overlap between neighboring tiles of the LM map for stitching.
- `WG_detection_threshold`: YOLOv8 confidence threshold for considering a hit a lamella. Raise this value if you have a lot of false positives.

- `MM_montage_overlap`: Overlap between neighboring tiles of the MM map for stitching. Good stitching is especially important here for reliable target selection.
- `MM_padding_factor`: MM maps are padded by this factor compared to the lamella bounding box. This accounts for the coordinates being off center or the bounding box prediction being off.

- `aperture_control`: [Does SerialEM have control over the apertures](https://bio3d.colorado.edu/SerialEM/hlp/html/setting_up_serialem.htm#apertures)?
- `c2_apertures`: List of C2 aperture diameters for WG, IM and MM imaging states ([see below](#settings)). If set to `[0, 0, 0]`, no aperture change will be attempted.
- `objective_aperture`: Size of objective aperture to be inserted when leaving LM.

</details>
<details>
    <summary>Instrument specific settings</summary>

- To determine the beam diameter on a two condenser lens system like a Thermo Scientific Glacios, the `beam_sizes` at the `smallest_c2_aperture` has to be entered for both nano probe and micro probe modes.

</details>


### SerialEM scripts

The final step before you can run SPACEtomo is to copy the [SerialEM scripts](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts) into the SerialEM script window.
Simply copy the [SPACEtomo_run.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_run.py) script and the [SPACEtomo_prepareTargets.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_prepareTargets.py) script into a SerialEM script window each. For using SPACEtomo target selection on a manually acquired montage map, you will also need the [SPACEtomo_manMap.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_manMap.py) script.

If you installed SPACEtomo, you can also run this command to retrieve a copy of the SerialEM scripts:

    SPACEtomo scripts

You also need the [PACEtomo scripts](https://github.com/eisfabian/PACEtomo) (v1.9.2+) ready and working inside SerialEM. All tilt series acquisition steps are conducted by PACEtomo, so please setup up your scripts and Low Dose settings according to the PACEtomo documentation.

Optional: You can also copy the [SPACEtomo_lamellaDetectionGUI.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_lamellaDetectionGUI.py) and the [SPACEtomo_targetSelectionGUI.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_targetSelectionGUI.py) to a SerialEM script window to easily open the [SPACEtomo GUIs](#lamella-detection-gui) from SerialEM.

### Updating

If you want to update SPACEtomo to the latest version, simply activate your virtual environment and run:

    pip install SPACEtomo

with network connection or:

    pip install --proxy <proxy_address> SPACEtomo

using a proxy.

SPACEtomo models should be retained but please double-check that your config file is still valid!

<details>
<summary>Details without network connection</summary>

1. [Download](https://github.com/eisfabian/SPACEtomo/archive/refs/heads/main.zip) the source repository from Github.
2. Unzip and copy this folder to the SerialEM computer.
3. On the SerialEM computer, open the command prompt and activate the virtual environment with `<path_to_your_venv>\Scripts\activate.bat`.
4. Run: 

```
pip install --no-deps --no-build-isolation <path_to_the_SPACEtomo_repository_folder>\
```

</details>


## Usage

The usage instructions for SPACEtomo assume that [PACEtomo](https://github.com/eisfabian/PACEtomo) is already able to run normally on your setup.

### Preparation

SPACEtomo requires the setup of at least 3 image states in the SerialEM navigator. 

- One image state for whole grid montages (LM maps), at a pixel size <400 nm/px (including binning).
- One image state at intermediate mag (IM), usually around 580x, required to compensate for the coordinate shifts between the low mag and the View mag. This magnification should contain the lamella fully in the FOV when moving the stage to a position on the LM map and it should be fairly well aligned to the View mag.
- One Low Dose mode image state with a View magnification for lamella montages (MM maps), ideally at pixel sizes <2.2 nm/px and a defocus offset of 50-100 μm, as well as the desired Record settings for tilt series acquisition. The smaller the beam diameter in Record mode, the more targets can be selected per lamella.

WARNING: If you name your imaging states in SerialEM, please avoid using numbers in the name. Numbers can confuse SerialEM's *GoToImagingState* command, which takes both, names or indices, as input and prioritizes names.
<details>
	<summary>Details</summary>
When selecting and moving to a point on an LM map, then taking a View image, the selected point will most likely not be in the field of view. Usually, I find that point manually and use the <i>Navigator</i> > <i>Shift to Marker</i> function to adjust the coordinates. 
	
To automate this, SPACEtomo moves to a lamella found on the LM map and takes an image at IM that needs to fully contain the lamella despite the offset. It then runs the same lamella detection model and shifts the coordinates to the newly found lamella. The jump from the IM to the View magnification in your Low Dose image state should be minimal since no further compensation is applied. 
</details>

For optimal results, it is recommended to check or redo the "Mag IS Offsets" calibration for the relevant magnifications.

The "High-Defocus Mag" and especially the "High-Defocus IS" calibrations also help to keep a feature centered when switching from the *View* to the *Record* Low Dose area.

The magnifications I use are 82x for LM, 580x for IM and 4800x for MM.

If you intend to do a [coma-free alignment](https://bio3d.colorado.edu/SerialEM/hlp/html/menu_focus.htm#hid_focus_coma_by_ctf) and a [coma vs image shift calibration](https://bio3d.colorado.edu/SerialEM/hlp/html/hidd_coma_vs_is_cal.htm), this should be done prior to running SPACEtomo ideally on a carbon support foil grid.

<details>
    <summary>Further recommendations for SerialEM setup</summary>

- In the Image alignment & Focus Panel, check *Center image shift on tilt axis* and set tilt axis offset as described in the [PACEtomo](https://github.com/eisfabian/PACEtomo) documentation.
- Set both, Focus and Trial to offset 0.
- Align shift between Record and View magnifications.
</details>

### Settings

All session settings are adjusted in the [SPACEtomo_run.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_run.py) script.

The most important settings for the first setup that remain mostly unchanged from session to session are:

| Setting | Description |
| ------- | ----------- |
| `WG_image_state` | Image state index used for LM map (grid atlas). |
| `IM_image_state` | Image state index used for alignment between WG mag and View mag. Typically, ~580x works well for lamellae. |
| `MM_image_state` | Image state index used for Low Dose mode tilt series acquisition. This can be a list of imaging states to specify imaging states for Record and View separately. |
| `script_numbers` | List of indices of the [[SPACEtomo_run.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_run.py), [SPACEtomo_prepareTargets.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_prepareTargets.py), [PACEtomo.py](https://github.com/eisfabian/PACEtomo/blob/main/PACEtomo.py)] scripts in the SerialEM script editor. |

The settings that will typically change from run to run are:

| Setting | Description |
| ------- | ----------- |
| `automation_level` | Level 1-5 from only taking the WG map to starting the PACEtomo batch acquisition. |
| `grid_list` | List of autoloader slots to be imaged (comma-separated in []-brackets). If no cassette is loaded and grid is on stage use ["stage"]. |
| `lamella` | `True` if your sample are lamellae that should be detected or `False` for non-lamella samples. |
| `exclude_lamella_classes` | List including all classes that will not be further processed. Possible classes depend on the [detection model](https://github.com/eisfabian/SPACEtomo/blob/main/docs/model_info.md#lamella-detection-models) you are using. |
| `WG_wait_for_inspection` | Pause SPACEtomo before collecting lamella MM maps until detected lamellae have been inspected using the [SPACEtomo lamella detection GUI](#lamella-detection-gui) |
| `MM_wait_for_inspection` | Pause SPACEtomo before acquisition until selected targets have been inspected using the [SPACEtomo target selection GUI](#target-selection-gui) |
| `manual_selection` | Skip segmentation step (for samples without trained model) and use [SPACEtomo target selection GUI](#target-selection-gui) for target selection. |

The final settings are only used for runs of automation level 4+ with automatic target selection:

| Setting | Description |
| ------- | ----------- |
| `target_list` | List including all classes of the segmentation that are targeted. Examples for all classes can be found [here](https://github.com/eisfabian/SPACEtomo/raw/main/img/class_examples.png). |
| `avoid_list` | List including all classes that should be avoided. |
| `target_score_threshold` | Can be adjusted to reduce the number of targets. The score is calculated from the overlap of the camera field of view with the segmented classes. The score is not linear, but ranges from 0 to 1, from no target area in the FOV to the FOV being completely covered. A desired class in the center of the camera is upweighted. Generally, larger targets (e.g. nucleus or cell) are more robust to higher thresholds. Classes to be avoided in the FOV can cause a negative score. |
| `sparse_targets` | Target selection mode useful for small targets like mitochondria or vesicles. If set to `False`, a rigid grid of points is used for initial target selection, which is more suited to large target areas. |
| `target_edge` | Can be set to `True` to target the edges of a segmented class. This could be useful for membrane structure studies (e.g. NPCs). |
| `penalty_weight` | Factor to downweight the classes of the `avoid_list` relative to the classes of the `target_list`. |
| `extra_tracking` | Set to `True` if you want to add an extra target for the tracking tilt series that does not contain your desired class.
| `max_tilt` | This is the maximum tilt angle during a tilt series. It is used to calculate target spacing without any beam overlap. You can use lower values if you don't care about high angle overlaps and rather have more targets. |
| `external_map_dir` | Shared folder when running the processing on an external machine ([see below](#external-processing)). |

Additional settings are available in the [config.py](#config), which should generally only need adjustments when updating the deep learning models.

### Run

You can run SPACEtomo at different automation levels. It will stop after reaching the final automation level and will let you manually finish the setup if you desire.
If you rerun SPACEtomo on the same grid at a higher automation level, it will continue where the previous run finished.

<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/workflow_levels.png" alt="Automation levels" />

#### Level 1: Lamella identification

* SPACEtomo will load a grid, collect a LM map of the whole grid and identify the positions of lamellae. Navigator items labeled "PP#" ("Preliminary Position") will be added in SerialEM. If you stop at level 1, you can manually move to the identified lamella and decide where you want to collect a montage or select targets using [PACEtomo_selectTargets.py](https://github.com/eisfabian/PACEtomo/).

#### Level 2: Lamella montage collection

* This level includes collection of MM maps of each lamella. First, it will then take another image of each lamella at intermediate magnification (IM) to adjust the stage coordinates accordingly and add a navigator item with label "FP#" ("Final Position"). After collecting MM maps at all positions, you can then use these maps for manual target selection. Level 2 is organism independent and should be able to be used for any kind of lamella sample.

#### Level 3: Feature identification

* Level 3 includes the subsequent segmentation of the lamella montages for manual inspection. This model is organism specific (only Yeast at the time of writing) and new models will be released in the future.
* If you intend to collect lamellae exhaustively, you can use the Yeast model and include "lamella" in the first entry of your *target_list*. This allows the target setup to use the organism independent classes (e.g. "black", "white", "ice", etc.) to avoid and set up targets everywhere else on the lamella.
* If you set `manual_selection = True`, segmentation will be skipped.

#### Level 4: Target setup

* SPACEtomo will use the generated segmentation to set up targets according to your target selection settings. If you stop at level 4, you will be able to review all selected targets or add additional targets using the [Target selection GUI](#target-selection-gui) or the [PACEtomo_selectTargets.py](https://github.com/eisfabian/PACEtomo/) script.

#### Level 5: Acquisition

* The highest level of automation will start SerialEM's [Acquire at Items](https://bio3d.colorado.edu/SerialEM/hlp/html/hidd_navacquire.htm) routine. Make sure to set it up accordingly in advance.
* You have to select the [PACEtomo.py](https://github.com/eisfabian/PACEtomo/blob/main/PACEtomo.py) script as the *Primary Action* and make sure that the PACEtomo settings in the script have been set appropriately. Especially consider these settings when running SPACEtomo:
	 * The in SPACEtomo determined geo points will be used for sample geometry measurement.
	 * Set the appropriate `pretilt` and `rotation` values as backup if the geometry measurement should fail.
	 * Set `previewAli = False` and `viewAli = True` to use the SPACEtomo generated view mag virtual maps for alignment, set `previewAli = True` and `viewAli = False` to use SerialEM's *AlignBetweenMags* function to align a Preview image to the View mag virtual maps. Or set both, `previewAli = True` and `viewAli = True` for a two-step realignment. *AlignBetweenMags* during `previewAli` requires some high contrast features in the field of view to work reliably, but offers higher targeting precision for the final tilt series.
* No further tasks in the *Acquire at Items* dialog are necessary. PACEtomo will realign to the target and run a eucentricity routine. (You can check "Skip Z" moves during realign.)
* Additionally, you have to set the [SPACEtomo_prepareTargets.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_prepareTargets.py) script as `Run Script after Action`. This script will monitor any finishing lamella segmentation that was not ready for target setup before the PACEtomo acquisition started.
* There will be no break to do additional microscope alignments before the tilt series acquisition starts. It is recommended to do all necessary alignments (e.g. Beam Tilt PP, coma-free alignment, Coma vs IS calibration, center OL aperture) prior to running SPACEtomo on a carbon film grid.

#### Multi-grid considerations

If you want to run multiple grids in succession without intervention you can give a list of grids as `grid_list`. In this case the grid list will be saved as persistent variable inside SerialEM. If you restart the SPACEtomo script later in the same session with a different grid list, you need to run the *ClearPersistentVars* command in the SerialEM *One-Line Scripts* panel to ignore the previously given grid list.

While it is possible to run target setup in multi-grid mode, I would not recommend it as the target coordinates might be off after reloading a grid. The SerialEM multi-grid procedure to realign grids after reloading is used when SPACEtomo reloads a grid with an already existing WG map. However, targeting accuracy on a reloaded grid is currently untested.

### Lamella Detection GUI

The lamella detection GUI can be used to open whole grid LM maps and visualize detected lamella bounding boxes. You can also add, remove and re-categorize lamellae.

If you selected `WG_wait_for_inspection = True`, the GUI should open automatically. You can also open it using this command in the command prompt of your virtual environment:

    SPACEtomo lamella

You can then find a map image to load. If you want to visualize the results of the automatic lamella detection, go to the SPACE_maps folder created by SPACEtomo during a run and select any file ending with "_wg.png". The GUI will automatically look for any relevant "_boxes.json" file to load lamella coordinates and bounding boxes.

<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACEtomo_lam.png" alt="Lamella detection GUI" />


On the top left you will find the `Find map` and `Next` buttons to load a WG map.

Once a map is loaded and lamella coordinates are found, a list of all lamellae is displayed with color-coded classes and confidence scores. If you click on a lamella name, its bounding box will be centered in the plot.

Right clicking on a lamella in the plot or clicking the *edit icon* in the list, will open the editing menu allowing you to re-categorize, delete or reorder any lamella.

You can resize and drag the lamella bounding boxes by holding left click and dragging the corners or sides of the box.

You can also add a new lamella by holding `Shift` and dragging the left mouse button to draw a bounding box.

`Confirm inspection` will lock down any editing capabilities and signal SPACEtomo that it can proceed with the next automation step.

Finally, you can use the `Export tiles` button to export the map and bounding boxes in YOLO format that can later be used for training a new lamella detection model. This data can be found in the *YOLO_dataset* folder. Please consider submitting this data to me to further improve the general SPACEtomo lamella detection model in the future.

#### Use on non-lamella samples

When running SPACEtomo with `lamella = False`, it will automatically try to determine the square pattern of the grid. When you draw your first box on the map, it will use this pattern to suggest boxes for every square. You can simply add them by clicking on them and then adjust their dimensions individually as you can for detected lamella boxes. The grid of suggested boxes can be toggled with the "grid" button on top or by pressing `G`.

**NOTE:** SPACEtomo for non-lamella samples is still a work in progress and user-friendliness as well as proper naming will be improved in future versions.

<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACEtomo_sq.png" alt="Lamella detection GUI" />

### Target selection GUI

The target selection GUI can be used to inspect a segmentation and selected targets, run automated target selection with different parameters and manually select and edit targets.

If you selected `MM_wait_for_inspection = True`, the GUI should open automatically. You can also open it using this command in the command prompt of your virtual environment:

	SPACEtomo targets <path_to_SPACE_maps_folder>

The GUI will make a list of all collected lamella MM maps and lets you select a map to load (takes a minute depending on map size).

If targets have already been selected, it will also show the target positions on the map. You can either run automated target selection again with different parameters, drag targets to a new position, add and remove targets and mark targets as *inspected*, which allows SPACEtomo to use the coordinates for target setup.

#### Example on lamella
<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACEtomo_tgt1.png" alt="Target selection GUI on lamella" />

#### Example on support film
<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACEtomo_tgt2.png" alt="Target selection GUI on support film" />

The left menu consists of 2 sections - map loading and a list of classes.

`Load map` will load the map selected in the drop down menu, `Next` will load the following map and the `[]` button will open a window with an overview over all lamellae.

If you want to reopen the whole grid map you can click on `Grid map` to restart the [Lamella detection GUI](#lamella-detection-gui). The `CLEM` button will open the [CLEM GUI](#clem-gui) to facilitate correlated target selection.

The `Reacquire` button will allow you to schedule the map for reacquisition. Reacquisition will happen ONLY when you run the *SPACEtomo_run* script again! You can optionally shift the center and the size (padding factor) of the new map.

In case the segmentation step was performed, you can check the boxes of any number of segmented classes in the shown list and click `Create overlay` to show a red overlay of all selected classes over the map or `Apply` to use the selected classes as target classes for automated target selection.

The center plot shows the lamella map as well as the selected targets and geo points. (Geo points will be used to estimate the sample geometry by measuring their relative z-height using SerialEM's autofocus routine.)

- Blue rectangle: Camera field of view (FOV) at Record magnification on target
- Red rectangle: Camera FOV on tracking target
- Orange rectangle: Camera FOV at geo point
- Yellow ellipse: Area exposed to electron beam throughout a tilt series up to the `max_tilt` angle.
- Orange circle: Area exposed to electron beam around geo point at zero tilt.
- Diamond markers: Center coordinates of respective areas colored by independent target area (= PACEtomo acquisition area). These dots can be dragged to move targets.
- Red asterisk: Target is outside the given image shift range and might be ignored during acquisition. Consider splitting your target area!

More infos about individual targets are shown when you hover over them. You can right click on any target to `Delete` it, make it a tracking target or optimize its position locally based on the active class selection mask.

The right menu consists of 3 sections - target selection, acquisition settings and saving.

The target selection settings are the same as described [above](#settings). You can adjust the settings and rerun the target selection by clicking `Auto select targets`.

`Split target areas` will attempt to split the targets into independent target areas using k-means clustering. You can then right click on any target and manually move it between target areas using the drop down menu. This can be useful for large lamellae where the image shift limit is not sufficient to collect all targets in parallel or for manually collected montage maps. `Redistribute targets` will simply assign all targets to the closes tracking area. To merge target areas you can click `Merge target areas`.

`Delete targets` will clear all targets and geo points from the list and plot. `Delete geo points` will clear just the geo points.

The acquisition settings can be used to override any settings specified in the *PACEtomo* script.

Finally, `Confirm inspection` will lock down any editing capabilities and signal SPACEtomo that it can proceed with the next automation step.

#### Patterns and Polygons

If you want to setup targets in a regular fashion, there are currently 2 options. Hole pattern (square dots icon) and dense pattern (hexagonal dots icon) mode can be selected above the plot. The hole pattern icon will only show up, if autocorrelation peaks could be detected. Both modes will display target suggestions in grey. You can add some of these targets by clicking on them or all suggested targets by clicking the `Add target suggestions` button.

Additionally, you can use polygon mode (pentagon icon) to add a polygon by clicking on the plot. After closing a polygon, you can activate a pattern mode and polygon mode together to only add target suggestions within the bounds of the polygon.

### CLEM GUI

The correlative light and electron microscopy (CLEM) interface allows for loading, registration and overlaying of light microscopy data to enable target selection based on fluorescent signals. It is a sub-window of the [Target selection GUI](#target-selection-gui) and can be opened via the `CLEM` button.

<img src="https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACEtomo_clem.png" alt="CLEM GUI" />

Please load your lamella EM map first as this will reset the CLEM window. After loading your lamella EM map, you can click `Find LM map` to load single channel PNG or TIF files.

After loading all your channels, you can adjust them separately using the Channel table on the left. Adjustments include color (R, G, B, W), where "W" will keep the original colors of the image, hiding the channel using the checkbox and thresholding using maximum and minimum sliders. The histogram indicates the currently set thresholds using orange lines.

To align EM and LM map, you can add registration points by left clicking on the respective maps. A minimum of 3 points is necessary to calculate the transformation matrix but more are possible. You can also drag existing registration points.

The `Transform` button will overlay the LM channels on the EM map. You can still adjust the thresholds and hide channels you don't want to see. If you close the CLEM window, the same overlay is also visible on the Target selection plot.

You can now proceed with normal target selection. When you load a new lamella EM map, all LM maps are cleared.

### Output

* SPACEtomo will create a subfolder, navigator file and log file for each grid. Any kind of montages and frames are saved according to SerialEM settings.
* All images processed by SPACEtomo and results are saved to a *SPACE_maps* folder OR to the folder specified as `external_map_dir` for the SPACEtomo run.
    * Images and montage maps are rescaled to the pixel size of the respective models and saved as PNG images with accompanying *.json* files containing meta data.
    * Lamella bounding boxes are saved in **_boxes.json* files.
    * Target coordinates are saved in **_points.json* files.
    * Segmentation files are saved with the suffix *_seg* for each MM map. Each segmentation inference produces a **_SPACE.log* and a **_SPACE.err* file for debugging.
    * The *SPACE_runs.json* contains the processing jobs and queue.
* The *mic_params.json* and *tgt_params.json* files are necessary to schedule the inference jobs and run the target selection GUI.
* The *SPACEtomo_settings.ini* file contains the settings for the run.
* The *_tgts.txt* files are PACEtomo targets files that are used for acquisition. 
* Tilt series are output as specified by your SerialEM and PACEtomo settings.

### External processing

Depending on your setup, the GPU on the computer running SerialEM might not be powerful enough or not even present. On some systems the OS might also be too old to run some of the required Python packages. In these cases you can install the minimal environment on the SerialEM computer and run most processing steps on an external GPU machine.

To process on an external machine you can specify an `external_map_dir` in the [settings](#settings) of the [SPACEtomo_run.py](https://github.com/eisfabian/SPACEtomo/tree/main/SPACEtomo/SerialEM_scripts/SPACEtomo_run.py) script. This directory has to be accessible via the network both by the computer running SerialEM and by the external GPU machine.

The external GPU machine requires the same Python packages (full environment) as described [above](#installation) but no SerialEM. Before starting the SPACEtomo run in SerialEM, you can then simply activate the conda environment and run the monitor script:

	source <path_to_your_venv>/bin/activate
	SPACEmonitor --dir <path_to_external_map_dir> --gpu <comma-separated_list_of_GPUs>

The monitor script will check the map dir periodically, queue any maps to be analyzed, save the segmentation to the same directory and run the target selection algorithms.

SPACEtomo on the SerialEM computer will keep checking the map dir for new coordinate files and setup the targets when appropriate. For inspection of the maps and targets you can run the `SPACEtomo targets <path_to_external_map_dir>` command as described [above](#target-selection-gui) either on the SerialEM computer or on the external machine.

## Video Tutorials

[![SPACE-tomo: Target Selection GUI](https://github.com/eisfabian/SPACEtomo/raw/main/img/SPACE_tut_thumbnail_tgt.png)](https://www.youtube.com/watch?v=I5yvi0sUGG4)

More coming as soon as possible!

## Troubleshooting

In general, if you run into any crashes or problems, please turn on debug output using `SPACEconfig debug` in a command prompt with activated SPACEtomo virtual environment. Then run SPACEtomo again and include the SerialEM log file when you report the issue!

Here are some common problems that might occur:

- The lamella MM map has a stitching error (e.g. one tile duplicated to a different spot). Use the `Reacquire` option in the GUI and check `Just restitch map`. SPACEtomo will attempt to restitch the map on the next run.
- In case your lamella montages don't stitch properly, you might need to experiment with the SerialEM montage settings and with the overlap factors in the SPACEtomo config. Redoing the *High Defocus Mag* calibration might also help.
- If SPACEtomo freezes or crashes when loading an image from the SerialEM buffer, please try just running it again. This issue should be fixed in the latest SerialEM 4.2beta+.
- If you get an error saying something like `unexpected keyword argument 'perform_everything_on_XXX`:
  - nnUNet changed the name of the argument recently from `perform_everything_on_gpu` to `perform_everything_on_device`.
  - Please try to change it accordingly in the *SPACEtomo_nnUNet.py* script (SPACEtomo v1.1) and try running it again.
- If your tilt series are off target, check if your Record and View mag are aligned in the used image state and consider doing the "High-Defocus IS" calibration for your View mag.
- If your lamella is not in the field of view when switching between low mag and intermediate mag or between intermediate mag and View mag, redo the "Mag IS Offsets" calibrations.
- If SerialEM terminates the script with a montage error concerning an exceeded limit in the Script Control, go to *Scripts* > *Controls* and remove any limits that cause the script to terminate.
- If SPACEtomo does not detect any lamellae although lamellae are clearly visible on your WG map, try collecting the map with the energy filter slit in to improve contrast. Please also consider sharing your WG maps with me so I can further improve the lamella detection model!
- If the Navigator keeps asking you to save, check your *SEMshortTermCal.txt*. If there is a line starting with `NavAutosave`, delete it.
- To be continued...

### Contact

If you could not resolve the issue yourself or you encountered a bug, please report it to the [GitHub Issues](https://github.com/eisfabian/SPACEtomo/issues) page or send an email to [spacetomo.help@gmail.com](mailto:spacetomo.help@gmail.com).

## Recent Changes

### Version 1.3 (27.03.2025)
- GUI improvements and bug fixes.
- Reacquisition options of MM maps (e.g. after ice contamination removal).
- Target selection GUI on manually collected montages. (Can be used instead of PACEtomo_selectTargets script.)
- Hole pattern recognition based on autocorrelation peaks.
- Dense pattern target setup optimizing for targets per area using polygon boundary.
- Setup for non-lamellae samples with grid pattern recognition based on autocorrelation peaks.
- More robust centering of MM montages using cross-correlation alignment between mags (thanks to SerialEM 4.2).
- Grid reloading and realignment for multigrid target setup (beta).
- Support for Glacios instruments.
- Lots of bug fixes.
- Minor text fixes.

### Version 1.2 (21.11.2024)
- New lamella detection model trained on 3x the training data of the first model.
- New lamella detection GUI allowing for inspection and manual intervention.
- Improved target selection GUI:
    - Added options for multiple target areas.
    - Added acquisition settings to override PACEtomo settings.
    - Sped up map loading by ~30%.
    - Added basic fluorescence map loading, registration and overlay for targeting.
- Added command line interface to manage models, open GUIs and monitor folder for external processing.
- Refactored most code to facilitate deployment as Python package.
- Lots of bug fixes and quality of life improvements.

### Version 1.1 (12.04.2024)
- Refactored most code to run on external machine and only run SerialEM dependent steps on microscope machine.
- Added GUI for target selection and inspection.
- Allowed for manual target selection.
- Allowed for inspection of targets before acquisition.
- Added multi-grid acquisition.
- Added splitting of collection areas when lamella too big for all targets to be accommodated within image shift limits.
- Added multi GPU support for external processing.
- Made rudimentary interface for training new segmentation models.
- Lots of bug fixes.
- Minor text fixes.

### Version 1.0 (15.12.2023)
Release!

## Future Plans

- Segmentation models for Chlamydomonas and eukaryotic cells
- Better framework for training your own models
- To be continued... (Let me know if you have wishes or ideas!)

## Training Data

[SPACEtomo training dataset for lamella detection using YOLOv8](https://doi.org/10.5281/zenodo.10360315)

[SPACEtomo training dataset for Yeast lamella map segmentation using nnU-Netv2](https://doi.org/10.5281/zenodo.10360344)

The segmentation models are based on [nnU-Net](https://github.com/MIC-DKFZ/nnUNet). To train a new model you will need an image file and a segmentation file with a particular pixel value for each class. You can find further instructions [here](https://github.com/MIC-DKFZ/nnUNet/blob/master/documentation/dataset_format.md).

The SPACEtomo training interface (*SPACEtomo TI*) is a rudimentary interface for training your own model using a human-in-the-loop approach. You can find instructions [here](https://github.com/eisfabian/SPACEtomo/blob/main/docs/SPACEtomo_TI.md).

The interface will guide you through data preparation from lamella maps in .mrc format, conversion to .png files for each class and training of the model in an iterative fashion. However, the actual labeling requires external graphics editing software like *Adobe Photoshop*, [GIMP](https://www.gimp.org/) or [Napari](https://napari.org/).

For my training set, I used Photoshop to segment different classes on different layers by hand. Why Photoshop? My main reason was the support for comfortable labeling using a drawing tablet with pressure sensitivity. I saved each layer as png file separately and used a Python script to combine these images into a single segmentation image.
Another script would take the segmentation and output layer images that I could then edit and refine in Photoshop for retraining.

I also want to mention [OpenFIBSEM](https://demarcolab.github.io/openfibsem-docs/autolamella/ml/), which includes a Napari-based labelling workflow that can be adapted for nnU-Net. This workflow can make use of general segmentation models for assisted labeling.

## Acknowledgements

I want to thank all the people who provided training data for the deep learning models:
- Anna Bieber (MPI Martinsried)
- Cristina Capitanio (MPI Martinsried)
- Matthias Pöge (MPI Martinsried)
- Sven Klumpe (MPI Martinsried)
- Gregor Weiss (ETH Zurich)
- Yoshiyuki Fukuda (Tokushima University / University of Tokyo)
- Helena Watson (Rosalind Franklin Institute)
- Corina Hadjicharalambous (ETH Zurich)
- Jannik Hugener (ETH Zurich)
- Karolina Roganowicz(ETH Zurich)
- Lee Rettberg (ETH Zurich)
- Miriam Weber (ETH Zurich)
- Marlen Petersen (ETH Zurich)
- Tobias Zachs (ETH Zurich)
- Vasil Gaisin (ETH Zurich)
- Yun-Wei Lien (ETH Zurich)

Special thanks to Pavel Afanasyev for guiding me on my way to stepping up my Python level.

Thanks to all the members of the Pilhofer lab who let me troubleshoot SPACEtomo on their samples!
I also want to thank Patrick Cleeve for his contributions and everyone who gave me feedback and gave SPACEtomo a try!
