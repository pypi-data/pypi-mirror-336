# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build & test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  UNIX_PYTHON_VERSIONS: 3.9 3.10 3.11 3.12 3.13 pypy3.10
  WINDOWS_PYTHON_VERSIONS: 3.9 3.10 3.11 3.12 3.13

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Build/install library
      run: |
        maturin build
        pip install target/wheels/*.whl
    - name: Test with pytest
      run: |
        pytest
    - name: Test documentation
      run: |
        pip install sphinx sphinx-rtd-theme
        make -C docs doctest
        make -C docs html
    - name: Test types
      uses: jpetrucciani/mypy-check@master
      with:
        requirements_file: "requirements-dev.txt"

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter ${{ env.UNIX_PYTHON_VERSIONS }}
          sccache: 'true'
          manylinux: auto

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --interpreter ${{ env.WINDOWS_PYTHON_VERSIONS }}
        sccache: 'true'
        manylinux: auto
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter ${{ env.UNIX_PYTHON_VERSIONS }}
          sccache: 'true'
  build-linux-musl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
          { target: "powerpc64le-unknown-linux-musl", image_tag: "powerpc64le-musl" },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v3
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.13'
      - name: Build wheels - linux-musl
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter ${{ env.UNIX_PYTHON_VERSIONS }}
          sccache: 'true'
          manylinux: musllinux_1_1
          container: off
