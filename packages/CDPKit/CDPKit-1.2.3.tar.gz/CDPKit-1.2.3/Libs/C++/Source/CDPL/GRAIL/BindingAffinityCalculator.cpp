/* 
 * BindingAffinityCalculator.cpp 
 *
 * This file is part of the Chemical Data Processing Toolkit
 *
 * Copyright (C) 2003 Thomas Seidel <thomas.seidel@univie.ac.at>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

 
#include "StaticInit.hpp"

#include "CDPL/GRAIL/BindingAffinityCalculator.hpp"
#include "CDPL/GRAIL/GRAILDescriptorCalculator.hpp"


using namespace CDPL;


namespace
{

    double PKI_COEFFS[] = {
        3.546551212606457, -0.0, -0.0, 0.0041002313916607466, -0.00012449106713635486, 0.0,
        0.12395409568362815, 0.26103792438168216, 0.0, 0.0, 0.15368226792426207,
        -0.17185462531798096, -0.14011347504357552, -0.058663494759660595, -0.022126521803059993, -0.1302690502370897,
        0.08859167971545924, 0.0, 0.04143642312458391, 0.0, 0.028648010632390777,
        -0.0, -0.04160551618271781, 0.06588634181384487, -0.13809779307881895, 0.0,
        -0.0, 0.010343781083820022, -0.010018214559483915, -0.19134501704201695, 0.09095027179887638,
        -0.00017005639771945524, 0.11030669671994649, -0.14848293703031495, 0.022831170393473054, -0.005885471557322143,
        0.000233854863044935, 0.0, 0.05788290137240315, 0.026152831377239946, -0.09147153073701897,
        -0.00817204071710497, -0.0, -0.0, 0.09811791729881847, 0.03487877401846085,
        0.0, 0.13916496560070205, 0.01250298122816641, -0.0, -0.0,
        -0.09136003244917676, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.5418803160144474, 0.0, 0.0,
        0.0, -0.0, -0.0, -0.0, -0.0,
        -0.10080745150996166, -0.0, 0.0, 0.0, -0.0,
        -0.0, 0.3566769189088472, 0.0, -0.0, -0.0,
        0.20109353749080597, 0.0, 0.0, -0.14397419504689613, -0.0,
        -0.0, 0.0, -0.0, 0.1195055018013472, 0.0,
        -0.0, -0.0, 0.0, 0.0, 0.0,
        -0.04229402344573758, 0.0, 0.0, 0.049918757394466766, 0.0,
        0.0, 0.0, -0.0, -0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        -0.0, -0.0, -0.0, -0.0, -0.0,
        -0.0, 0.0, 0.0, -0.0, -0.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, -0.0, -0.0, -0.0, -0.0,
        0.0, 0.0, -0.0, -0.0, -0.04309844835649805,
        -0.015875064023386613, -0.0, -0.0, 0.0, 0.0,
        0.0, 0.0, -0.0, -0.0, 0.0,
        0.0, 0.0, 0.03341454024670473, -0.07396694039130781, -0.08591491241883886,
        0.0, 0.0, -0.0, -0.18115964105709906, 0.0,
        0.0, -0.0, -0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, -0.0,
        -0.0, -0.0, -0.0, 0.0, 0.0,
        -0.0, -0.0, -0.0, -0.0, 0.0,
        0.0, 0.01708292889067203, 0.0, -0.003595801499266457, -0.0022370237655004216,
        -0.0338120999180287, -0.029381267046924387};

    double PKD_COEFFS[] = {
        3.547892451930223, -0.0, -0.11826588208641751, -0.1007635922996679, 0.016261281183032023, 0.0,
        0.01615625606392793, 0.0, 0.0, 0.1901589721474738, 0.1809701784994518,
        -0.11660158294178773, -0.15824040021065847, -0.054223693252787045, -0.021442126764686594, 0.07835434576383939,
        0.0, -0.0, 0.0, 0.4204445070799989, 0.04191146492731709,
        0.0, -0.0888363033698632, 0.16486274411291071, 0.07731180245487722, 0.15743599042892173,
        -0.0, 0.04009930034571795, -0.07977757897174177, -0.12920558803892657, 0.09946017535778003,
        -0.0018867611626654545, 0.09299075709204928, -0.13701544988752437, 0.0017225519697851466, 0.004928969045442666,
        0.0, 0.06758155773098155, 0.15843342034255264, -0.10383187205439474, 0.0,
        -0.033526787193738784, -0.0, -0.0, 0.057700607473799945, 0.0010095175592356883,
        0.0, 0.016210084345043795, 0.0018924190879125342, -0.0, 0.10928958057974457,
        -0.09077210157327975, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.5283744638871478, 0.0, -0.0,
        0.0, 0.0, 0.0, -0.0, -0.0,
        0.0, 0.0, 0.0, 0.0, -0.0,
        -0.0, 0.0, -0.0, -0.0, -0.0,
        -0.11301495478999193, -0.0014483095060371484, 0.04859543586522827, 0.0, -0.0,
        -0.0, 0.17454654048056784, 0.0, 0.04183337141804526, 0.22677699546952498,
        -0.0, -0.0, 0.0, 0.0, 0.06305483835849698,
        0.0, 0.0, 0.0, 0.025960254476383778, -0.0,
        0.11699703864406243, -0.04185887837468648, 0.0, 0.0, 0.0,
        0.0, -0.0, -0.0, -0.0, -0.0,
        0.0, 0.0, -0.0, -0.0, -0.0,
        -0.0, 0.0, 0.0, -0.0, -0.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, -0.0, -0.0, 0.0, 0.0,
        -0.0, -0.0, 0.0, 0.0, 0.0,
        0.0, -0.0, -0.0, -0.0, -0.0,
        -0.0, -0.0, -0.0, -0.0, -0.0,
        -0.0, 0.18224645721819172, -0.0, -0.0, -0.0,
        -0.0, -0.0, -0.0755924077088285, -0.0, 0.0,
        0.0, -0.0, -0.0, 0.0, -0.05663837506600509,
        0.06043486860934647, 0.0, -0.0, -0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, -0.0,
        -0.0, 0.0637189843135834, 0.0, -0.052057944730894014, 0.0836927380529977,
        -0.019494027686867876, -0.01548158485707414};

    double PKD_PKI_COEFFS[] = {
        3.4817627321455458, -0.030427329551924762, -0.09150967006794672, -0.0, 0.017764840395888746, 0.0,
        0.06396125708648713, 0.09822573267987951, 0.0, 0.010861783451750833, 0.22670373440323632,
        -0.13590252124791538, -0.20406954387649695, -0.06040278421961276, -0.020418016803246106, -0.025606342942074586,
        0.0, 0.0, 0.02646597017222191, 0.1463694826032496, 0.019391346960833285,
        0.0, -0.061747804819151174, 0.15533067924362629, -0.009790526314083649, 0.017524740732721016,
        -0.0, 0.026576421785439105, -0.04752087961046554, -0.1688082754723941, 0.07512603455712459,
        -0.001499797816132585, 0.1102747177030654, -0.14638121966413245, 0.01307186976858943, 0.008678914122936457,
        0.04289447095842839, 0.0, 0.08136009630122377, -0.036643157803025864, -0.0,
        -0.06939973837487542, -0.0, -0.0, 0.011779155401042034, 0.07950448708994408,
        0.0, 0.05202354694852554, 0.0, 0.0, 0.04603988040102995,
        -0.07790765335944357, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.5677466801167689, 0.0, -0.0,
        0.0, -0.0, -0.0, -0.0, -0.0,
        -0.054445361904356004, -0.0, 0.0, 0.0, -0.0,
        -0.0, 0.09360283352280015, -0.0, 0.0, 0.0,
        -0.0, -0.0, 0.0, -0.0, -0.0,
        -0.0, 0.03713536319666703, 0.0, 0.05293033851828125, 0.1348140018269932,
        -0.0, -0.0, 0.005155389919786161, 0.0, 0.0,
        -0.0, 0.0, 0.0, 0.021816084863391007, -0.0,
        0.04365144156989408, -0.0025127830129054976, 0.0, 0.0, 0.03790619615474575,
        0.0, 0.0, 0.0, -0.0, -0.0,
        -0.0, -0.0, -0.0, -0.0, -0.0,
        -0.0, 0.0, 0.0, -0.0, -0.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, -0.0, -0.0, 0.0, 0.0,
        -0.0, -0.0, 0.0, 0.0, -0.023918959991702095,
        -0.013973289147692204, -0.0, -0.0, -0.0, -0.0,
        -0.0, -0.0, -0.0, -0.0, -0.0,
        -0.0, 0.15286477620849995, 0.0, -0.05259242847021884, -0.01960762847115479,
        -0.0, -0.0, -0.09781131858932979, -0.033863308648411306, 0.0,
        0.0, -0.0, -0.0, 0.0, -0.0,
        0.0, 0.0, -0.0, -0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        -0.0, -0.0, -0.0, -0.0, 0.0,
        0.0, 0.07815811081595969, 0.0, -0.02421745107831543, 0.0,
        -0.027072344976378105, -0.023109879087685314
    };
}


double GRAIL::BindingAffinityCalculator::operator()(const Math::DVector& grail_descr, AffinityMeasure measure) const
{
    const double* coeffs;
    
    switch (measure) {

        case PKD:
            coeffs = PKD_COEFFS;
            break;

        case PKI:
            coeffs = PKI_COEFFS;
            break;

        case PKD_PKI:
            coeffs = PKD_PKI_COEFFS;
            break;

        default:
            return 0.0;
    }

    double aff = *(coeffs++);

    for (std::size_t i = 0; i < GRAILDescriptorCalculator::TOTAL_DESCRIPTOR_SIZE; i++)
        aff += grail_descr(i) * coeffs[i];
    
    return aff;
}
