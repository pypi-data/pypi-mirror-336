/* 
 * PenTest.cpp 
 *
 * This file is part of the Chemical Data Processing Toolkit
 *
 * Copyright (C) 2003 Thomas Seidel <thomas.seidel@univie.ac.at>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */


#include <boost/test/auto_unit_test.hpp>

#include "CDPL/Vis/Pen.hpp"
#include "CDPL/Vis/Color.hpp"


BOOST_AUTO_TEST_CASE(PenTest)
{
    using namespace CDPL;
    using namespace Vis;

    Pen p1;

    BOOST_CHECK(p1.getLineStyle() == Pen::SOLID_LINE);
    BOOST_CHECK(p1.getCapStyle() == Pen::ROUND_CAP);
    BOOST_CHECK(p1.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p1.getColor() == Color::BLACK);
    BOOST_CHECK(p1.getWidth() == 1.0);

    Pen p2(Pen::DASH_LINE);

    BOOST_CHECK(p2.getLineStyle() == Pen::DASH_LINE);
    BOOST_CHECK(p2.getCapStyle() == Pen::ROUND_CAP);
    BOOST_CHECK(p2.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p2.getColor() == Color::BLACK);
    BOOST_CHECK(p2.getWidth() == 1.0);

    Pen p3(Color::RED);

    BOOST_CHECK(p3.getLineStyle() == Pen::SOLID_LINE);
    BOOST_CHECK(p3.getCapStyle() == Pen::ROUND_CAP);
    BOOST_CHECK(p3.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p3.getColor() == Color::RED);
    BOOST_CHECK(p3.getWidth() == 1.0);

    Pen p4(Color::GREEN, -0.3);

    BOOST_CHECK(p4.getLineStyle() == Pen::SOLID_LINE);
    BOOST_CHECK(p4.getCapStyle() == Pen::ROUND_CAP);
    BOOST_CHECK(p4.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p4.getColor() == Color::GREEN);
    BOOST_CHECK(p4.getWidth() == 0.0);

    Pen p5(Color::GREEN, 0.31);

    BOOST_CHECK(p5.getLineStyle() == Pen::SOLID_LINE);
    BOOST_CHECK(p5.getCapStyle() == Pen::ROUND_CAP);
    BOOST_CHECK(p5.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p5.getColor() == Color::GREEN);
    BOOST_CHECK(p5.getWidth() == 0.31);

    Pen p6(Color::GREEN, 0.3, Pen::DASH_LINE);

    BOOST_CHECK(p6.getLineStyle() == Pen::DASH_LINE);
    BOOST_CHECK(p6.getCapStyle() == Pen::ROUND_CAP);
    BOOST_CHECK(p6.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p6.getColor() == Color::GREEN);
    BOOST_CHECK(p6.getWidth() == 0.3);

    Pen p7(Color::MAGENTA, 0.3, Pen::DOT_LINE, Pen::FLAT_CAP);

    BOOST_CHECK(p7.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p7.getCapStyle() == Pen::FLAT_CAP);
    BOOST_CHECK(p7.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p7.getColor() == Color::MAGENTA);
    BOOST_CHECK(p7.getWidth() == 0.3);

    Pen p8(Color::BLUE, 1.3, Pen::DASH_DOT_LINE, Pen::SQUARE_CAP, Pen::MITER_JOIN);

    BOOST_CHECK(p8.getLineStyle() == Pen::DASH_DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::SQUARE_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::MITER_JOIN);
    BOOST_CHECK(p8.getColor() == Color::BLUE);
    BOOST_CHECK(p8.getWidth() == 1.3);

//-----

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));

    p8.setLineStyle(Pen::DOT_LINE);

    BOOST_CHECK(p8.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::SQUARE_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::MITER_JOIN);
    BOOST_CHECK(p8.getColor() == Color::BLUE);
    BOOST_CHECK(p8.getWidth() == 1.3);

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));

    p8.setCapStyle(Pen::FLAT_CAP);

    BOOST_CHECK(p8.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::FLAT_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::MITER_JOIN);
    BOOST_CHECK(p8.getColor() == Color::BLUE);
    BOOST_CHECK(p8.getWidth() == 1.3);

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));

    p8.setJoinStyle(Pen::ROUND_JOIN);

    BOOST_CHECK(p8.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::FLAT_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p8.getColor() == Color::BLUE);
    BOOST_CHECK(p8.getWidth() == 1.3);

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));

    p8.setColor(Color::MAGENTA);

    BOOST_CHECK(p8.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::FLAT_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p8.getColor() == Color::MAGENTA);
    BOOST_CHECK(p8.getWidth() == 1.3);

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));

    p8.setWidth(-0.2);

    BOOST_CHECK(p8.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::FLAT_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p8.getColor() == Color::MAGENTA);
    BOOST_CHECK(p8.getWidth() == 0.0);

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));

    p8.setWidth(0.3);

    BOOST_CHECK(p8.getLineStyle() == Pen::DOT_LINE);
    BOOST_CHECK(p8.getCapStyle() == Pen::FLAT_CAP);
    BOOST_CHECK(p8.getJoinStyle() == Pen::ROUND_JOIN);
    BOOST_CHECK(p8.getColor() == Color::MAGENTA);
    BOOST_CHECK(p8.getWidth() == 0.3);

    BOOST_CHECK(p8 == p7);
    BOOST_CHECK(!(p8 != p7));

//-----

    BOOST_CHECK(p8 == p8);
    BOOST_CHECK(!(p8 != p8));

    p8 = p6;

    BOOST_CHECK(p8 == p6);
    BOOST_CHECK(!(p8 != p6));

    BOOST_CHECK(p8 != p7);
    BOOST_CHECK(!(p8 == p7));
    
    BOOST_CHECK(p6 != p7);
    BOOST_CHECK(!(p6 == p7));
}

