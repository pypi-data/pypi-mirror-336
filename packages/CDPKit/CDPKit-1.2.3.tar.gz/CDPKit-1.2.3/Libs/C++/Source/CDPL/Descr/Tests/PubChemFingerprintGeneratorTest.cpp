/* 
 * PubChemFingerprintGeneratorTest.cpp 
 *
 * This file is part of the Chemical Data Processing Toolkit
 *
 * Copyright (C) 2003 Thomas Seidel <thomas.seidel@univie.ac.at>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */


#include <sstream>

#include <boost/test/auto_unit_test.hpp>

#include "CDPL/Descr/PubChemFingerprintGenerator.hpp"
#include "CDPL/Chem/BasicMolecule.hpp"
#include "CDPL/Chem/MolecularGraphFunctions.hpp"
#include "CDPL/Chem/UtilityFunctions.hpp"
#include "CDPL/Util/BitSet.hpp"


namespace
{

    struct TestDataEntry
    {

        const char* smiles;
        const char* origFprint;
    };

    TestDataEntry TEST_DATA[] = {
        { "CC1C(C(CC(O1)OC2C(C(C(OC2OC3=C4C=C5C=C3OC6=C(C=C(C=C6)C(C(C(=O)NC(C(=O)NC5C(=O)NC7C8=CC(=C(C=C8)O)C9="
            "C(C=C(C=C9O)O)C(NC(=O)C(C(C1=CC(=C(O4)C=C1)Cl)O)NC7=O)C(=O)O)CC(=O)N)NC(=O)C(CC(C)C)NC)O)Cl)CO)O)O)(C)N)O", // Vancomycine
          "000000000000000000000000000000000000000000000000000001001000011000000000000001010011000000000000000000010"
          "000000000001001000011000000000000001010011000000000000000000010101110011111111110011111110111111111000000"
          "001110111111001101010000110111111100111010101000001111001101101110111001110111111100001111111001110111011"
          "111000000100011111000101110001100000010001000100010000000000101010010000000100000000000001000001000001000"
          "000000001100001001011100001000100000000010001000000000110000000000011010000010111000001001100111001000001"
          "100110001111011111011011000000000000000000000001000000001000010000000111100000000000000000000010101010000"
          "000000000000000000000000000000000000000000011000001100000110001011000101100000000000000000000000000000000"
          "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "00110000000000000011111111111111000001111" },
        { "C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N", // ATP
          "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "000000000000000000000000000000000000000000000000000000000000000000000000010000000000110000001111000001000"
          "000000011001011010000000000000011110000000100000010001001111000000000100001001100000010010000000001101011"
          "000001000010000010101000010100000001000000101010000000000001010000100010001000101101000000000100000001000"
          "000010010011010000110011000001000001000000101000010001110100000110010111111010000111110100000011000001110"
          "100110000111001110000001000000000000000001000001000000001000000000000111100000000000000000000001111110000"
          "000000110100000000000000000000000000000000000000000000000000000000000110100000000000000000000000010010001"
          "101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "00000000011000000001111011100111000000111" },
        { "C1C(=S)N(C2=C(C=C(C=C2)Cl)C(=N1)C3=CC=CC=C3F)CC(F)(F)F", // Quazepam
          "000000000000000000000000000000000000000000000000000000000001000000000000000000010000000010000000000000000"
          "000000000000000001000000000000000000010000000010000000000000000001110000000000110000000100001000111000000"
          "001001100010011000000000000000100000110000100000000010000101001100010011100100110000011010001010000011000"
          "010000000110010110011000010100000000000001000100010000000100001110000010000100000000000000000001000001000"
          "000000010001001000110001001001100000000100101000000000000000000000000110000010000001100001100001111000001"
          "101010000011010100000011000000000000000000000000000000000000011000001011100000000000000000000000001010000"
          "000000000000000000000000000000000000010000000000000000000000000011000001100000000000000000000000000000000"
          "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "00010001000000011100000001101111000000011" },
        { "C1C2=C(CS1(=O)=O)C=C(C=C2)N=CC3=C(NC4=C3C=C(C=C4)C5=CN=CO5)O", // LS3 ligand in 1KE7
          "000000000000000000000000000000000000000000000000000000000001001000000000000000001001000000000000000001000"
          "000000000000000001001000000000000000001001000000000000000001000101111001110011111001101100011101111000011"
          "001111100011111100010000110101100100110000100001000111010110001110111011010110101000111010011110110010001"
          "110000101110110011011011111101100001001001101100010000000011000100011011111100000001000001000101000011001"
          "011100010101111101110001011011100000000010101010100100110100110010011010011110010001100111101011000000111"
          "101110100011001100000011000000000000000000000001000000001000001000000111100000000000000000000011111110000"
          "000000110100000000000000000000000000000000000000000000000000000011000001100000000000000000100100011010001"
          "101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "00000001000000000000111001101111000000011" },
        { "C[S+](CCC(C(=O)[O-])N)CC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)O", // Adenosylmethionine
          "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101000001000"
          "000000011001111010000000000100011110000000100000010001001111000000000100001001100000110010010000001101011"
          "000001000010000010101000010101100001010000101010000000000011010000100010001000101101000000000100000001000"
          "000000011011010001111011000001000000000010101000100000110100000110010111111010001111111100001011000001110"
          "101110100111001111000001000000000000000000000001000000001000001000000111100000000000000000000001111110000"
          "000000110100000000000000000000000000000000000000000000000000000000000110100000000000000000000000010010001"
          "101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          "00000001000000000000111011100111000000111" }
    };
} // namespace


BOOST_AUTO_TEST_CASE(PubChemFingerprintGeneratorTest)
{
    using namespace CDPL;
    using namespace Descr;

    PubChemFingerprintGenerator fp_gen;
    Chem::BasicMolecule mol;
    Util::BitSet orig_fp;
    Util::BitSet gen_fp;
    
    for (auto& test_data : TEST_DATA) {
        BOOST_CHECK(parseSMILES(test_data.smiles, mol));

        calcBasicProperties(mol, false);

        std::istringstream iss(test_data.origFprint);

        BOOST_CHECK(iss >> orig_fp);
        BOOST_CHECK(orig_fp.size() == PubChemFingerprintGenerator::NUM_BITS);

        fp_gen.generate(mol, gen_fp);

        BOOST_CHECK(gen_fp.size() == PubChemFingerprintGenerator::NUM_BITS);
        
        for (std::size_t i = 0; i < PubChemFingerprintGenerator::NUM_BITS; i++)
            BOOST_CHECK_MESSAGE(orig_fp.test(i) == gen_fp.test(i),
                                "mismatch at bit #" << i << ": orig=" << orig_fp.test(i) << ", gen=" << gen_fp.test(i));
    }
}
