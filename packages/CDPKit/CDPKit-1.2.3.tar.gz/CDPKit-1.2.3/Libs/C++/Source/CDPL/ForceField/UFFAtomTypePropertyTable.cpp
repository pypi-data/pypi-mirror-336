/* 
 * UFFAtomTypePropertyTable.cpp 
 *
 * This file is part of the Chemical Data Processing Toolkit
 *
 * Copyright (C) 2003 Thomas Seidel <thomas.seidel@univie.ac.at>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

 
#include "StaticInit.hpp"

#include <mutex>
#include <functional>

#include "CDPL/ForceField/UFFAtomTypePropertyTable.hpp"


using namespace CDPL; 


namespace
{

    ForceField::UFFAtomTypePropertyTable::Entry DEF_ENTRIES[] = {
      { 1, "H_", 1, 0.3540000000E+00, 0.1800000000E+03, 0.2886000000E+01, 0.4400000000E-01, 0.1200000000E+02, 0.7120000000E+00 },
      { 2, "H_b", 1, 0.4600000000E+00, 0.8350000000E+02, 0.2886000000E+01, 0.4400000000E-01, 0.1200000000E+02, 0.7120000000E+00 },
      { 3, "He4+4", 2, 0.8490000000E+00, 0.9000000000E+02, 0.2362000000E+01, 0.5600000000E-01, 0.1524000000E+02, 0.9800000000E-01 },
      { 4, "Li", 3, 0.1336000000E+01, 0.1800000000E+03, 0.2451000000E+01, 0.2500000000E-01, 0.1200000000E+02, 0.1026000000E+01 },
      { 5, "Be3+2", 4, 0.1074000000E+01, 0.1094700000E+03, 0.2745000000E+01, 0.8500000000E-01, 0.1200000000E+02, 0.1565000000E+01 },
      { 6, "B_3", 5, 0.8380000000E+00, 0.1094700000E+03, 0.4083000000E+01, 0.1800000000E+00, 0.1205200000E+02, 0.1755000000E+01 },
      { 7, "B_2", 5, 0.8280000000E+00, 0.1200000000E+03, 0.4083000000E+01, 0.1800000000E+00, 0.1205200000E+02, 0.1755000000E+01 },
      { 8, "C_3", 6, 0.7570000000E+00, 0.1094700000E+03, 0.3851000000E+01, 0.1050000000E+00, 0.1273000000E+02, 0.1912000000E+01 },
      { 9, "C_R", 6, 0.7290000000E+00, 0.1200000000E+03, 0.3851000000E+01, 0.1050000000E+00, 0.1273000000E+02, 0.1912000000E+01 },
      { 10, "C_2", 6, 0.7320000000E+00, 0.1200000000E+03, 0.3851000000E+01, 0.1050000000E+00, 0.1273000000E+02, 0.1912000000E+01 },
      { 11, "C_1", 6, 0.7060000000E+00, 0.1800000000E+03, 0.3851000000E+01, 0.1050000000E+00, 0.1273000000E+02, 0.1912000000E+01 },
      { 12, "N_3", 7, 0.7000000000E+00, 0.1067000000E+03, 0.3660000000E+01, 0.6900000000E-01, 0.1340700000E+02, 0.2544000000E+01 },
      { 13, "N_R", 7, 0.6990000000E+00, 0.1200000000E+03, 0.3660000000E+01, 0.6900000000E-01, 0.1340700000E+02, 0.2544000000E+01 },
      { 14, "N_2", 7, 0.6850000000E+00, 0.1112000000E+03, 0.3660000000E+01, 0.6900000000E-01, 0.1340700000E+02, 0.2544000000E+01 },
      { 15, "N_1", 7, 0.6560000000E+00, 0.1800000000E+03, 0.3660000000E+01, 0.6900000000E-01, 0.1340700000E+02, 0.2544000000E+01 },
      { 16, "O_3", 8, 0.6580000000E+00, 0.1045100000E+03, 0.3500000000E+01, 0.6000000000E-01, 0.1408500000E+02, 0.2300000000E+01 },
      { 17, "O_3_z", 8, 0.5280000000E+00, 0.1460000000E+03, 0.3500000000E+01, 0.6000000000E-01, 0.1408500000E+02, 0.2300000000E+01 },
      { 18, "O_R", 8, 0.6800000000E+00, 0.1100000000E+03, 0.3500000000E+01, 0.6000000000E-01, 0.1408500000E+02, 0.2300000000E+01 },
      { 19, "O_2", 8, 0.6340000000E+00, 0.1200000000E+03, 0.3500000000E+01, 0.6000000000E-01, 0.1408500000E+02, 0.2300000000E+01 },
      { 20, "O_1", 8, 0.6390000000E+00, 0.1800000000E+03, 0.3500000000E+01, 0.6000000000E-01, 0.1408500000E+02, 0.2300000000E+01 },
      { 21, "F_", 9, 0.6680000000E+00, 0.1800000000E+03, 0.3364000000E+01, 0.5000000000E-01, 0.1476200000E+02, 0.1735000000E+01 },
      { 22, "Ne4+4", 10, 0.9200000000E+00, 0.9000000000E+02, 0.3243000000E+01, 0.4200000000E-01, 0.1544000000E+02, 0.1940000000E+00 },
      { 23, "Na", 11, 0.1539000000E+01, 0.1800000000E+03, 0.2983000000E+01, 0.3000000000E-01, 0.1200000000E+02, 0.1081000000E+01 },
      { 24, "Mg3+2", 12, 0.1421000000E+01, 0.1094700000E+03, 0.3021000000E+01, 0.1110000000E+00, 0.1200000000E+02, 0.1787000000E+01 },
      { 25, "Al3", 13, 0.1244000000E+01, 0.1094700000E+03, 0.4499000000E+01, 0.5050000000E+00, 0.1127800000E+02, 0.1792000000E+01 },
      { 26, "Si3", 14, 0.1117000000E+01, 0.1094700000E+03, 0.4295000000E+01, 0.4020000000E+00, 0.1217500000E+02, 0.2323000000E+01 },
      { 27, "P_3+3", 15, 0.1101000000E+01, 0.9380000000E+02, 0.4147000000E+01, 0.3050000000E+00, 0.1307200000E+02, 0.2863000000E+01 },
      { 28, "P_3+5", 15, 0.1056000000E+01, 0.1094700000E+03, 0.4147000000E+01, 0.3050000000E+00, 0.1307200000E+02, 0.2863000000E+01 },
      { 29, "P_3+q", 15, 0.1056000000E+01, 0.1094700000E+03, 0.4147000000E+01, 0.3050000000E+00, 0.1307200000E+02, 0.2863000000E+01 },
      { 30, "S_3+2", 16, 0.1064000000E+01, 0.9210000000E+02, 0.4035000000E+01, 0.2740000000E+00, 0.1396900000E+02, 0.2703000000E+01 },
      { 31, "S_3+4", 16, 0.1049000000E+01, 0.1032000000E+03, 0.4035000000E+01, 0.2740000000E+00, 0.1396900000E+02, 0.2703000000E+01 },
      { 32, "S_3+6", 16, 0.1027000000E+01, 0.1094700000E+03, 0.4035000000E+01, 0.2740000000E+00, 0.1396900000E+02, 0.2703000000E+01 },
      { 33, "S_R", 16, 0.1077000000E+01, 0.9220000000E+02, 0.4035000000E+01, 0.2740000000E+00, 0.1396900000E+02, 0.2703000000E+01 },
      { 34, "S_2", 16, 0.8540000000E+00, 0.1200000000E+03, 0.4035000000E+01, 0.2740000000E+00, 0.1396900000E+02, 0.2703000000E+01 },
      { 35, "Cl", 17, 0.1044000000E+01, 0.1800000000E+03, 0.3947000000E+01, 0.2270000000E+00, 0.1486600000E+02, 0.2348000000E+01 },
      { 36, "Ar4+4", 18, 0.1032000000E+01, 0.9000000000E+02, 0.3868000000E+01, 0.1850000000E+00, 0.1576300000E+02, 0.3000000000E+00 },
      { 37, "K_", 19, 0.1953000000E+01, 0.1800000000E+03, 0.3812000000E+01, 0.3500000000E-01, 0.1200000000E+02, 0.1165000000E+01 },
      { 38, "Ca6+2", 20, 0.1761000000E+01, 0.9000000000E+02, 0.3399000000E+01, 0.2380000000E+00, 0.1200000000E+02, 0.2141000000E+01 },
      { 39, "Sc3+3", 21, 0.1513000000E+01, 0.1094700000E+03, 0.3295000000E+01, 0.1900000000E-01, 0.1200000000E+02, 0.2592000000E+01 },
      { 40, "Ti3+4", 22, 0.1412000000E+01, 0.1094700000E+03, 0.3175000000E+01, 0.1700000000E-01, 0.1200000000E+02, 0.2659000000E+01 },
      { 41, "Ti6+4", 22, 0.1412000000E+01, 0.9000000000E+02, 0.3175000000E+01, 0.1700000000E-01, 0.1200000000E+02, 0.2659000000E+01 },
      { 42, "V_3+5", 23, 0.1402000000E+01, 0.1094700000E+03, 0.3144000000E+01, 0.1600000000E-01, 0.1200000000E+02, 0.2679000000E+01 },
      { 43, "Cr6+3", 24, 0.1345000000E+01, 0.9000000000E+02, 0.3023000000E+01, 0.1500000000E-01, 0.1200000000E+02, 0.2463000000E+01 },
      { 44, "Mn6+2", 25, 0.1382000000E+01, 0.9000000000E+02, 0.2961000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.2430000000E+01 },
      { 45, "Fe3+2", 26, 0.1270000000E+01, 0.1094700000E+03, 0.2912000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.2430000000E+01 },
      { 46, "Fe6+2", 26, 0.1335000000E+01, 0.9000000000E+02, 0.2912000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.2430000000E+01 },
      { 47, "Co6+3", 27, 0.1241000000E+01, 0.9000000000E+02, 0.2872000000E+01, 0.1400000000E-01, 0.1200000000E+02, 0.2430000000E+01 },
      { 48, "Ni4+2", 28, 0.1164000000E+01, 0.9000000000E+02, 0.2834000000E+01, 0.1500000000E-01, 0.1200000000E+02, 0.2430000000E+01 },
      { 49, "Cu3+1", 29, 0.1302000000E+01, 0.1094700000E+03, 0.3495000000E+01, 0.5000000000E-02, 0.1200000000E+02, 0.1756000000E+01 },
      { 50, "Zn3+2", 30, 0.1193000000E+01, 0.1094700000E+03, 0.2763000000E+01, 0.1240000000E+00, 0.1200000000E+02, 0.1308000000E+01 },
      { 51, "Ga3+3", 31, 0.1260000000E+01, 0.1094700000E+03, 0.4383000000E+01, 0.4150000000E+00, 0.1100000000E+02, 0.1821000000E+01 },
      { 52, "Ge3", 32, 0.1197000000E+01, 0.1094700000E+03, 0.4280000000E+01, 0.3790000000E+00, 0.1200000000E+02, 0.2789000000E+01 },
      { 53, "As3+3", 33, 0.1211000000E+01, 0.9210000000E+02, 0.4230000000E+01, 0.3090000000E+00, 0.1300000000E+02, 0.2864000000E+01 },
      { 54, "Se3+2", 34, 0.1190000000E+01, 0.9060000000E+02, 0.4205000000E+01, 0.2910000000E+00, 0.1400000000E+02, 0.2764000000E+01 },
      { 55, "Br", 35, 0.1192000000E+01, 0.1800000000E+03, 0.4189000000E+01, 0.2510000000E+00, 0.1500000000E+02, 0.2519000000E+01 },
      { 56, "Kr4+4", 36, 0.1147000000E+01, 0.9000000000E+02, 0.4141000000E+01, 0.2200000000E+00, 0.1600000000E+02, 0.4520000000E+00 },
      { 57, "Rb", 37, 0.2260000000E+01, 0.1800000000E+03, 0.4114000000E+01, 0.4000000000E-01, 0.1200000000E+02, 0.1592000000E+01 },
      { 58, "Sr6+2", 38, 0.2052000000E+01, 0.9000000000E+02, 0.3641000000E+01, 0.2350000000E+00, 0.1200000000E+02, 0.2449000000E+01 },
      { 59, "Y_3+3", 39, 0.1698000000E+01, 0.1094700000E+03, 0.3345000000E+01, 0.7200000000E-01, 0.1200000000E+02, 0.3257000000E+01 },
      { 60, "Zr3+4", 40, 0.1564000000E+01, 0.1094700000E+03, 0.3124000000E+01, 0.6900000000E-01, 0.1200000000E+02, 0.3667000000E+01 },
      { 61, "Nb3+5", 41, 0.1473000000E+01, 0.1094700000E+03, 0.3165000000E+01, 0.5900000000E-01, 0.1200000000E+02, 0.3618000000E+01 },
      { 62, "Mo6+6", 42, 0.1467000000E+01, 0.9000000000E+02, 0.3052000000E+01, 0.5600000000E-01, 0.1200000000E+02, 0.3400000000E+01 },
      { 63, "Mo3+6", 42, 0.1484000000E+01, 0.1094700000E+03, 0.3052000000E+01, 0.5600000000E-01, 0.1200000000E+02, 0.3400000000E+01 },
      { 64, "Tc6+5", 43, 0.1322000000E+01, 0.9000000000E+02, 0.2998000000E+01, 0.4800000000E-01, 0.1200000000E+02, 0.3400000000E+01 },
      { 65, "Ru6+2", 44, 0.1478000000E+01, 0.9000000000E+02, 0.2963000000E+01, 0.5600000000E-01, 0.1200000000E+02, 0.3400000000E+01 },
      { 66, "Rh6+3", 45, 0.1332000000E+01, 0.9000000000E+02, 0.2929000000E+01, 0.5300000000E-01, 0.1200000000E+02, 0.3508000000E+01 },
      { 67, "Pd4+2", 46, 0.1338000000E+01, 0.9000000000E+02, 0.2899000000E+01, 0.4800000000E-01, 0.1200000000E+02, 0.3210000000E+01 },
      { 68, "Ag1+1", 47, 0.1386000000E+01, 0.1800000000E+03, 0.3148000000E+01, 0.3600000000E-01, 0.1200000000E+02, 0.1956000000E+01 },
      { 69, "Cd3+2", 48, 0.1403000000E+01, 0.1094700000E+03, 0.2848000000E+01, 0.2280000000E+00, 0.1200000000E+02, 0.1650000000E+01 },
      { 70, "In3+3", 49, 0.1459000000E+01, 0.1094700000E+03, 0.4463000000E+01, 0.5990000000E+00, 0.1100000000E+02, 0.2070000000E+01 },
      { 71, "Sn3", 50, 0.1398000000E+01, 0.1094700000E+03, 0.4392000000E+01, 0.5670000000E+00, 0.1200000000E+02, 0.2961000000E+01 },
      { 72, "Sb3+3", 51, 0.1407000000E+01, 0.9160000000E+02, 0.4420000000E+01, 0.4490000000E+00, 0.1300000000E+02, 0.2704000000E+01 },
      { 73, "Te3+2", 52, 0.1386000000E+01, 0.9025000000E+02, 0.4470000000E+01, 0.3980000000E+00, 0.1400000000E+02, 0.2882000000E+01 },
      { 74, "I_", 53, 0.1382000000E+01, 0.1800000000E+03, 0.4500000000E+01, 0.3390000000E+00, 0.1500000000E+02, 0.2650000000E+01 },
      { 75, "Xe4+4", 54, 0.1267000000E+01, 0.9000000000E+02, 0.4404000000E+01, 0.3320000000E+00, 0.1200000000E+02, 0.5560000000E+00 },
      { 76, "Cs", 55, 0.2570000000E+01, 0.1800000000E+03, 0.4517000000E+01, 0.4500000000E-01, 0.1200000000E+02, 0.1573000000E+01 },
      { 77, "Ba6+2", 56, 0.2277000000E+01, 0.9000000000E+02, 0.3703000000E+01, 0.3640000000E+00, 0.1200000000E+02, 0.2727000000E+01 },
      { 78, "La3+3", 57, 0.1943000000E+01, 0.1094700000E+03, 0.3522000000E+01, 0.1700000000E-01, 0.1200000000E+02, 0.3300000000E+01 },
      { 79, "Ce6+3", 58, 0.1841000000E+01, 0.9000000000E+02, 0.3556000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.3300000000E+01 },
      { 80, "Pr6+3", 59, 0.1823000000E+01, 0.9000000000E+02, 0.3606000000E+01, 0.1000000000E-01, 0.1200000000E+02, 0.3300000000E+01 },
      { 81, "Nd6+3", 60, 0.1816000000E+01, 0.9000000000E+02, 0.3575000000E+01, 0.1000000000E-01, 0.1200000000E+02, 0.3300000000E+01 },
      { 82, "Pm6+3", 61, 0.1801000000E+01, 0.9000000000E+02, 0.3547000000E+01, 0.9000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 83, "Sm6+3", 62, 0.1780000000E+01, 0.9000000000E+02, 0.3520000000E+01, 0.8000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 84, "Eu6+3", 63, 0.1771000000E+01, 0.9000000000E+02, 0.3493000000E+01, 0.8000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 85, "Gd6+3", 64, 0.1735000000E+01, 0.9000000000E+02, 0.3368000000E+01, 0.9000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 86, "Tb6+3", 65, 0.1732000000E+01, 0.9000000000E+02, 0.3451000000E+01, 0.7000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 87, "Dy6+3", 66, 0.1710000000E+01, 0.9000000000E+02, 0.3428000000E+01, 0.7000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 88, "Ho6+3", 67, 0.1696000000E+01, 0.9000000000E+02, 0.3409000000E+01, 0.7000000000E-02, 0.1200000000E+02, 0.3416000000E+01 },
      { 89, "Er6+3", 68, 0.1673000000E+01, 0.9000000000E+02, 0.3391000000E+01, 0.7000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 90, "Tm6+3", 69, 0.1660000000E+01, 0.9000000000E+02, 0.3374000000E+01, 0.6000000000E-02, 0.1200000000E+02, 0.3300000000E+01 },
      { 91, "Yb6+3", 70, 0.1637000000E+01, 0.9000000000E+02, 0.3355000000E+01, 0.2280000000E+00, 0.1200000000E+02, 0.2618000000E+01 },
      { 92, "Lu6+3", 71, 0.1671000000E+01, 0.9000000000E+02, 0.3640000000E+01, 0.4100000000E-01, 0.1200000000E+02, 0.3271000000E+01 },
      { 93, "Hf3+4", 72, 0.1611000000E+01, 0.1094700000E+03, 0.3141000000E+01, 0.7200000000E-01, 0.1200000000E+02, 0.3921000000E+01 },
      { 94, "Ta3+5", 73, 0.1511000000E+01, 0.1094700000E+03, 0.3170000000E+01, 0.8100000000E-01, 0.1200000000E+02, 0.4075000000E+01 },
      { 95, "W_6+6", 74, 0.1392000000E+01, 0.9000000000E+02, 0.3069000000E+01, 0.6700000000E-01, 0.1200000000E+02, 0.3700000000E+01 },
      { 96, "W_3+4", 74, 0.1526000000E+01, 0.1094700000E+03, 0.3069000000E+01, 0.6700000000E-01, 0.1200000000E+02, 0.3700000000E+01 },
      { 97, "W_3+6", 74, 0.1380000000E+01, 0.1094700000E+03, 0.3069000000E+01, 0.6700000000E-01, 0.1200000000E+02, 0.3700000000E+01 },
      { 98, "Re6+5", 75, 0.1372000000E+01, 0.9000000000E+02, 0.2954000000E+01, 0.6600000000E-01, 0.1200000000E+02, 0.3700000000E+01 },
      { 99, "Re3+7", 75, 0.1314000000E+01, 0.1094700000E+03, 0.2954000000E+01, 0.6600000000E-01, 0.1200000000E+02, 0.3700000000E+01 },
      { 100, "Os6+6", 76, 0.1372000000E+01, 0.9000000000E+02, 0.3120000000E+01, 0.3700000000E-01, 0.1200000000E+02, 0.3700000000E+01 },
      { 101, "Ir6+3", 77, 0.1371000000E+01, 0.9000000000E+02, 0.2840000000E+01, 0.7300000000E-01, 0.1200000000E+02, 0.3731000000E+01 },
      { 102, "Pt4+2", 78, 0.1364000000E+01, 0.9000000000E+02, 0.2754000000E+01, 0.8000000000E-01, 0.1200000000E+02, 0.3382000000E+01 },
      { 103, "Au4+3", 79, 0.1262000000E+01, 0.9000000000E+02, 0.3293000000E+01, 0.3900000000E-01, 0.1200000000E+02, 0.2625000000E+01 },
      { 104, "Hg1+2", 80, 0.1340000000E+01, 0.1800000000E+03, 0.2705000000E+01, 0.3850000000E+00, 0.1200000000E+02, 0.1750000000E+01 },
      { 105, "Tl3+3", 81, 0.1518000000E+01, 0.1200000000E+03, 0.4347000000E+01, 0.6800000000E+00, 0.1100000000E+02, 0.2068000000E+01 },
      { 106, "Pb3", 82, 0.1459000000E+01, 0.1094700000E+03, 0.4297000000E+01, 0.6630000000E+00, 0.1200000000E+02, 0.2846000000E+01 },
      { 107, "Bi3+3", 83, 0.1512000000E+01, 0.9000000000E+02, 0.4370000000E+01, 0.5180000000E+00, 0.1300000000E+02, 0.2470000000E+01 },
      { 108, "Po3+2", 84, 0.1500000000E+01, 0.9000000000E+02, 0.4709000000E+01, 0.3250000000E+00, 0.1400000000E+02, 0.2330000000E+01 },
      { 109, "At", 85, 0.1545000000E+01, 0.1800000000E+03, 0.4750000000E+01, 0.2840000000E+00, 0.1500000000E+02, 0.2240000000E+01 },
      { 110, "Rn4+4", 86, 0.1420000000E+01, 0.9000000000E+02, 0.4765000000E+01, 0.2480000000E+00, 0.1600000000E+02, 0.5830000000E+00 },
      { 111, "Fr", 87, 0.2880000000E+01, 0.1800000000E+03, 0.4900000000E+01, 0.5000000000E-01, 0.1200000000E+02, 0.1847000000E+01 },
      { 112, "Ra6+2", 88, 0.2512000000E+01, 0.9000000000E+02, 0.3677000000E+01, 0.4040000000E+00, 0.1200000000E+02, 0.2920000000E+01 },
      { 113, "Ac6+3", 89, 0.1983000000E+01, 0.9000000000E+02, 0.3478000000E+01, 0.3300000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 114, "Th6+4", 90, 0.1721000000E+01, 0.9000000000E+02, 0.3396000000E+01, 0.2600000000E-01, 0.1200000000E+02, 0.4202000000E+01 },
      { 115, "Pa6+4", 91, 0.1711000000E+01, 0.9000000000E+02, 0.3424000000E+01, 0.2200000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 116, "U_6+4", 92, 0.1684000000E+01, 0.9000000000E+02, 0.3395000000E+01, 0.2200000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 117, "Np6+4", 93, 0.1666000000E+01, 0.9000000000E+02, 0.3424000000E+01, 0.1900000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 118, "Pu6+4", 94, 0.1657000000E+01, 0.9000000000E+02, 0.3424000000E+01, 0.1600000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 119, "Am6+4", 95, 0.1660000000E+01, 0.9000000000E+02, 0.3381000000E+01, 0.1400000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 120, "Cm6+3", 96, 0.1801000000E+01, 0.9000000000E+02, 0.3326000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 121, "Bk6+3", 97, 0.1761000000E+01, 0.9000000000E+02, 0.3339000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 122, "Cf6+3", 98, 0.1750000000E+01, 0.9000000000E+02, 0.3313000000E+01, 0.1300000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 123, "Es6+3", 99, 0.1724000000E+01, 0.9000000000E+02, 0.3299000000E+01, 0.1200000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 124, "Fm6+3", 100, 0.1712000000E+01, 0.9000000000E+02, 0.3286000000E+01, 0.1200000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 125, "Md6+3", 101, 0.1689000000E+01, 0.9000000000E+02, 0.3274000000E+01, 0.1100000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 126, "No6+3", 102, 0.1679000000E+01, 0.9000000000E+02, 0.3248000000E+01, 0.1100000000E-01, 0.1200000000E+02, 0.3900000000E+01 },
      { 127, "Lr6+3", 103, 0.1698000000E+01, 0.9000000000E+02, 0.3236000000E+01, 0.1100000000E-01, 0.1200000000E+02, 0.3900000000E+01 } };

    ForceField::UFFAtomTypePropertyTable::SharedPointer builtinTable(new ForceField::UFFAtomTypePropertyTable());

    std::once_flag initBuiltinTableFlag;

    void initBuiltinTable() 
    {
        builtinTable->loadDefaults();
    }

    const ForceField::UFFAtomTypePropertyTable::Entry NOT_FOUND;
}


ForceField::UFFAtomTypePropertyTable::SharedPointer ForceField::UFFAtomTypePropertyTable::defaultTable = builtinTable;


ForceField::UFFAtomTypePropertyTable::Entry::Entry():
    atomType(0), atomTypeSym(), atomicNo(0), bondRadius(0.0), bondAngle(0.0), vdwDistance(0.0),
    vdwEnergy(0.0), vdwScale(0.0), effCharge(0.0), initialized(false)
{}

ForceField::UFFAtomTypePropertyTable::Entry::Entry(unsigned int atom_type, const std::string& atom_type_sym, unsigned int atomic_no, double bond_rad, 
                                                   double bond_ang, double vdw_dist, double vdw_energy, double vdw_scale, double eff_charge):
    atomType(atom_type), atomTypeSym(atom_type_sym), atomicNo(atomic_no), bondRadius(bond_rad), bondAngle(bond_ang), vdwDistance(vdw_dist),
    vdwEnergy(vdw_energy), vdwScale(vdw_scale), effCharge(0.0), initialized(true)
{}

unsigned int ForceField::UFFAtomTypePropertyTable::Entry::getAtomType() const
{
    return atomType;
}

unsigned int ForceField::UFFAtomTypePropertyTable::Entry::getAtomicNumber() const
{
    return atomicNo;
}

const std::string& ForceField::UFFAtomTypePropertyTable::Entry::getAtomTypeSymbol() const
{
    return atomTypeSym;
}

double ForceField::UFFAtomTypePropertyTable::Entry::getBondRadius() const
{
    return bondRadius;
}

double ForceField::UFFAtomTypePropertyTable::Entry::getBondAngle() const
{
    return bondAngle;
}

double ForceField::UFFAtomTypePropertyTable::Entry::getVdWDistance() const
{
    return vdwDistance;
}

double ForceField::UFFAtomTypePropertyTable::Entry::getVdWEnergy() const
{
    return vdwEnergy;
}

double ForceField::UFFAtomTypePropertyTable::Entry::getVdWScale() const
{
    return vdwScale;
}

double ForceField::UFFAtomTypePropertyTable::Entry::getEffectiveCharge() const
{
    return effCharge;
}

ForceField::UFFAtomTypePropertyTable::Entry::operator bool() const
{
    return initialized;
}


ForceField::UFFAtomTypePropertyTable::UFFAtomTypePropertyTable()
{}

void ForceField::UFFAtomTypePropertyTable::addEntry(unsigned int atom_type, const std::string& atom_type_sym, unsigned int atomic_no, double bond_rad, 
                                                    double bond_ang, double vdw_dist, double vdw_energy, double vdw_scale, double eff_charge)
{
    entries.insert(DataStorage::value_type(atom_type, Entry(atom_type, atom_type_sym, atomic_no, bond_rad, 
                                                            bond_ang, vdw_dist, vdw_energy, vdw_scale, eff_charge)));
}

const ForceField::UFFAtomTypePropertyTable::Entry& ForceField::UFFAtomTypePropertyTable::getEntry(unsigned int atom_type) const
{
    DataStorage::const_iterator it = entries.find(atom_type);

    if (it == entries.end())
        return NOT_FOUND;

    return it->second;
}

std::size_t ForceField::UFFAtomTypePropertyTable::getNumEntries() const
{
    return entries.size();
}

void ForceField::UFFAtomTypePropertyTable::clear()
{
    entries.clear();
}

bool ForceField::UFFAtomTypePropertyTable::removeEntry(unsigned int atom_type)
{
    return entries.erase(atom_type);
}

ForceField::UFFAtomTypePropertyTable::EntryIterator 
ForceField::UFFAtomTypePropertyTable::removeEntry(const EntryIterator& it)
{
    return EntryIterator(entries.erase(it.base()), std::bind<Entry&>(&DataStorage::value_type::second, std::placeholders::_1));
}

ForceField::UFFAtomTypePropertyTable::ConstEntryIterator 
ForceField::UFFAtomTypePropertyTable::getEntriesBegin() const
{
    return ConstEntryIterator(entries.begin(), std::bind(&DataStorage::value_type::second, std::placeholders::_1));
}

ForceField::UFFAtomTypePropertyTable::ConstEntryIterator 
ForceField::UFFAtomTypePropertyTable::getEntriesEnd() const
{
    return ConstEntryIterator(entries.end(), std::bind(&DataStorage::value_type::second, std::placeholders::_1));
}
    
ForceField::UFFAtomTypePropertyTable::EntryIterator 
ForceField::UFFAtomTypePropertyTable::getEntriesBegin()
{
    return EntryIterator(entries.begin(), std::bind<Entry&>(&DataStorage::value_type::second, std::placeholders::_1));
}

ForceField::UFFAtomTypePropertyTable::EntryIterator 
ForceField::UFFAtomTypePropertyTable::getEntriesEnd()
{
    return EntryIterator(entries.end(), std::bind<Entry&>(&DataStorage::value_type::second, std::placeholders::_1));
}

ForceField::UFFAtomTypePropertyTable::ConstEntryIterator 
ForceField::UFFAtomTypePropertyTable::begin() const
{
    return ConstEntryIterator(entries.begin(), std::bind(&DataStorage::value_type::second, std::placeholders::_1));
}

ForceField::UFFAtomTypePropertyTable::ConstEntryIterator 
ForceField::UFFAtomTypePropertyTable::end() const
{
    return ConstEntryIterator(entries.end(), std::bind(&DataStorage::value_type::second, std::placeholders::_1));
}
    
ForceField::UFFAtomTypePropertyTable::EntryIterator 
ForceField::UFFAtomTypePropertyTable::begin()
{
    return EntryIterator(entries.begin(), std::bind<Entry&>(&DataStorage::value_type::second, std::placeholders::_1));
}

ForceField::UFFAtomTypePropertyTable::EntryIterator 
ForceField::UFFAtomTypePropertyTable::end()
{
    return EntryIterator(entries.end(), std::bind<Entry&>(&DataStorage::value_type::second, std::placeholders::_1));
}

void ForceField::UFFAtomTypePropertyTable::loadDefaults()
{
    for (std::size_t i = 0; i < sizeof(DEF_ENTRIES) / sizeof(Entry); i++)
        entries.insert(DataStorage::value_type(DEF_ENTRIES[i].getAtomType(), DEF_ENTRIES[i]));
}

void ForceField::UFFAtomTypePropertyTable::set(const SharedPointer& table)
{    
    defaultTable = (!table ? builtinTable : table);
}

const ForceField::UFFAtomTypePropertyTable::SharedPointer& ForceField::UFFAtomTypePropertyTable::get()
{
    std::call_once(initBuiltinTableFlag, &initBuiltinTable);

    return defaultTable;
}
