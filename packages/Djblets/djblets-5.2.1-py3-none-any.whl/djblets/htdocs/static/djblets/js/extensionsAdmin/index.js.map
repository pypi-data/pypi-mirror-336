{"version":3,"file":"index.js","sources":["../../../../../static/djblets/js/extensionsAdmin/models/extensionManagerModel.ts","../../../../../static/djblets/js/extensionsAdmin/views/extensionManagerView.ts"],"sourcesContent":["/**\n * Extension management support.\n */\n\nimport {\n    type ModelAttributes,\n    BaseCollection,\n    BaseModel,\n    spina,\n} from '@beanbag/spina';\nimport * as Backbone from 'backbone';\nimport * as _ from 'underscore';\n\n\n/**\n * Attributes for information on an installed extension.\n *\n * Version Added:\n *     4.0\n */\ninterface InstalledExtensionAttrs extends ModelAttributes {\n    /**\n     * The name of the author writing/maintaining the extension.\n     */\n    author: string;\n\n    /**\n     * The URL to the author's website.\n     */\n    authorURL: string;\n\n    /**\n     * The URL on Review Board for configuring the extension.\n     */\n    configURL: string;\n\n    /**\n     * The URL to the extension's database management page.\n     */\n    dbURL: string;\n\n    /**\n     * Whether the extension is currently enabled.\n     */\n    enabled: boolean;\n\n    /**\n     * An error message encountered when trying to load the extension.\n     */\n    loadError: string;\n\n    /**\n     * Whether the extension can be loaded.\n     */\n    loadable: boolean;\n\n    /**\n     * The display name of the extension.\n     */\n    name: string;\n\n    /**\n     * A short summary describing the extension.\n     */\n    summary: string;\n\n    /**\n     * The version of the extension.\n     */\n    version: string;\n}\n\n\n/**\n * Attributes for controlling the extension manager.\n *\n * Version Added:\n *     4.0\n */\ninterface ExtensionManagerAttrs extends ModelAttributes {\n    /**\n     * The root of the extension API.\n     */\n    apiRoot: string;\n}\n\n\n/**\n * Represents an installed extension listed in the Manage Extensions list.\n *\n * This stores the various information about the extension that we'll display\n * to the user, and offers actions for enabling or disabling the extension.\n */\n@spina\nclass InstalledExtension extends BaseModel<InstalledExtensionAttrs> {\n    static defaults: InstalledExtensionAttrs = {\n        author: null,\n        authorURL: null,\n        configURL: null,\n        dbURL: null,\n        enabled: false,\n        loadError: null,\n        loadable: true,\n        name: null,\n        summary: null,\n        version: null,\n    };\n\n    /**\n     * Enable the extension.\n     *\n     * This will submit a request to the server to enable this extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise that will be resolved when the request to enable the\n     *     extension completes.\n     */\n    enable(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.save({\n                enabled: true,\n            }, {\n                wait: true,\n\n                error: (model, xhr) => {\n                    this.set({\n                        canEnable: !xhr.errorRsp.needs_reload,\n                        loadError: xhr.errorRsp.load_error,\n                        loadable: false,\n                    });\n\n                    reject(new Error(xhr.errorText));\n                },\n                success: () => resolve(),\n            });\n        });\n    }\n\n    /**\n     * Disable the extension.\n     *\n     * This will submit a request to the server to disable this extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise that will be resolved when the request to enable the\n     *     extension completes.\n     */\n    disable(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.save({\n                enabled: false,\n            }, {\n                wait: true,\n\n                error: xhr => reject(new Error(xhr.errorText)),\n                success: () => resolve(),\n            });\n        });\n    }\n\n    /**\n     * Return a JSON payload for requests sent to the server.\n     *\n     * Returns:\n     *     object:\n     *     A payload that will be serialized for making the API request.\n     */\n    toJSON(): object {\n        return {\n            enabled: this.get('enabled'),\n        };\n    }\n\n    /**\n     * Parse a JSON payload from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload from the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed response.\n     */\n    parse(rsp) {\n        if (rsp.stat !== undefined) {\n            rsp = rsp.extension;\n        }\n\n        const id = rsp.class_name;\n        const configLink = rsp.links['admin-configure'];\n        const dbLink = rsp.links['admin-database'];\n\n        this.url = `${this.collection.url}${id}/`;\n\n        return {\n            author: rsp.author,\n            authorURL: rsp.author_url,\n            canDisable: rsp.can_disable,\n            canEnable: rsp.can_enable,\n            configURL: configLink ? configLink.href : null,\n            dbURL: dbLink ? dbLink.href : null,\n            enabled: rsp.enabled,\n            id: id,\n            loadError: rsp.load_error,\n            loadable: rsp.loadable,\n            name: rsp.name,\n            summary: rsp.summary,\n            version: rsp.version,\n        };\n    }\n\n    /**\n     * Perform AJAX requests against the server-side API.\n     *\n     * Args:\n     *     method (string):\n     *         The HTTP method to use.\n     *\n     *     model (InstalledExtension):\n     *         The extension object being synced.\n     *\n     *     options (object):\n     *         Options for the sync operation.\n     */\n    sync(\n        method: string,\n        model: InstalledExtension,\n        options?: JQuery.AjaxSettings,\n    ): JQueryXHR {\n        return Backbone.sync.call(this, method, model, _.defaults({\n            contentType: 'application/x-www-form-urlencoded',\n            data: model.toJSON(),\n            processData: true,\n\n            error: (xhr, textStatus, errorThrown) => {\n                let rsp;\n                let text;\n\n                try {\n                    rsp = $.parseJSON(xhr.responseText);\n                    text = rsp.err.msg;\n                } catch (e) {\n                    text = 'HTTP ' + xhr.status + ' ' + xhr.statusText;\n                    rsp = {\n                        canEnable: false,\n                        loadError: text,\n                    };\n                }\n\n                if (_.isFunction(options.error)) {\n                    xhr.errorText = text;\n                    xhr.errorRsp = rsp;\n                    options.error(xhr, textStatus, errorThrown);\n                }\n            },\n        }, options));\n    }\n}\n\n\n/**\n * A collection of installed extensions.\n *\n * This stores the list of installed extensions, and allows fetching from\n * the API.\n */\n@spina\nclass InstalledExtensionCollection extends BaseCollection {\n    static model = InstalledExtension;\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data from the response.\n     */\n    parse(rsp) {\n        return rsp.extensions;\n    }\n}\n\n\n/**\n * Manages installed extensions.\n *\n * This stores a collection of installed extensions, and provides\n * functionality for loading the current list from the server.\n */\n@spina\nexport class ExtensionManager extends BaseModel<ExtensionManagerAttrs> {\n    static defaults: ExtensionManagerAttrs = {\n        apiRoot: null,\n    };\n\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /**\n     * A collection of all installed extensions.\n     */\n    installedExtensions: InstalledExtensionCollection;\n\n    /**\n     * Initialize the manager.\n     */\n    initialize() {\n        this.installedExtensions = new InstalledExtensionCollection();\n        this.installedExtensions.url = this.get('apiRoot');\n    }\n\n    /**\n     * Load the extensions list.\n     */\n    load() {\n        this.trigger('loading');\n\n        this.installedExtensions.fetch({\n            success: () => this.trigger('loaded'),\n        });\n    }\n}\n","/**\n * Displays the interface showing all installed extensions.\n */\n\nimport {\n    type EventsHash,\n    BaseView,\n    spina,\n} from '@beanbag/spina';\nimport _ from 'underscore';\n\nimport {\n    ConfigFormsList,\n    ConfigFormsListItem,\n    ConfigFormsListItems,\n    ConfigFormsTableItemView,\n    ConfigFormsTableView,\n} from 'djblets/configForms';\nimport {\n    type ListItemAttrs,\n    type ListItemConstructorAttrs,\n} from 'djblets/configForms/models/listItemModel';\nimport { type Extension } from 'djblets/extensions';\n\nimport { type ExtensionManager } from '../models/extensionManagerModel';\n\n\n/**\n * Attributes for the ExtensionItem model.\n *\n * Version Added:\n *     5.0\n */\ninterface ExtensionItemAttrs extends ListItemAttrs {\n    extension: Extension | null;\n}\n\n\n/**\n * An item in the list of registered extensions.\n *\n * This will contain information on the extension and actions for toggling\n * the enabled state, reloading the extension, or configuring the extension.\n */\n@spina\nclass ExtensionItem extends ConfigFormsListItem<ExtensionItemAttrs> {\n    static defaults: ExtensionItemAttrs = {\n        extension: null,\n    };\n\n    /**\n     * Initialize the item.\n     *\n     * This will set up the initial state and then listen for any changes\n     * to the extension's state (caused by enabling/disabling/reloading the\n     * extension).\n     *\n     * Args:\n     *     attributes (ListItemConstructorAttrs, optional):\n     *         Attributes for the model.\n     */\n    initialize(attributes: ListItemConstructorAttrs = {}) {\n        super.initialize(attributes);\n\n        this.#updateActions();\n        this.#updateItemState();\n\n        this.listenTo(\n            this.get('extension'),\n            'change:loadable change:loadError change:enabled',\n            () => {\n                this.#updateItemState();\n                this.#updateActions();\n            });\n    }\n\n    /**\n     * Update the actions for the extension.\n     *\n     * If the extension is disabled, this will add an Enabled action.\n     *\n     * If it's enabled, but has a load error, it will add a Reload action.\n     *\n     * If it's enabled, it will provide actions for Configure and Database,\n     * if enabled by the extension, along with a Disable action.\n     */\n    #updateActions() {\n        const extension = this.get('extension');\n        const actions = [];\n\n        if (!extension.get('loadable')) {\n            /* Add an action for reloading the extension. */\n            actions.push({\n                id: 'reload',\n                label: _`Reload`,\n            });\n        } else if (extension.get('enabled')) {\n            /*\n             * Show all the actions for enabled extensions.\n             *\n             * Note that the order used is here to ensure visual alignment\n             * for most-frequently-used options.\n             */\n            const configURL = extension.get('configURL');\n            const dbURL = extension.get('dbURL');\n\n            if (dbURL) {\n                actions.push({\n                    id: 'database',\n                    label: _`Database`,\n                    url: dbURL,\n                });\n            }\n\n            if (configURL) {\n                actions.push({\n                    id: 'configure',\n                    label: _`Configure`,\n                    primary: true,\n                    url: configURL,\n                });\n            }\n\n            actions.push({\n                danger: true,\n                id: 'disable',\n                label: _`Disable`,\n            });\n        } else {\n            /* Add an action for enabling a disabled extension. */\n            actions.push({\n                id: 'enable',\n                label: _`Enable`,\n                primary: true,\n            });\n        }\n\n        this.setActions(actions);\n    }\n\n    /**\n     * Update the state of this item.\n     *\n     * This will set the \"error\", \"enabled\", or \"disabled\" state of the\n     * item, depending on the corresponding state in the extension.\n     */\n    #updateItemState() {\n        const extension = this.get('extension');\n        let itemState: string;\n\n        if (!extension.get('loadable')) {\n            itemState = 'error';\n        } else if (extension.get('enabled')) {\n            itemState = 'enabled';\n        } else {\n            itemState = 'disabled';\n        }\n\n        this.set('itemState', itemState);\n    }\n}\n\n\n/**\n * Displays an extension in the Manage Extensions list.\n *\n * This will show information about the extension, and provide links for\n * enabling/disabling the extension, and (depending on the extension's\n * capabilities) configuring it or viewing its database.\n */\n@spina\nclass ExtensionItemView extends ConfigFormsTableItemView {\n    static className =\n        'djblets-c-extension-item djblets-c-config-forms-list__item';\n\n    static actionHandlers: EventsHash = {\n        'disable': '_onDisableClicked',\n        'enable': '_onEnableClicked',\n        'reload': '_onReloadClicked',\n    };\n\n    static template = _.template(dedent`\n        <td class=\"djblets-c-config-forms-list__item-main\">\n         <div class=\"djblets-c-extension-item__header\">\n          <h3 class=\"djblets-c-extension-item__name\"><%- name %></h3>\n          <span class=\"djblets-c-extension-item__version\"><%- version %></span>\n          <div class=\"djblets-c-extension-item__author\">\n           <% if (authorURL) { %>\n            <a href=\"<%- authorURL %>\"><%- author %></a>\n           <% } else { %>\n            <%- author %>\n           <% } %>\n          </div>\n         </div>\n         <p class=\"djblets-c-extension-item__description\">\n          <%- summary %>\n         </p>\n         <% if (!loadable) { %>\n          <pre class=\"djblets-c-extension-item__load-error\"><%-\n            loadError %></pre>\n         <% } %>\n        </td>\n        <td class=\"djblets-c-config-forms-list__item-state\"></td>\n        <td></td>\n    `);\n\n    /**\n     * Return context data for rendering the item's template.\n     *\n     * Returns:\n     *     object:\n     *     Context data for the render.\n     */\n    getRenderContext() {\n        return this.model.get('extension').attributes;\n    }\n\n    /**\n     * Handle a click on the Disable action.\n     *\n     * This will make an asynchronous request to disable the extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the disable request. This will resolve once the\n     *     API has handled the request.\n     */\n    _onDisableClicked() {\n        return this.model.get('extension').disable()\n            .catch(error => {\n                alert(_`Failed to disable the extension: ${error.message}.`);\n            });\n    }\n\n    /**\n     * Handle a click on the Enable action.\n     *\n     * This will make an asynchronous request to enable the extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the enable request. This will resolve once the\n     *     API has handled the request.\n     */\n    _onEnableClicked() {\n        return this.model.get('extension').enable()\n            .catch(error => {\n                alert(_`Failed to enable the extension: ${error.message}.`);\n            });\n    }\n\n    /**\n     * Handle a click on the Reload action.\n     *\n     * This will trigger an event on the item that tells the extension\n     * manager to perform a full reload of all extensions, this one included.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the enable request. This will never resolve, in\n     *     practice, but is returned to enable the action's spinner until\n     *     the page reloads.\n     */\n    _onReloadClicked() {\n        return new Promise(() => this.model.trigger('needsReload'));\n    }\n}\n\n\n/**\n * Displays the interface showing all installed extensions.\n *\n * This loads the list of installed extensions and displays each in a list.\n */\n@spina\nexport class ExtensionManagerView extends BaseView<\n    ExtensionManager,\n    HTMLFormElement\n> {\n    static events: EventsHash = {\n        'click .djblets-c-extensions__reload': '_reloadFull',\n    };\n\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /** The extension list model. */\n    list: ConfigFormsList;\n\n    /** The extension list view. */\n    listView: ConfigFormsTableView;\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.list = new ConfigFormsList(\n            {},\n            {\n                collection: new ConfigFormsListItems(\n                    [],\n                    {\n                        model: ExtensionItem,\n                    }),\n            });\n    }\n\n    /**\n     * Render the view.\n     */\n    protected onInitialRender() {\n        const model = this.model;\n        const list = this.list;\n\n        this.listView = new ConfigFormsTableView({\n            ItemView: ExtensionItemView,\n            el: this.$('.djblets-c-config-forms-list'),\n            model: list,\n        });\n        this.listView.render().$el\n            .removeAttr('aria-busy')\n            .addClass('-all-items-are-multiline');\n\n        this.listenTo(model, 'loading', () => list.collection.reset());\n        this.listenTo(model, 'loaded', this._onLoaded);\n        model.load();\n    }\n\n    /**\n     * Handler for when the list of extensions is loaded.\n     *\n     * Renders each extension in the list. If the list is empty, this will\n     * display that there are no extensions installed.\n     */\n    _onLoaded() {\n        const items = this.list.collection;\n\n        this.model.installedExtensions.each(extension => {\n            const item = items.add({\n                extension: extension,\n            });\n\n            this.listenTo(item, 'needsReload', this._reloadFull);\n        });\n    }\n\n    /**\n     * Perform a full reload of the list of extensions on the server.\n     *\n     * This submits our form, which is set in the template to tell the\n     * ExtensionManager to do a full reload.\n     */\n    _reloadFull() {\n        this.el.submit();\n    }\n}\n"],"names":["spina","BaseModel","enable","enabled","wait","error","canEnable","loadError","loadable","disable","toJSON","configURL","dbURL","id","sync","contentType","data","processData","text","rsp","_class2","author","authorURL","name","summary","version","_class","BaseCollection","_class4","_class3","initialize","load","success","_class6","apiRoot","_class5","ConfigFormsListItem","extension","label","url","primary","danger","itemState","ConfigFormsTableItemView","getRenderContext","_onDisableClicked","_onEnableClicked","_onReloadClicked","BaseView","ConfigFormsList","collection","ConfigFormsListItems","model","onInitialRender","ConfigFormsTableView","ItemView","el","_onLoaded","_reloadFull"],"mappings":"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"}