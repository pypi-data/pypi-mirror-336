{"version":3,"file":"index.js","sources":["../../../../../static/djblets/js/extensions/models/extensionModel.ts","../../../../../static/djblets/js/extensions/models/extensionHookModel.ts","../../../../../static/djblets/js/extensions/models/extensionHookPointModel.ts"],"sourcesContent":["/**\n * Base class for an extension.\n */\n\nimport {\n    BaseModel,\n    ModelAttributes,\n    spina,\n} from '@beanbag/spina';\n\nimport { type ExtensionHook } from './extensionHookModel';\n\n\n/**\n * Attributes that can be passed to an extension's constructor.\n *\n * Version Added:\n *     4.0\n */\nexport interface BaseExtensionAttrs extends ModelAttributes {\n    /**\n     * The unique ID of the extension.\n     */\n    id: string;\n\n    /**\n     * The display name of the extension.\n     */\n    name: string;\n\n    /**\n     * A mapping of settings made available to the extension.\n     */\n    settings: {\n        [key: string]: unknown,\n    }\n}\n\n\n/**\n * Base class for an extension.\n *\n * Extensions that deal with JavaScript should subclass this to provide any\n * initialization code it needs, such as the initialization of hooks.\n *\n * Extension instances will have read access to the server-stored settings\n * for the extension.\n */\n@spina\nexport class Extension<\n    TDefaults extends BaseExtensionAttrs = BaseExtensionAttrs\n> extends BaseModel<TDefaults> {\n    static defaults: BaseExtensionAttrs = {\n        id: null,\n        name: null,\n        settings: {},\n    };\n\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /**\n     * The list of extension hooks added by this extension.\n     *\n     * This is automatically populated when instantiating extension hooks.\n     */\n    hooks: ExtensionHook[];\n\n    /**\n     * Initialize the extension.\n     *\n     * Subclasses that override this are expected to call this method.\n     */\n    initialize() {\n        this.hooks = [];\n    }\n}\n","/**\n * Base support for defining extension hooks.\n */\n\nimport {\n    type ModelAttributes,\n    BaseModel,\n    spina,\n} from '@beanbag/spina';\n\nimport { type ExtensionHookPoint } from './extensionHookPointModel';\nimport { type Extension } from './extensionModel';\n\n\n/**\n * Attributes that can be passed to an extension hook's constructor.\n *\n * Version Added:\n *     4.0\n */\nexport interface ExtensionHookAttrs extends ModelAttributes {\n    /**\n     * The extension that owns this hook.\n     */\n    extension: Extension;\n}\n\n\n/**\n * Base class for hooks that an extension can use to augment functionality.\n *\n * Each type of hook represents a point in the codebase that an extension\n * is able to plug functionality into.\n *\n * Subclasses are expected to set a hookPoint field in the prototype to an\n * instance of ExtensionPoint.\n *\n * Instances of an ExtensionHook subclass that extensions create will be\n * automatically registered with both the extension and the list of hooks\n * for that ExtensionHook subclass.\n *\n * Callers that use ExtensionHook subclasses to provide functionality can\n * use the subclass's each() method to loop over all registered hooks.\n */\n@spina({\n    prototypeAttrs: [\n        'each',\n        'hookPoint',\n    ],\n})\nexport class ExtensionHook<\n    TDefaults extends ExtensionHookAttrs = ExtensionHookAttrs\n> extends BaseModel<TDefaults> {\n    /**\n     * An ExtensionHookPoint instance.\n     *\n     * This must be defined and instantiated by a subclass of ExtensionHook,\n     * but not by subclasses created by extensions.\n     */\n    static hookPoint: ExtensionHookPoint = null;\n    hookPoint: ExtensionHookPoint;\n\n    static defaults: ExtensionHookAttrs = {\n        extension: null,\n    };\n\n    /**\n     * Loop through each registered hook instance and call the given callback.\n     *\n     * Args:\n     *     cb (function):\n     *         The callback to call.\n     *\n     *     context (object, optional):\n     *         Optional context to use when calling the callback.\n     */\n    static each(\n        cb: (ExtensionHook) => void,\n        context: unknown = null,\n    ) {\n        for (const hook of this.prototype.hookPoint.hooks) {\n            cb.call(context, hook);\n        }\n    }\n\n    /**\n     * Initialize the hook.\n     *\n     * This will add the instance of the hook to the extension's list of\n     * hooks, and to the list of known hook instances for this hook point.\n     *\n     * After initialization, setUpHook will be called, which a subclass\n     * can use to provide additional setup.\n     */\n    initialize() {\n        const extension = this.get('extension');\n\n        console.assert(\n            !!this.hookPoint,\n            'This ExtensionHook subclass must define hookPoint');\n        console.assert(\n            !!extension,\n            'An Extension instance must be passed to ExtensionHook');\n\n        extension.hooks.push(this);\n        this.hookPoint.addHook(this);\n\n        this.setUpHook();\n    }\n\n    /**\n     * Set up additional state for the hook.\n     *\n     * This can be overridden by subclasses to provide additional\n     * functionality.\n     */\n    setUpHook() {\n        /* Empty by default. */\n    }\n}\n","/**\n * Class for defining a hook point for extension hooks.\n */\n\nimport { BaseModel, spina } from '@beanbag/spina';\n\nimport { type ExtensionHook } from './extensionHookModel';\n\n\n/**\n * Defines a point where extension hooks can plug into.\n *\n * This is meant to be instantiated and provided as a 'hookPoint' field on\n * an ExtensionHook subclass, in order to provide a place to hook into.\n */\n@spina\nexport class ExtensionHookPoint extends BaseModel {\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /**\n     * A list of all hooks registered on this extension point.\n     */\n    hooks: ExtensionHook[];\n\n    /**\n     * Initialize the hook point.\n     */\n    initialize() {\n        this.hooks = [];\n    }\n\n    /**\n     * Add a hook instance to the list of known hooks.\n     *\n     * Args:\n     *     hook (Djblets.ExtensionHook):\n     *         The hook instance.\n     */\n    addHook(hook: ExtensionHook) {\n        this.hooks.push(hook);\n    }\n}\n"],"names":["spina","BaseModel","initialize","_class2","id","name","settings","_class","prototypeAttrs","cb","extension","setUpHook"],"mappings":";;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;;AAMuB;EA+BvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACCA,MAAAA,SAAAA,GAAAA,KAAAA,CAAAA,KAAK,iDAGIC,KAAS,CAAA,SAAA,CAAA;EAkBf;EACJ;EACA;EACA;EACA;EACIC,EAAAA,UAAAA,GAAAA;;EAEA,GAAA;EACJ,CAAA,EAAA,eAAA,CAAAC,SAAA,EAAA,UAAA,EAAA;EAxBQC,EAAAA,EAAAA,EAAAA,IAAAA;EACAC,EAAAA,IAAAA,EAAAA,IAAAA;EACAC,EAAAA,QAAAA,EAAAA,EAAAA;EACJ,CAAA,CAAA,EAAAH,SAAA,CAAA,CAAA,IAAAI;;;ECxDJ;EACA;EACA;;AAMuB;EAoBvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,MAAA,aAAA,IAAA,IAAA,GAACP,KAAK,CAAA,KAAA,CAAA;EACFQ,EAAAA,cAAAA,EAAAA,CAAAA,MAAAA,EAAAA,WAAAA,CAAAA;EAIJ,CAAA,CAAA,EAAA,IAAA,CAAAD,QAAA,IAAA,OAAA,GAAA,MAAA,aAAA,SAGUN,KAAS,CAAA,SAAA,CAAA;EACf;EACJ;EACA;EACA;EACA;EACA;;EAQI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;EAMYQ,MAAAA,EAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,IAAAA,CAAAA,CAAAA;EACJ,KAAA;EACJ,GAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIP,EAAAA,UAAAA,GAAAA;EACI,IAAA,MAAA,SAAA,GAAA,IAAA,CAAA,GAAA,CAAA,WAAA,CAAA,CAAA;;;EASAQ,IAAAA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA;EACA,IAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;EAGJ,GAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACIC,EAAAA,SAAAA,GAAAA;EACI;EAAA,GAAA;EAER,CAAA,EAAA,eAAA,CAAA,OAAA,EAAA,WAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,OAAA,EAAA,UAAA,EAAA;EAxDQD,EAAAA,SAAAA,EAAAA,IAAAA;EACJ,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,IAAAH,QAAA;;;EChEJ;EACA;EACA;;AAEiD;EAKjD;EACA;EACA;EACA;EACA;EACA;AACCP,MAAAA,kBAAAA,GAAAA,KAAAA,CAAAA,KAAK,2CACkCC,KAAS,CAAA,SAAA,CAAA;EAC7C;EACJ;EACA;;EAEI;EACJ;EACA;;EAGI;EACJ;EACA;EACIC,EAAAA,UAAAA,GAAAA;;EAEA,GAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;;EAEQ,IAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;EACJ,GAAA;EACJ,CAAA,CAAA,IAAA;;;;;;;;;;"}