{"version":3,"file":"conditionChoiceModel.js","names":["Djblets","Forms","ConditionChoice","Backbone","Model","extend","defaults","name","valueField","initialize","attributes","operators","Collection","model","ConditionOperator","parse","createValueField","fieldName","get","viewClass","_","modelClass","modelData","viewData","data","id","parseValueFieldData","undefined","fieldModelInfo","fieldViewInfo","view","getObjectByName","className"],"sources":["../../../../../../static/djblets/js/forms/models/conditionChoiceModel.es6.js"],"sourcesContent":["/**\n * A possible choice for a condition.\n *\n * This represents a single choice for a condition, such as a summary or list\n * of objects, that a condition processor will inspect and match against\n * configurations. A condition contains a list of possible operators (such as\n * \"Is,\" \"Is not,\" \"Starts with,\" etc.) and a field for handling any values\n * for the choice and operator.\n *\n * Attributes:\n *     operators (Backbone.Collection):\n *         A collection of operators that are valid for this condition. Each\n *         entry is a :js:class:`Djblets.Forms.ConditionOperator`.\n *\n * Model Attributes:\n *     name (string):\n *         The name of the condition. This is what will be displayed to the\n *         user.\n *\n *     valueField (object):\n *         Information about the object handling the storage and manipulation\n *         of values for the condition. This will be the default value field\n *         for all operators on the choice, but operators can provide their\n *         own.\n *\n *         This will have ``modelClass` and ``viewClass`` keys pointing to the\n *         object constructors for the model and view for the value field,\n *         along with ``modelData`` and ``viewData`` controlling the model\n *         attributes and view options, respectively.\n */\nDjblets.Forms.ConditionChoice = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        valueField: null,\n    },\n\n    /**\n     * Initialize the choice.\n     *\n     * Attributes:\n     *     operators (Array):\n     *         The list of operators to populate the operators collection.\n     */\n    initialize(attributes) {\n        this.operators = new Backbone.Collection(attributes.operators, {\n            model: Djblets.Forms.ConditionOperator,\n            parse: true,\n        });\n    },\n\n    /**\n     * Create the value field for the choice.\n     *\n     * This will construct a new instance of the view used to take values for\n     * this choice.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name for the form field.\n     *\n     * Returns:\n     *     Djblets.Forms.BaseConditionValueFieldView:\n     *     The view for the field.\n     */\n    createValueField(fieldName) {\n        const valueField = this.get('valueField');\n\n        return new valueField.viewClass(_.defaults({\n            model: new valueField.modelClass(_.defaults({\n                fieldName: fieldName,\n            }, valueField.modelData)),\n        }, valueField.viewData));\n    },\n\n    /**\n     * Parse the attribute data passed to the model.\n     *\n     * Args:\n     *     data (object):\n     *         The attribute data passed to the model.\n     *\n     *  Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(data) {\n        return {\n            id: data.id,\n            name: data.name,\n            valueField: Djblets.Forms.ConditionChoice.parseValueFieldData(\n                data.valueField),\n        };\n    },\n}, {\n    /**\n     * Parse value field data into a standard structure.\n     *\n     * This can be used by any choice-related class that needs to deal with\n     * value fields. It's intended for internal use only.\n     *\n     * Args:\n     *     data (object):\n     *         The value field data to parse.\n     *\n     * Returns:\n     *     dict:\n     *     The resulting value field information, or ``null`` if the data\n     *     provided is ``undefined``.\n     */\n    parseValueFieldData(data) {\n        let valueField = null;\n\n        if (data !== undefined) {\n            const fieldModelInfo = data.model;\n            const fieldViewInfo = data.view;\n\n            valueField = {\n                modelClass: Djblets.getObjectByName(fieldModelInfo.className),\n                modelData: fieldModelInfo.data,\n                viewClass: Djblets.getObjectByName(fieldViewInfo.className),\n                viewData: fieldViewInfo.data,\n            };\n        }\n\n        return valueField;\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,KAAK,CAACC,eAAe,GAAGC,QAAQ,CAACC,KAAK,CAACC,MAAM,CAAC;EAClDC,QAAQ,EAAE;IACNC,IAAI,EAAE,IAAI;IACVC,UAAU,EAAE;EAChB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU,CAACC,UAAU,EAAE;IACnB,IAAI,CAACC,SAAS,GAAG,IAAIR,QAAQ,CAACS,UAAU,CAACF,UAAU,CAACC,SAAS,EAAE;MAC3DE,KAAK,EAAEb,OAAO,CAACC,KAAK,CAACa,iBAAiB;MACtCC,KAAK,EAAE;IACX,CAAC,CAAC;EACN,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgB,CAACC,SAAS,EAAE;IACxB,MAAMT,UAAU,GAAG,IAAI,CAACU,GAAG,CAAC,YAAY,CAAC;IAEzC,OAAO,IAAIV,UAAU,CAACW,SAAS,CAACC,CAAC,CAACd,QAAQ,CAAC;MACvCO,KAAK,EAAE,IAAIL,UAAU,CAACa,UAAU,CAACD,CAAC,CAACd,QAAQ,CAAC;QACxCW,SAAS,EAAEA;MACf,CAAC,EAAET,UAAU,CAACc,SAAS,CAAC;IAC5B,CAAC,EAAEd,UAAU,CAACe,QAAQ,CAAC,CAAC;EAC5B,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIR,KAAK,CAACS,IAAI,EAAE;IACR,OAAO;MACHC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXlB,IAAI,EAAEiB,IAAI,CAACjB,IAAI;MACfC,UAAU,EAAER,OAAO,CAACC,KAAK,CAACC,eAAe,CAACwB,mBAAmB,CACzDF,IAAI,CAAChB,UAAU;IACvB,CAAC;EACL;AACJ,CAAC,EAAE;EACC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkB,mBAAmB,CAACF,IAAI,EAAE;IACtB,IAAIhB,UAAU,GAAG,IAAI;IAErB,IAAIgB,IAAI,KAAKG,SAAS,EAAE;MACpB,MAAMC,cAAc,GAAGJ,IAAI,CAACX,KAAK;MACjC,MAAMgB,aAAa,GAAGL,IAAI,CAACM,IAAI;MAE/BtB,UAAU,GAAG;QACTa,UAAU,EAAErB,OAAO,CAAC+B,eAAe,CAACH,cAAc,CAACI,SAAS,CAAC;QAC7DV,SAAS,EAAEM,cAAc,CAACJ,IAAI;QAC9BL,SAAS,EAAEnB,OAAO,CAAC+B,eAAe,CAACF,aAAa,CAACG,SAAS,CAAC;QAC3DT,QAAQ,EAAEM,aAAa,CAACL;MAC5B,CAAC;IACL;IAEA,OAAOhB,UAAU;EACrB;AACJ,CAAC,CAAC"}