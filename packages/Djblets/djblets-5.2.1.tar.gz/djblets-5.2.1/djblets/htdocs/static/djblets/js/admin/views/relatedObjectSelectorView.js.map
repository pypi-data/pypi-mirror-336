{"version":3,"file":"relatedObjectSelectorView.js","names":["Djblets","RelatedObjectSelectorView","Backbone","View","extend","className","autoAddClose","optionTagName","searchPlaceholderText","template","_","initialize","options","_$input","$input","_selectizeOptions","selectizeOptions","_selectedIDs","Map","bindAll","render","self","$el","html","multivalued","_$selected","$","renderItem","renderOption","defaults","copyClassesToDropdown","dropdownParent","preload","item","option","load","query","callback","loadOptions","data","filter","has","id","onChange","selected","_onItemSelected","removeOption","clear","initialOptions","length","items","valueField","selectize","forEach","after","_updateInput","val","Array","from","keys","join","addToInput","$item","renderSelectedOption","$items","children","text","click","_onItemRemoved","appendTo","attached","i","$i","eq","localeCompare","before","set","remove","delete"],"sources":["../../../../../../static/djblets/js/admin/views/relatedObjectSelectorView.es6.js"],"sourcesContent":["/**\n * A widget to select related objects using search and autocomplete.\n *\n * This is particularly useful for models where there can be a ton of rows in\n * the database. The built-in admin widgets provide a pretty poor\n * experience--either populating the list with the entire contents of the\n * table, which is super slow, or just listing PKs, which isn't usable.\n */\nDjblets.RelatedObjectSelectorView = Backbone.View.extend({\n    className: 'related-object-selector',\n\n    /** Whether to automatically add a close action to selected options. */\n    autoAddClose: true,\n\n    /** The tag name to use for selected options. */\n    optionTagName: 'li',\n\n    /**\n     * The search placeholder text.\n     *\n     * Subclasses should override this.\n     */\n    searchPlaceholderText: '',\n\n    /**\n     * The element template.\n     *\n     * Subclasses may override this to change rendering.\n     */\n    template: _.template(dedent`\n        <select placeholder=\"<%- searchPlaceholderText %>\"\n                class=\"related-object-options\"></select>\n        <% if (multivalued) { %>\n        <ul class=\"related-object-selected\"></ul>\n        <% } %>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $input (jQuery):\n     *         The ``<input>`` element which should be populated with the list\n     *         of selected item PKs.\n     *\n     *     initialOptions (Array of object):\n     *         The initially selected options.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multiple\n     *         values.\n     *\n     *     selectizeOptions (object):\n     *          Additional options to pass in to $.selectize.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$input = options.$input;\n        this._selectizeOptions = options.selectizeOptions;\n        this._selectedIDs = new Map();\n\n        _.bindAll(this, 'renderOption');\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.RelatedObjectSelectorView:\n     *     This object, for chaining.\n     */\n    render() {\n        const self = this;\n\n        this.$el.html(this.template({\n            multivalued: this.options.multivalued,\n            searchPlaceholderText: this.searchPlaceholderText,\n        }));\n\n        this._$selected = this.$('.related-object-selected');\n\n        const renderItem = this.options.multivalued\n                           ? () => ''\n                           : this.renderOption;\n\n        const selectizeOptions = _.defaults(this._selectizeOptions, {\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            preload: 'focus',\n\n            render: {\n                item: renderItem,\n                option: this.renderOption,\n            },\n\n            load(query, callback) {\n                self.loadOptions(\n                    query,\n                    data => callback(data.filter(\n                        item => !self._selectedIDs.has(item.id)\n                    ))\n                );\n            },\n\n            onChange(selected) {\n                if (selected) {\n                    self._onItemSelected(this.options[selected], true);\n\n                    if (self.options.multivalued) {\n                        this.removeOption(selected);\n                    }\n                }\n\n                if (self.options.multivalued) {\n                    this.clear();\n                }\n            },\n        });\n\n        if (!this.options.multivalued && this.options.initialOptions.length) {\n            const item = this.options.initialOptions[0];\n            selectizeOptions.options = this.options.initialOptions;\n            selectizeOptions.items = [item[selectizeOptions.valueField]];\n        }\n\n        this.$('select').selectize(selectizeOptions);\n\n        if (this.options.multivalued) {\n            this.options.initialOptions.forEach(\n                item => this._onItemSelected(item, false)\n            );\n        }\n\n        this._$input.after(this.$el);\n\n        return this;\n    },\n\n    /**\n     * Update the \"official\" ``<input>`` element.\n     *\n     * This copies the list of selected item IDs into the form field which will\n     * be submitted.\n     */\n    _updateInput() {\n        this._$input.val(Array.from(this._selectedIDs.keys()).join(','));\n    },\n\n    /**\n     * Callback for when an item is selected.\n     *\n     * Args:\n     *     item (object):\n     *         The newly-selected item.\n     *\n     *     addToInput (boolean):\n     *         Whether the ID of the item should be added to the ``<input>``\n     *         field.\n     *\n     *         This will be ``false`` when populating the visible list from the\n     *         value of the form field when the page is initially loaded, and\n     *         ``true`` when adding items interactively.\n     */\n    _onItemSelected(item, addToInput) {\n        if (this.options.multivalued) {\n            const $item = $(`<${this.optionTagName}>`)\n                .html(this.renderSelectedOption(item));\n            const $items = this._$selected.children();\n            const text = $item.text();\n\n            if (this.autoAddClose) {\n                $('<span class=\"remove-item ink-i-delete-item\">')\n                    .click(() => this._onItemRemoved($item, item))\n                    .appendTo($item);\n            }\n\n            let attached = false;\n\n            for (let i = 0; i < $items.length; i++) {\n                const $i = $items.eq(i);\n\n                if ($i.text().localeCompare(text) > 0) {\n                    $i.before($item);\n                    attached = true;\n                    break;\n                }\n            }\n\n            if (!attached) {\n                $item.appendTo(this._$selected);\n            }\n\n            this._selectedIDs.set(item.id, item);\n\n            if (addToInput) {\n                this._updateInput();\n            }\n        } else {\n            this._selectedIDs = new Map([[item.id, item]]);\n            this._updateInput();\n        }\n    },\n\n    /**\n     * Callback for when an item is removed from the list.\n     *\n     * Args:\n     *     $item (jQuery):\n     *         The element representing the item in the selected list.\n     *\n     *     item (object):\n     *         The item being removed.\n     */\n    _onItemRemoved($item, item) {\n        $item.remove();\n        this._selectedIDs.delete(item.id);\n        this._updateInput();\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * This should be overridden in order to render type-specific data.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return '';\n    },\n\n    /**\n     * Render an option in the selected list.\n     *\n     * By default, this uses the same implementation as renderOption. If a\n     * widget wants to display selected options differently, they may override\n     * this.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the selected items list.\n     */\n    renderSelectedOption(item) {\n        return this.renderOption(item);\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * This should be overridden in order to make necessary API requests.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        callback();\n    },\n});\n"],"mappings":"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"}