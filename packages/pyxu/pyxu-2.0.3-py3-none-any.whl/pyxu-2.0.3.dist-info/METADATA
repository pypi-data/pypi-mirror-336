Metadata-Version: 2.4
Name: pyxu
Version: 2.0.3
Summary: Modular and scalable computational imaging in Python with support for GPU/out-of-core computing.
Project-URL: download, https://github.com/pyxu-org/pyxu
Project-URL: homepage, https://pyxu-org.github.io/
Author: S. Kashani, J. Ru√©-Queralt, M. Simeoni, Pyxu Developers
Author-email: contact@pyxu.org
License-Expression: MIT
License-File: LICENSE
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering
Requires-Python: <3.13,>=3.10
Requires-Dist: cloudpickle<4,>=3.0.0
Requires-Dist: dask[array,diagnostics,distributed]<2024.9,>=2023.12
Requires-Dist: numba<1,>=0.59
Requires-Dist: numpy<2.1,>=1.24
Requires-Dist: packaging>=23.1
Requires-Dist: scipy<2,>=1.11
Requires-Dist: zarr<3,>=2.16
Provides-Extra: complete
Requires-Dist: cupy-cuda12x<14,>=13.0; extra == 'complete'
Requires-Dist: ipython<9,>=8.14; extra == 'complete'
Requires-Dist: jupyterlab<5,>=4.0; extra == 'complete'
Requires-Dist: matplotlib<4,>=3.7; extra == 'complete'
Provides-Extra: complete-cpu
Requires-Dist: ipython<9,>=8.14; extra == 'complete-cpu'
Requires-Dist: jupyterlab<5,>=4.0; extra == 'complete-cpu'
Requires-Dist: matplotlib<4,>=3.7; extra == 'complete-cpu'
Provides-Extra: complete11
Requires-Dist: cupy-cuda11x<14,>=13.0; extra == 'complete11'
Requires-Dist: ipython<9,>=8.14; extra == 'complete11'
Requires-Dist: jupyterlab<5,>=4.0; extra == 'complete11'
Requires-Dist: matplotlib<4,>=3.7; extra == 'complete11'
Provides-Extra: complete12
Requires-Dist: cupy-cuda12x<14,>=13.0; extra == 'complete12'
Requires-Dist: ipython<9,>=8.14; extra == 'complete12'
Requires-Dist: jupyterlab<5,>=4.0; extra == 'complete12'
Requires-Dist: matplotlib<4,>=3.7; extra == 'complete12'
Provides-Extra: dev
Requires-Dist: graphviz<1,>=0.20; extra == 'dev'
Requires-Dist: hatch<2,>=1.7; extra == 'dev'
Requires-Dist: ipython<9,>=8.14; extra == 'dev'
Requires-Dist: jupyterlab<5,>=4.0; extra == 'dev'
Requires-Dist: matplotlib<4,>=3.7; extra == 'dev'
Requires-Dist: nbsphinx<1,>=0.9.0; extra == 'dev'
Requires-Dist: pre-commit<4,>=3.3; extra == 'dev'
Requires-Dist: pydata-sphinx-theme==0.13.3; extra == 'dev'
Requires-Dist: pytest<8,>=7.4; extra == 'dev'
Requires-Dist: scikit-image<1,>=0.21; extra == 'dev'
Requires-Dist: sphinx-codeautolink<1,>=0.15.0; extra == 'dev'
Requires-Dist: sphinx-copybutton<1,>=0.5.2; extra == 'dev'
Requires-Dist: sphinx-design<1,>=0.4.1; extra == 'dev'
Requires-Dist: sphinx-gallery<1,>=0.17.0; extra == 'dev'
Requires-Dist: sphinx-togglebutton<1,>=0.3.2; extra == 'dev'
Requires-Dist: sphinx<8,>=7.2; extra == 'dev'
Requires-Dist: tox<5,>=4.6; extra == 'dev'
Provides-Extra: gpu11-base
Requires-Dist: cupy-cuda11x<14,>=13.0; extra == 'gpu11-base'
Provides-Extra: gpu12-base
Requires-Dist: cupy-cuda12x<14,>=13.0; extra == 'gpu12-base'
Provides-Extra: interact
Requires-Dist: ipython<9,>=8.14; extra == 'interact'
Requires-Dist: jupyterlab<5,>=4.0; extra == 'interact'
Requires-Dist: matplotlib<4,>=3.7; extra == 'interact'
Description-Content-Type: text/x-rst

.. image:: https://raw.githubusercontent.com/pyxu-org/pyxu/master/doc/_static/wide-logo.png
   :target: https://pyxu-org.github.io/
   :alt: Pyxu logo

Pyxu: Modular and Scalable Computational Imaging
================================================

.. image:: https://img.shields.io/badge/Documentation-View-blue
   :target: https://pyxu-org.github.io/
   :alt: Documentation
.. image:: https://badge.fury.io/py/pyxu.svg
   :target: https://pypi.org/project/pyxu/
   :alt: PyPI Version
.. image:: https://img.shields.io/badge/Python-3.10%20|%203.11%20|%203.12-blue
   :target: https://www.python.org/downloads/
   :alt: Python 3.10 | 3.11 | 3.12
.. image:: https://img.shields.io/badge/Part%20of-PyData-orange
   :target: https://pydata.org/
   :alt: Part of PyData
.. image:: https://img.shields.io/badge/License-MIT-yellow.svg
   :target: https://opensource.org/licenses/MIT
   :alt: License: MIT
.. image:: https://img.shields.io/badge/Maturity-Production%2FStable-green.svg
   :target: https://www.python.org/dev/peps/pep-0008/
   :alt: Maturity Level: Production/Stable
.. image:: https://img.shields.io/badge/code%20style-black-000000.svg
   :target: https://github.com/psf/black
   :alt: Code style: black
.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?style=flat&logo=pre-commit&logoColor=white
   :target: https://pre-commit.com/
   :alt: pre-commit enabled
.. image:: https://img.shields.io/github/languages/code-size/pyxu-org/pyxu
   :alt: GitHub code size in bytes
   :target: https://github.com/pyxu-org/pyxu
.. image:: https://img.shields.io/github/commit-activity/y/pyxu-org/pyxu
   :target: https://github.com/pyxu-org/pyxu/commits/main
   :alt: Number of Commits
.. image:: https://img.shields.io/github/last-commit/pyxu-org/pyxu
   :target: https://github.com/pyxu-org/pyxu/commits
   :alt: Last Commit
.. image:: https://img.shields.io/github/contributors/pyxu-org/pyxu
   :target: https://github.com/pyxu-org/pyxu/graphs/contributors
   :alt: Number of Contributors
.. image:: https://img.shields.io/badge/PRs-welcome-brightgreen.svg
   :target: https://github.com/pyxu-org/pyxu/pulls
   :alt: PRs Welcome
.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4486431.svg
   :target: https://doi.org/10.5281/zenodo.4486431
.. image:: https://img.shields.io/badge/total%20downloads-7313-green.svg
   :target: https://www.pepy.tech/projects/pyxu
   :alt: Total PyPI downloads (Pycsou + Pyxu)
.. image:: https://img.shields.io/pypi/dm/pyxu.svg
   :target: https://pypistats.org/packages/pyxu
   :alt: Monthly PyPI downloads


**Pyxu** (pronounced [piksu], formerly known as Pycsou) is an open-source Python framework allowing scientists at any
level to quickly prototype/deploy *hardware accelerated and out-of-core* computational imaging pipelines at scale.
Thanks to its **microservice architecture** and tight integration with the PyData ecosystem, Pyxu supports a wide range
of imaging applications, scales, and computation architectures.

.. image:: https://raw.githubusercontent.com/pyxu-org/pyxu/master/doc/_static/banner.jpg
   :target: https://pyxu-org.github.io/examples/index.html
   :alt: Banner

What Makes Pyxu Special?
------------------------

* **Universal & Modular üåê:** Unlike other frameworks which are specialized for particular imaging types, Pyxu is a
  general-purpose computational imaging tool. No more wrestling with one-size-fits-all solutions that don't quite fit!
* **Plug-and-Play Functionality üéÆ:** Craft imaging pipelines effortlessly with advanced operator algebra logic.  Pyxu
  automates the tedious bits, like computing gradients, proximal operators, and computing hyperparameters.
* **High-Performance Computing üöÄ:** Whether you're using CPUs or GPUs, Pyxu works with both. It employs `Duck arrays
  <https://numpy.org/neps/nep-0022-ndarray-duck-typing-overview.html>`_, just-in-time compilation via `Numba
  <https://numba.pydata.org/>`_, and relies on `CuPy <https://cupy.dev/>`_ and `Dask <https://dask.org/>`_ for
  GPU/distributed computing needs.
* **Flexible & Adaptable üõ†Ô∏è:** Combat the common woes of software rigidity with Pyxu's ultra-flexible framework.
  Bayesian techniques requiring extensive software flexibility are a breeze here.
* **Hardware Acceleration üñ•Ô∏è:** Leverage built-in support for hardware acceleration to ramp up your computational
  speed, all thanks to our module-agnostic codebase.
* **Distributed Computing üîó:** Got a lot of data? No worries! Pyxu works at scale and is easily deployable on
  institutional clusters using industry-standard technologies like `Kubernetes <https://kubernetes.io/>`_ and `Docker
  <https://www.docker.com/>`_.
* **Deep Learning Interoperability ü§ñ:**  Integrate with major deep learning frameworks like `PyTorch
  <https://pytorch.org/>`_ and `JAX <https://jax.readthedocs.io/en/latest/jax.html>`_ for state-of-the-art computational
  imaging techniques.

Why is Pyxu Necessary?
----------------------

In the realm of computer vision üì∑, digital image restoration and enhancement techniques have established themselves as
indispensable pillars.  These techniques, aiming to restore and elevate the quality of degraded or partially observed
images, have witnessed unprecedented progress üìà in recent times.  Thanks to potent image priors, we've now reached an
era where image restoration and enhancement methods are incredibly advanced ‚ú® ‚Äîso much so that we might be approaching a
pinnacle in terms of performance and accuracy.

However, it's not all roses üåπ.

Despite their leaps in progress, advanced image reconstruction methods often find themselves trapped in a vicious cycle
of limited adaptability, usability, and reproducibility.  Many advanced computational imaging solutions, while
effective, are tailored for specific use-cases and seldom venture beyond the confines of a proof-of-concept üöß.  These
niche solutions demand deep expertise to customize and deploy, making their adoption in production pipelines
challenging.

In essence, the imaging domain is desperately seeking what the deep learning community found in frameworks like `PyTorch
<https://pytorch.org/>`_, `TensorFlow <https://www.tensorflow.org/>`_, or `Keras <https://keras.io/>`_ ‚Äîa flexible,
modular, and powerful environment that accelerates the adoption of cutting-edge methods in real-world settings.  Pyxu
stands as an answer to this call: a groundbreaking, open-source computational imaging software framework tailored for
Python enthusiasts üêç.

Basic Installation
------------------

The core of **Pyxu** is lightweight and straightforward to install. You'll need Python (>= 3.10, < 3.13) and a few
mandatory dependencies. While these dependencies will be automatically installed via ``pip``, we highly recommend
installing NumPy and SciPy via ``conda`` to benefit from optimized math libraries.

First, to install NumPy and SciPy from conda-forge:

.. code-block:: bash

   conda install -c conda-forge numpy scipy

And then install Pyxu:

.. code-block:: bash

   pip install pyxu

That's it for the basic installation; you're ready to go! Check out the `install guide
<https://pyxu-org.github.io/intro/installation.html>`_ for instructions on how to build from source, or for more
advanced options.

Comparison with other Frameworks
--------------------------------

Pyxu offers a comprehensive suite of algorithms, including the latest primal-dual splitting methods for nonsmooth
optimization.  The feature set is robust and mature, positioning it as a leader in the computational imaging arena.

.. list-table:: Feature Maturity - Comparison
    :header-rows: 1
    :stub-columns: 1
    :widths: auto

    * - Package Name üì¶
      - Operator Types üõ†Ô∏è
      - Operator Algebra üéØ
      - Algorithmic Suite üìö
      - Application Focus üéØ
      - Remarks üí¨

    * - PyLops
      - üî¥ Linear oeprators
      - üü° Partial
      - üî¥ Least-squares & sparse reconstructions
      - üü° Wave-processing, geophysics
      - üî¥ Linear operators based on NumPy's old matrix interface

    * - PyProximal
      - üî¥ Proximable functionals
      - üî¥ None
      - üî¥ Non-smooth convex optimization
      - üü¢ None
      - üî¥ Under early development, unstable API

    * - Operator Discretization Library (ODL)
      - üü¢ (Non)linear operators, differentiable/proximable functionals
      - üü¢ Full
      - üü¢ Smooth, non-smooth & hybrid (non-)convex optimization
      - üü¢ None
      - üî¥ Domain-specific language for mathematicians

    * - GlobalBioIm
      - üü¢ (Non)linear operators, differentiable/proximable functionals
      - üü¢ Full
      - üü¢ Smooth, non-smooth & hybrid convex optimization
      - üü¢ None
      - üî¥ MATLAB-based, unlike most DL frameworks

    * - SigPy
      - üü° Linear operators, proximable functionals
      - üü° Partial
      - üü° Smooth & non-smooth convex optimization
      - üî¥ MRI
      - üî¥ Very limited suite of operators, functionals, and algorithms

    * - SCICO
      - üü¢ (Non)linear operators, differentiable/proximable functionals
      - üü¢ Full
      - üü¢ Smooth, non-smooth & hybrid (non-)convex optimization
      - üü¢ None
      - üü° JAX-based (pure functions only, no mutation, etc.)

    * - DeepInv
      - üü¢ (Non)linear operators, differentiable/proximable functionals
      - üü° Partial
      - üü¢ Smooth, non-smooth & hybrid (non-)convex optimization
      - üü° Deep Learning
      - üü° PyTorch-based (lots of dependencies)

    * - Pyxu
      - üü¢ (Non)linear operators, differentiable/proximable functionals
      - üü¢ Full
      - üü¢ Smooth, non-smooth & hybrid (non-)convex optimization
      - üü¢ None
      - üü¢ Very rich suite of operators, functionals, algorithms & HPC features

Pyxu is unique in supporting both out-of-core and distributed computing. Additionally, it offers robust support for JIT
compilation and GPU computing via Numba and CuPy respectively. Most contenders either offer partial support or lack
these features altogether.

.. list-table:: HPC Features - Comparison
    :header-rows: 1
    :stub-columns: 1
    :widths: auto

    * - Package Name üì¶
      - Auto Diff/Prox ‚öôÔ∏è
      - GPU Computing üñ•Ô∏è
      - Out-of-core Computing üåê
      - JIT Compiling ‚è±Ô∏è

    * - PyLops
      - üî¥ No
      - üü¢ Yes (CuPy)
      - üî¥ No
      - üü° Partial (LLVM via Numba)

    * - PyProximal
      - üî¥ No
      - üî¥ No
      - üî¥ No
      - üî¥ No

    * - Operator Discretization Library (ODL)
      - üü¢ Yes
      - üü° Very limited (CUDA)
      - üî¥ No
      - üî¥ No

    * - GlobalBioIm
      - üü¢ Yes
      - üü¢ Yes (MATLAB)
      - üî¥ No
      - üî¥ No

    * - SigPy
      - üî¥ No
      - üü¢ Yes (CuPy)
      - üü° Manual (MPI)
      - üî¥ No

    * - SCICO
      - üü¢ Yes
      - üü¢ Yes + TPU (JAX)
      - üî¥ No
      - üü¢ Yes (XLA via JAX)

    * - DeepInv
      - üü¢ Autodiff support
      - üü¢ Yes (PyTorch)
      - üî¥ No
      - üü° Partial(XLA via torch.compile)

    * - Pyxu
      - üü¢ Yes
      - üü¢ Yes (CuPy)
      - üü¢ Yes (Dask)
      - üü¢ Yes (LLVM and CUDA via Numba)


Get Started Now!
----------------
Ready to dive in? üèä‚Äç‚ôÄÔ∏è Our `tutorial <https://pyxu-org.github.io/intro/tomo.html>`_ kicks off with an introductory overview of computational imaging and Bayesian
reconstruction.  Our `user guide <https://pyxu-org.github.io/guide/index.html>`_ then provides an in-depth tour of Pyxu's multitude of features through concrete examples.

So, gear up to embark on a transformative journey in computational imaging.

Join Our Community
------------------
Pyxu is open-source and ever-evolving üöÄ. Your contributions, whether big or small, can make a significant impact.  So
`come be a part of the community <https://pyxu-org.github.io/fair/index.html>`_ that's setting the pace for computational imaging üå±.

Let's accelerate the transition from research prototypes to production-ready solutions.  Dive into Pyxu today and make
computational imaging more powerful, efficient, and accessible for everyone! üéâ

Cite us
-------

::

   @software{pyxu-framework,
     author       = {Matthieu Simeoni and
                     Sepand Kashani and
                     Joan Ru√©-Queralt and
                     Pyxu Developers},
     title        = {pyxu-org/pyxu: pyxu},
     publisher    = {Zenodo},
     doi          = {10.5281/zenodo.4486431},
     url          = {https://doi.org/10.5281/zenodo.4486431}
   }
