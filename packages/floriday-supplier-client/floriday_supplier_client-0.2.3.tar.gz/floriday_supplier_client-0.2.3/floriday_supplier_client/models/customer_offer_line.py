# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v2 is **Main**._ * This version will be deprecated after April 2025. * This version will be removed after October 2025.  ---  üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerOfferLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_offer_line_id': 'str',
        'supply_request_line_id': 'str',
        'number_of_pieces': 'int',
        'trade_period': 'TradePeriod',
        'delivery_period': 'TradePeriod',
        'trade_item_id': 'str',
        'trade_item_version': 'int',
        'warehouse_id': 'str',
        'price_per_piece': 'Price',
        'volume_prices': 'list[VolumePrice]',
        'sales_unit': 'SalesUnit',
        'uses_catalog_availability': 'bool',
        'included_services': 'list[CommercialService]',
        'packing_configuration': 'PackingConfigurationBase',
        'counter_id': 'str'
    }

    attribute_map = {
        'customer_offer_line_id': 'customerOfferLineId',
        'supply_request_line_id': 'supplyRequestLineId',
        'number_of_pieces': 'numberOfPieces',
        'trade_period': 'tradePeriod',
        'delivery_period': 'deliveryPeriod',
        'trade_item_id': 'tradeItemId',
        'trade_item_version': 'tradeItemVersion',
        'warehouse_id': 'warehouseId',
        'price_per_piece': 'pricePerPiece',
        'volume_prices': 'volumePrices',
        'sales_unit': 'salesUnit',
        'uses_catalog_availability': 'usesCatalogAvailability',
        'included_services': 'includedServices',
        'packing_configuration': 'packingConfiguration',
        'counter_id': 'counterId'
    }

    def __init__(self, customer_offer_line_id=None, supply_request_line_id=None, number_of_pieces=None, trade_period=None, delivery_period=None, trade_item_id=None, trade_item_version=None, warehouse_id=None, price_per_piece=None, volume_prices=None, sales_unit=None, uses_catalog_availability=None, included_services=None, packing_configuration=None, counter_id=None):  # noqa: E501
        """CustomerOfferLine - a model defined in Swagger"""  # noqa: E501
        self._customer_offer_line_id = None
        self._supply_request_line_id = None
        self._number_of_pieces = None
        self._trade_period = None
        self._delivery_period = None
        self._trade_item_id = None
        self._trade_item_version = None
        self._warehouse_id = None
        self._price_per_piece = None
        self._volume_prices = None
        self._sales_unit = None
        self._uses_catalog_availability = None
        self._included_services = None
        self._packing_configuration = None
        self._counter_id = None
        self.discriminator = None
        self.customer_offer_line_id = customer_offer_line_id
        if supply_request_line_id is not None:
            self.supply_request_line_id = supply_request_line_id
        self.number_of_pieces = number_of_pieces
        self.trade_period = trade_period
        if delivery_period is not None:
            self.delivery_period = delivery_period
        self.trade_item_id = trade_item_id
        if trade_item_version is not None:
            self.trade_item_version = trade_item_version
        self.warehouse_id = warehouse_id
        self.price_per_piece = price_per_piece
        self.volume_prices = volume_prices
        self.sales_unit = sales_unit
        self.uses_catalog_availability = uses_catalog_availability
        self.included_services = included_services
        if packing_configuration is not None:
            self.packing_configuration = packing_configuration
        if counter_id is not None:
            self.counter_id = counter_id

    @property
    def customer_offer_line_id(self):
        """Gets the customer_offer_line_id of this CustomerOfferLine.  # noqa: E501


        :return: The customer_offer_line_id of this CustomerOfferLine.  # noqa: E501
        :rtype: str
        """
        return self._customer_offer_line_id

    @customer_offer_line_id.setter
    def customer_offer_line_id(self, customer_offer_line_id):
        """Sets the customer_offer_line_id of this CustomerOfferLine.


        :param customer_offer_line_id: The customer_offer_line_id of this CustomerOfferLine.  # noqa: E501
        :type: str
        """
        if customer_offer_line_id is None:
            raise ValueError("Invalid value for `customer_offer_line_id`, must not be `None`")  # noqa: E501

        self._customer_offer_line_id = customer_offer_line_id

    @property
    def supply_request_line_id(self):
        """Gets the supply_request_line_id of this CustomerOfferLine.  # noqa: E501


        :return: The supply_request_line_id of this CustomerOfferLine.  # noqa: E501
        :rtype: str
        """
        return self._supply_request_line_id

    @supply_request_line_id.setter
    def supply_request_line_id(self, supply_request_line_id):
        """Sets the supply_request_line_id of this CustomerOfferLine.


        :param supply_request_line_id: The supply_request_line_id of this CustomerOfferLine.  # noqa: E501
        :type: str
        """

        self._supply_request_line_id = supply_request_line_id

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this CustomerOfferLine.  # noqa: E501


        :return: The number_of_pieces of this CustomerOfferLine.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this CustomerOfferLine.


        :param number_of_pieces: The number_of_pieces of this CustomerOfferLine.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def trade_period(self):
        """Gets the trade_period of this CustomerOfferLine.  # noqa: E501


        :return: The trade_period of this CustomerOfferLine.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._trade_period

    @trade_period.setter
    def trade_period(self, trade_period):
        """Sets the trade_period of this CustomerOfferLine.


        :param trade_period: The trade_period of this CustomerOfferLine.  # noqa: E501
        :type: TradePeriod
        """
        if trade_period is None:
            raise ValueError("Invalid value for `trade_period`, must not be `None`")  # noqa: E501

        self._trade_period = trade_period

    @property
    def delivery_period(self):
        """Gets the delivery_period of this CustomerOfferLine.  # noqa: E501


        :return: The delivery_period of this CustomerOfferLine.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._delivery_period

    @delivery_period.setter
    def delivery_period(self, delivery_period):
        """Sets the delivery_period of this CustomerOfferLine.


        :param delivery_period: The delivery_period of this CustomerOfferLine.  # noqa: E501
        :type: TradePeriod
        """

        self._delivery_period = delivery_period

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this CustomerOfferLine.  # noqa: E501


        :return: The trade_item_id of this CustomerOfferLine.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this CustomerOfferLine.


        :param trade_item_id: The trade_item_id of this CustomerOfferLine.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def trade_item_version(self):
        """Gets the trade_item_version of this CustomerOfferLine.  # noqa: E501


        :return: The trade_item_version of this CustomerOfferLine.  # noqa: E501
        :rtype: int
        """
        return self._trade_item_version

    @trade_item_version.setter
    def trade_item_version(self, trade_item_version):
        """Sets the trade_item_version of this CustomerOfferLine.


        :param trade_item_version: The trade_item_version of this CustomerOfferLine.  # noqa: E501
        :type: int
        """

        self._trade_item_version = trade_item_version

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CustomerOfferLine.  # noqa: E501


        :return: The warehouse_id of this CustomerOfferLine.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CustomerOfferLine.


        :param warehouse_id: The warehouse_id of this CustomerOfferLine.  # noqa: E501
        :type: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this CustomerOfferLine.  # noqa: E501


        :return: The price_per_piece of this CustomerOfferLine.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this CustomerOfferLine.


        :param price_per_piece: The price_per_piece of this CustomerOfferLine.  # noqa: E501
        :type: Price
        """
        if price_per_piece is None:
            raise ValueError("Invalid value for `price_per_piece`, must not be `None`")  # noqa: E501

        self._price_per_piece = price_per_piece

    @property
    def volume_prices(self):
        """Gets the volume_prices of this CustomerOfferLine.  # noqa: E501


        :return: The volume_prices of this CustomerOfferLine.  # noqa: E501
        :rtype: list[VolumePrice]
        """
        return self._volume_prices

    @volume_prices.setter
    def volume_prices(self, volume_prices):
        """Sets the volume_prices of this CustomerOfferLine.


        :param volume_prices: The volume_prices of this CustomerOfferLine.  # noqa: E501
        :type: list[VolumePrice]
        """
        if volume_prices is None:
            raise ValueError("Invalid value for `volume_prices`, must not be `None`")  # noqa: E501

        self._volume_prices = volume_prices

    @property
    def sales_unit(self):
        """Gets the sales_unit of this CustomerOfferLine.  # noqa: E501


        :return: The sales_unit of this CustomerOfferLine.  # noqa: E501
        :rtype: SalesUnit
        """
        return self._sales_unit

    @sales_unit.setter
    def sales_unit(self, sales_unit):
        """Sets the sales_unit of this CustomerOfferLine.


        :param sales_unit: The sales_unit of this CustomerOfferLine.  # noqa: E501
        :type: SalesUnit
        """
        if sales_unit is None:
            raise ValueError("Invalid value for `sales_unit`, must not be `None`")  # noqa: E501

        self._sales_unit = sales_unit

    @property
    def uses_catalog_availability(self):
        """Gets the uses_catalog_availability of this CustomerOfferLine.  # noqa: E501


        :return: The uses_catalog_availability of this CustomerOfferLine.  # noqa: E501
        :rtype: bool
        """
        return self._uses_catalog_availability

    @uses_catalog_availability.setter
    def uses_catalog_availability(self, uses_catalog_availability):
        """Sets the uses_catalog_availability of this CustomerOfferLine.


        :param uses_catalog_availability: The uses_catalog_availability of this CustomerOfferLine.  # noqa: E501
        :type: bool
        """
        if uses_catalog_availability is None:
            raise ValueError("Invalid value for `uses_catalog_availability`, must not be `None`")  # noqa: E501

        self._uses_catalog_availability = uses_catalog_availability

    @property
    def included_services(self):
        """Gets the included_services of this CustomerOfferLine.  # noqa: E501


        :return: The included_services of this CustomerOfferLine.  # noqa: E501
        :rtype: list[CommercialService]
        """
        return self._included_services

    @included_services.setter
    def included_services(self, included_services):
        """Sets the included_services of this CustomerOfferLine.


        :param included_services: The included_services of this CustomerOfferLine.  # noqa: E501
        :type: list[CommercialService]
        """
        if included_services is None:
            raise ValueError("Invalid value for `included_services`, must not be `None`")  # noqa: E501

        self._included_services = included_services

    @property
    def packing_configuration(self):
        """Gets the packing_configuration of this CustomerOfferLine.  # noqa: E501


        :return: The packing_configuration of this CustomerOfferLine.  # noqa: E501
        :rtype: PackingConfigurationBase
        """
        return self._packing_configuration

    @packing_configuration.setter
    def packing_configuration(self, packing_configuration):
        """Sets the packing_configuration of this CustomerOfferLine.


        :param packing_configuration: The packing_configuration of this CustomerOfferLine.  # noqa: E501
        :type: PackingConfigurationBase
        """

        self._packing_configuration = packing_configuration

    @property
    def counter_id(self):
        """Gets the counter_id of this CustomerOfferLine.  # noqa: E501


        :return: The counter_id of this CustomerOfferLine.  # noqa: E501
        :rtype: str
        """
        return self._counter_id

    @counter_id.setter
    def counter_id(self, counter_id):
        """Sets the counter_id of this CustomerOfferLine.


        :param counter_id: The counter_id of this CustomerOfferLine.  # noqa: E501
        :type: str
        """

        self._counter_id = counter_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerOfferLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerOfferLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
