# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v2 is **Main**._ * This version will be deprecated after April 2025. * This version will be removed after October 2025.  ---  üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddClockSupplyLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_id': 'str',
        'auction_date': 'datetime',
        'auction_remark': 'str',
        'minimum_number_of_pieces_reserved_for_auction': 'int',
        'minimum_price_per_piece': 'AddPrice',
        'number_of_pieces': 'int',
        'auction_group_code': 'int',
        'supply_line_id': 'str',
        'clock_presales': 'AddClockPresales',
        'photos': 'list[AddClockSupplyLinePhoto]'
    }

    attribute_map = {
        'batch_id': 'batchId',
        'auction_date': 'auctionDate',
        'auction_remark': 'auctionRemark',
        'minimum_number_of_pieces_reserved_for_auction': 'minimumNumberOfPiecesReservedForAuction',
        'minimum_price_per_piece': 'minimumPricePerPiece',
        'number_of_pieces': 'numberOfPieces',
        'auction_group_code': 'auctionGroupCode',
        'supply_line_id': 'supplyLineId',
        'clock_presales': 'clockPresales',
        'photos': 'photos'
    }

    def __init__(self, batch_id=None, auction_date=None, auction_remark=None, minimum_number_of_pieces_reserved_for_auction=None, minimum_price_per_piece=None, number_of_pieces=None, auction_group_code=None, supply_line_id=None, clock_presales=None, photos=None):  # noqa: E501
        """AddClockSupplyLine - a model defined in Swagger"""  # noqa: E501
        self._batch_id = None
        self._auction_date = None
        self._auction_remark = None
        self._minimum_number_of_pieces_reserved_for_auction = None
        self._minimum_price_per_piece = None
        self._number_of_pieces = None
        self._auction_group_code = None
        self._supply_line_id = None
        self._clock_presales = None
        self._photos = None
        self.discriminator = None
        self.batch_id = batch_id
        self.auction_date = auction_date
        if auction_remark is not None:
            self.auction_remark = auction_remark
        self.minimum_number_of_pieces_reserved_for_auction = minimum_number_of_pieces_reserved_for_auction
        self.minimum_price_per_piece = minimum_price_per_piece
        self.number_of_pieces = number_of_pieces
        if auction_group_code is not None:
            self.auction_group_code = auction_group_code
        self.supply_line_id = supply_line_id
        if clock_presales is not None:
            self.clock_presales = clock_presales
        self.photos = photos

    @property
    def batch_id(self):
        """Gets the batch_id of this AddClockSupplyLine.  # noqa: E501

        NB. batch should be allocated to RFH warehouse!  # noqa: E501

        :return: The batch_id of this AddClockSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this AddClockSupplyLine.

        NB. batch should be allocated to RFH warehouse!  # noqa: E501

        :param batch_id: The batch_id of this AddClockSupplyLine.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def auction_date(self):
        """Gets the auction_date of this AddClockSupplyLine.  # noqa: E501


        :return: The auction_date of this AddClockSupplyLine.  # noqa: E501
        :rtype: datetime
        """
        return self._auction_date

    @auction_date.setter
    def auction_date(self, auction_date):
        """Sets the auction_date of this AddClockSupplyLine.


        :param auction_date: The auction_date of this AddClockSupplyLine.  # noqa: E501
        :type: datetime
        """
        if auction_date is None:
            raise ValueError("Invalid value for `auction_date`, must not be `None`")  # noqa: E501

        self._auction_date = auction_date

    @property
    def auction_remark(self):
        """Gets the auction_remark of this AddClockSupplyLine.  # noqa: E501


        :return: The auction_remark of this AddClockSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._auction_remark

    @auction_remark.setter
    def auction_remark(self, auction_remark):
        """Sets the auction_remark of this AddClockSupplyLine.


        :param auction_remark: The auction_remark of this AddClockSupplyLine.  # noqa: E501
        :type: str
        """

        self._auction_remark = auction_remark

    @property
    def minimum_number_of_pieces_reserved_for_auction(self):
        """Gets the minimum_number_of_pieces_reserved_for_auction of this AddClockSupplyLine.  # noqa: E501

        The minimum quantity that should be sold at auction at the specified auctionDate.  # noqa: E501

        :return: The minimum_number_of_pieces_reserved_for_auction of this AddClockSupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_pieces_reserved_for_auction

    @minimum_number_of_pieces_reserved_for_auction.setter
    def minimum_number_of_pieces_reserved_for_auction(self, minimum_number_of_pieces_reserved_for_auction):
        """Sets the minimum_number_of_pieces_reserved_for_auction of this AddClockSupplyLine.

        The minimum quantity that should be sold at auction at the specified auctionDate.  # noqa: E501

        :param minimum_number_of_pieces_reserved_for_auction: The minimum_number_of_pieces_reserved_for_auction of this AddClockSupplyLine.  # noqa: E501
        :type: int
        """
        if minimum_number_of_pieces_reserved_for_auction is None:
            raise ValueError("Invalid value for `minimum_number_of_pieces_reserved_for_auction`, must not be `None`")  # noqa: E501

        self._minimum_number_of_pieces_reserved_for_auction = minimum_number_of_pieces_reserved_for_auction

    @property
    def minimum_price_per_piece(self):
        """Gets the minimum_price_per_piece of this AddClockSupplyLine.  # noqa: E501


        :return: The minimum_price_per_piece of this AddClockSupplyLine.  # noqa: E501
        :rtype: AddPrice
        """
        return self._minimum_price_per_piece

    @minimum_price_per_piece.setter
    def minimum_price_per_piece(self, minimum_price_per_piece):
        """Sets the minimum_price_per_piece of this AddClockSupplyLine.


        :param minimum_price_per_piece: The minimum_price_per_piece of this AddClockSupplyLine.  # noqa: E501
        :type: AddPrice
        """
        if minimum_price_per_piece is None:
            raise ValueError("Invalid value for `minimum_price_per_piece`, must not be `None`")  # noqa: E501

        self._minimum_price_per_piece = minimum_price_per_piece

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this AddClockSupplyLine.  # noqa: E501

        Quantity of the batch that is allocated for auction at the specified auctionDate.  # noqa: E501

        :return: The number_of_pieces of this AddClockSupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this AddClockSupplyLine.

        Quantity of the batch that is allocated for auction at the specified auctionDate.  # noqa: E501

        :param number_of_pieces: The number_of_pieces of this AddClockSupplyLine.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def auction_group_code(self):
        """Gets the auction_group_code of this AddClockSupplyLine.  # noqa: E501


        :return: The auction_group_code of this AddClockSupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._auction_group_code

    @auction_group_code.setter
    def auction_group_code(self, auction_group_code):
        """Sets the auction_group_code of this AddClockSupplyLine.


        :param auction_group_code: The auction_group_code of this AddClockSupplyLine.  # noqa: E501
        :type: int
        """

        self._auction_group_code = auction_group_code

    @property
    def supply_line_id(self):
        """Gets the supply_line_id of this AddClockSupplyLine.  # noqa: E501

        Generated by ERP.  # noqa: E501

        :return: The supply_line_id of this AddClockSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._supply_line_id

    @supply_line_id.setter
    def supply_line_id(self, supply_line_id):
        """Sets the supply_line_id of this AddClockSupplyLine.

        Generated by ERP.  # noqa: E501

        :param supply_line_id: The supply_line_id of this AddClockSupplyLine.  # noqa: E501
        :type: str
        """
        if supply_line_id is None:
            raise ValueError("Invalid value for `supply_line_id`, must not be `None`")  # noqa: E501

        self._supply_line_id = supply_line_id

    @property
    def clock_presales(self):
        """Gets the clock_presales of this AddClockSupplyLine.  # noqa: E501


        :return: The clock_presales of this AddClockSupplyLine.  # noqa: E501
        :rtype: AddClockPresales
        """
        return self._clock_presales

    @clock_presales.setter
    def clock_presales(self, clock_presales):
        """Sets the clock_presales of this AddClockSupplyLine.


        :param clock_presales: The clock_presales of this AddClockSupplyLine.  # noqa: E501
        :type: AddClockPresales
        """

        self._clock_presales = clock_presales

    @property
    def photos(self):
        """Gets the photos of this AddClockSupplyLine.  # noqa: E501


        :return: The photos of this AddClockSupplyLine.  # noqa: E501
        :rtype: list[AddClockSupplyLinePhoto]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this AddClockSupplyLine.


        :param photos: The photos of this AddClockSupplyLine.  # noqa: E501
        :type: list[AddClockSupplyLinePhoto]
        """
        if photos is None:
            raise ValueError("Invalid value for `photos`, must not be `None`")  # noqa: E501

        self._photos = photos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddClockSupplyLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddClockSupplyLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
