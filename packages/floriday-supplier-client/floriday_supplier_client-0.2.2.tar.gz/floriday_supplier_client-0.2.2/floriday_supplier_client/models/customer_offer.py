# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v2 is **Main**._ * This version will be deprecated after April 2025. * This version will be removed after October 2025.  ---  üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_offer_id': 'str',
        'supply_request_id': 'str',
        'creation_date_time': 'datetime',
        'customer_offer_lines': 'list[CustomerOfferLine]',
        'customer_offer_type': 'CustomerOfferType',
        'customer_organization_ids': 'list[str]',
        'agreement_reference': 'AgreementReference',
        'is_draft': 'bool',
        'image_url': 'str',
        'title': 'str',
        'description': 'str',
        'quantity_unit_used': 'Unit',
        'sequence_number': 'int'
    }

    attribute_map = {
        'customer_offer_id': 'customerOfferId',
        'supply_request_id': 'supplyRequestId',
        'creation_date_time': 'creationDateTime',
        'customer_offer_lines': 'customerOfferLines',
        'customer_offer_type': 'customerOfferType',
        'customer_organization_ids': 'customerOrganizationIds',
        'agreement_reference': 'agreementReference',
        'is_draft': 'isDraft',
        'image_url': 'imageUrl',
        'title': 'title',
        'description': 'description',
        'quantity_unit_used': 'quantityUnitUsed',
        'sequence_number': 'sequenceNumber'
    }

    def __init__(self, customer_offer_id=None, supply_request_id=None, creation_date_time=None, customer_offer_lines=None, customer_offer_type=None, customer_organization_ids=None, agreement_reference=None, is_draft=None, image_url=None, title=None, description=None, quantity_unit_used=None, sequence_number=None):  # noqa: E501
        """CustomerOffer - a model defined in Swagger"""  # noqa: E501
        self._customer_offer_id = None
        self._supply_request_id = None
        self._creation_date_time = None
        self._customer_offer_lines = None
        self._customer_offer_type = None
        self._customer_organization_ids = None
        self._agreement_reference = None
        self._is_draft = None
        self._image_url = None
        self._title = None
        self._description = None
        self._quantity_unit_used = None
        self._sequence_number = None
        self.discriminator = None
        self.customer_offer_id = customer_offer_id
        if supply_request_id is not None:
            self.supply_request_id = supply_request_id
        self.creation_date_time = creation_date_time
        self.customer_offer_lines = customer_offer_lines
        self.customer_offer_type = customer_offer_type
        self.customer_organization_ids = customer_organization_ids
        if agreement_reference is not None:
            self.agreement_reference = agreement_reference
        self.is_draft = is_draft
        if image_url is not None:
            self.image_url = image_url
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        self.quantity_unit_used = quantity_unit_used
        self.sequence_number = sequence_number

    @property
    def customer_offer_id(self):
        """Gets the customer_offer_id of this CustomerOffer.  # noqa: E501


        :return: The customer_offer_id of this CustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._customer_offer_id

    @customer_offer_id.setter
    def customer_offer_id(self, customer_offer_id):
        """Sets the customer_offer_id of this CustomerOffer.


        :param customer_offer_id: The customer_offer_id of this CustomerOffer.  # noqa: E501
        :type: str
        """
        if customer_offer_id is None:
            raise ValueError("Invalid value for `customer_offer_id`, must not be `None`")  # noqa: E501

        self._customer_offer_id = customer_offer_id

    @property
    def supply_request_id(self):
        """Gets the supply_request_id of this CustomerOffer.  # noqa: E501


        :return: The supply_request_id of this CustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._supply_request_id

    @supply_request_id.setter
    def supply_request_id(self, supply_request_id):
        """Sets the supply_request_id of this CustomerOffer.


        :param supply_request_id: The supply_request_id of this CustomerOffer.  # noqa: E501
        :type: str
        """

        self._supply_request_id = supply_request_id

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this CustomerOffer.  # noqa: E501


        :return: The creation_date_time of this CustomerOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this CustomerOffer.


        :param creation_date_time: The creation_date_time of this CustomerOffer.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def customer_offer_lines(self):
        """Gets the customer_offer_lines of this CustomerOffer.  # noqa: E501


        :return: The customer_offer_lines of this CustomerOffer.  # noqa: E501
        :rtype: list[CustomerOfferLine]
        """
        return self._customer_offer_lines

    @customer_offer_lines.setter
    def customer_offer_lines(self, customer_offer_lines):
        """Sets the customer_offer_lines of this CustomerOffer.


        :param customer_offer_lines: The customer_offer_lines of this CustomerOffer.  # noqa: E501
        :type: list[CustomerOfferLine]
        """
        if customer_offer_lines is None:
            raise ValueError("Invalid value for `customer_offer_lines`, must not be `None`")  # noqa: E501

        self._customer_offer_lines = customer_offer_lines

    @property
    def customer_offer_type(self):
        """Gets the customer_offer_type of this CustomerOffer.  # noqa: E501


        :return: The customer_offer_type of this CustomerOffer.  # noqa: E501
        :rtype: CustomerOfferType
        """
        return self._customer_offer_type

    @customer_offer_type.setter
    def customer_offer_type(self, customer_offer_type):
        """Sets the customer_offer_type of this CustomerOffer.


        :param customer_offer_type: The customer_offer_type of this CustomerOffer.  # noqa: E501
        :type: CustomerOfferType
        """
        if customer_offer_type is None:
            raise ValueError("Invalid value for `customer_offer_type`, must not be `None`")  # noqa: E501

        self._customer_offer_type = customer_offer_type

    @property
    def customer_organization_ids(self):
        """Gets the customer_organization_ids of this CustomerOffer.  # noqa: E501


        :return: The customer_organization_ids of this CustomerOffer.  # noqa: E501
        :rtype: list[str]
        """
        return self._customer_organization_ids

    @customer_organization_ids.setter
    def customer_organization_ids(self, customer_organization_ids):
        """Sets the customer_organization_ids of this CustomerOffer.


        :param customer_organization_ids: The customer_organization_ids of this CustomerOffer.  # noqa: E501
        :type: list[str]
        """
        if customer_organization_ids is None:
            raise ValueError("Invalid value for `customer_organization_ids`, must not be `None`")  # noqa: E501

        self._customer_organization_ids = customer_organization_ids

    @property
    def agreement_reference(self):
        """Gets the agreement_reference of this CustomerOffer.  # noqa: E501


        :return: The agreement_reference of this CustomerOffer.  # noqa: E501
        :rtype: AgreementReference
        """
        return self._agreement_reference

    @agreement_reference.setter
    def agreement_reference(self, agreement_reference):
        """Sets the agreement_reference of this CustomerOffer.


        :param agreement_reference: The agreement_reference of this CustomerOffer.  # noqa: E501
        :type: AgreementReference
        """

        self._agreement_reference = agreement_reference

    @property
    def is_draft(self):
        """Gets the is_draft of this CustomerOffer.  # noqa: E501


        :return: The is_draft of this CustomerOffer.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this CustomerOffer.


        :param is_draft: The is_draft of this CustomerOffer.  # noqa: E501
        :type: bool
        """
        if is_draft is None:
            raise ValueError("Invalid value for `is_draft`, must not be `None`")  # noqa: E501

        self._is_draft = is_draft

    @property
    def image_url(self):
        """Gets the image_url of this CustomerOffer.  # noqa: E501


        :return: The image_url of this CustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this CustomerOffer.


        :param image_url: The image_url of this CustomerOffer.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def title(self):
        """Gets the title of this CustomerOffer.  # noqa: E501


        :return: The title of this CustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomerOffer.


        :param title: The title of this CustomerOffer.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CustomerOffer.  # noqa: E501


        :return: The description of this CustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomerOffer.


        :param description: The description of this CustomerOffer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity_unit_used(self):
        """Gets the quantity_unit_used of this CustomerOffer.  # noqa: E501


        :return: The quantity_unit_used of this CustomerOffer.  # noqa: E501
        :rtype: Unit
        """
        return self._quantity_unit_used

    @quantity_unit_used.setter
    def quantity_unit_used(self, quantity_unit_used):
        """Sets the quantity_unit_used of this CustomerOffer.


        :param quantity_unit_used: The quantity_unit_used of this CustomerOffer.  # noqa: E501
        :type: Unit
        """
        if quantity_unit_used is None:
            raise ValueError("Invalid value for `quantity_unit_used`, must not be `None`")  # noqa: E501

        self._quantity_unit_used = quantity_unit_used

    @property
    def sequence_number(self):
        """Gets the sequence_number of this CustomerOffer.  # noqa: E501


        :return: The sequence_number of this CustomerOffer.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this CustomerOffer.


        :param sequence_number: The sequence_number of this CustomerOffer.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
