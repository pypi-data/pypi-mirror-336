# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v2 is **Main**._ * This version will be deprecated after April 2025. * This version will be removed after October 2025.  ---  üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchBaseSupply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_reference': 'str',
        'batch_id': 'str',
        'batch_date': 'datetime',
        'order_period': 'TradePeriod',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'base_price_per_piece': 'Price',
        'trade_item_id': 'str',
        'warehouse_id': 'str',
        'initial_number_of_pieces': 'int',
        'current_number_of_pieces': 'int',
        'is_sold_out': 'bool',
        'is_deleted': 'bool',
        'packing_configurations': 'list[BatchBaseSupplyPackingConfiguration]',
        'price_group_prices': 'list[BatchBaseSupplyPriceGroupPrice]'
    }

    attribute_map = {
        'batch_reference': 'batchReference',
        'batch_id': 'batchId',
        'batch_date': 'batchDate',
        'order_period': 'orderPeriod',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'base_price_per_piece': 'basePricePerPiece',
        'trade_item_id': 'tradeItemId',
        'warehouse_id': 'warehouseId',
        'initial_number_of_pieces': 'initialNumberOfPieces',
        'current_number_of_pieces': 'currentNumberOfPieces',
        'is_sold_out': 'isSoldOut',
        'is_deleted': 'isDeleted',
        'packing_configurations': 'packingConfigurations',
        'price_group_prices': 'priceGroupPrices'
    }

    def __init__(self, batch_reference=None, batch_id=None, batch_date=None, order_period=None, creation_date_time=None, last_modified_date_time=None, base_price_per_piece=None, trade_item_id=None, warehouse_id=None, initial_number_of_pieces=None, current_number_of_pieces=None, is_sold_out=None, is_deleted=None, packing_configurations=None, price_group_prices=None):  # noqa: E501
        """BatchBaseSupply - a model defined in Swagger"""  # noqa: E501
        self._batch_reference = None
        self._batch_id = None
        self._batch_date = None
        self._order_period = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._base_price_per_piece = None
        self._trade_item_id = None
        self._warehouse_id = None
        self._initial_number_of_pieces = None
        self._current_number_of_pieces = None
        self._is_sold_out = None
        self._is_deleted = None
        self._packing_configurations = None
        self._price_group_prices = None
        self.discriminator = None
        if batch_reference is not None:
            self.batch_reference = batch_reference
        self.batch_id = batch_id
        self.batch_date = batch_date
        self.order_period = order_period
        self.creation_date_time = creation_date_time
        self.last_modified_date_time = last_modified_date_time
        if base_price_per_piece is not None:
            self.base_price_per_piece = base_price_per_piece
        self.trade_item_id = trade_item_id
        self.warehouse_id = warehouse_id
        self.initial_number_of_pieces = initial_number_of_pieces
        self.current_number_of_pieces = current_number_of_pieces
        self.is_sold_out = is_sold_out
        self.is_deleted = is_deleted
        self.packing_configurations = packing_configurations
        self.price_group_prices = price_group_prices

    @property
    def batch_reference(self):
        """Gets the batch_reference of this BatchBaseSupply.  # noqa: E501


        :return: The batch_reference of this BatchBaseSupply.  # noqa: E501
        :rtype: str
        """
        return self._batch_reference

    @batch_reference.setter
    def batch_reference(self, batch_reference):
        """Sets the batch_reference of this BatchBaseSupply.


        :param batch_reference: The batch_reference of this BatchBaseSupply.  # noqa: E501
        :type: str
        """

        self._batch_reference = batch_reference

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchBaseSupply.  # noqa: E501


        :return: The batch_id of this BatchBaseSupply.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchBaseSupply.


        :param batch_id: The batch_id of this BatchBaseSupply.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def batch_date(self):
        """Gets the batch_date of this BatchBaseSupply.  # noqa: E501


        :return: The batch_date of this BatchBaseSupply.  # noqa: E501
        :rtype: datetime
        """
        return self._batch_date

    @batch_date.setter
    def batch_date(self, batch_date):
        """Sets the batch_date of this BatchBaseSupply.


        :param batch_date: The batch_date of this BatchBaseSupply.  # noqa: E501
        :type: datetime
        """
        if batch_date is None:
            raise ValueError("Invalid value for `batch_date`, must not be `None`")  # noqa: E501

        self._batch_date = batch_date

    @property
    def order_period(self):
        """Gets the order_period of this BatchBaseSupply.  # noqa: E501


        :return: The order_period of this BatchBaseSupply.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._order_period

    @order_period.setter
    def order_period(self, order_period):
        """Sets the order_period of this BatchBaseSupply.


        :param order_period: The order_period of this BatchBaseSupply.  # noqa: E501
        :type: TradePeriod
        """
        if order_period is None:
            raise ValueError("Invalid value for `order_period`, must not be `None`")  # noqa: E501

        self._order_period = order_period

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this BatchBaseSupply.  # noqa: E501


        :return: The creation_date_time of this BatchBaseSupply.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this BatchBaseSupply.


        :param creation_date_time: The creation_date_time of this BatchBaseSupply.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this BatchBaseSupply.  # noqa: E501


        :return: The last_modified_date_time of this BatchBaseSupply.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this BatchBaseSupply.


        :param last_modified_date_time: The last_modified_date_time of this BatchBaseSupply.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    @property
    def base_price_per_piece(self):
        """Gets the base_price_per_piece of this BatchBaseSupply.  # noqa: E501


        :return: The base_price_per_piece of this BatchBaseSupply.  # noqa: E501
        :rtype: Price
        """
        return self._base_price_per_piece

    @base_price_per_piece.setter
    def base_price_per_piece(self, base_price_per_piece):
        """Sets the base_price_per_piece of this BatchBaseSupply.


        :param base_price_per_piece: The base_price_per_piece of this BatchBaseSupply.  # noqa: E501
        :type: Price
        """

        self._base_price_per_piece = base_price_per_piece

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this BatchBaseSupply.  # noqa: E501


        :return: The trade_item_id of this BatchBaseSupply.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this BatchBaseSupply.


        :param trade_item_id: The trade_item_id of this BatchBaseSupply.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this BatchBaseSupply.  # noqa: E501


        :return: The warehouse_id of this BatchBaseSupply.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this BatchBaseSupply.


        :param warehouse_id: The warehouse_id of this BatchBaseSupply.  # noqa: E501
        :type: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def initial_number_of_pieces(self):
        """Gets the initial_number_of_pieces of this BatchBaseSupply.  # noqa: E501


        :return: The initial_number_of_pieces of this BatchBaseSupply.  # noqa: E501
        :rtype: int
        """
        return self._initial_number_of_pieces

    @initial_number_of_pieces.setter
    def initial_number_of_pieces(self, initial_number_of_pieces):
        """Sets the initial_number_of_pieces of this BatchBaseSupply.


        :param initial_number_of_pieces: The initial_number_of_pieces of this BatchBaseSupply.  # noqa: E501
        :type: int
        """
        if initial_number_of_pieces is None:
            raise ValueError("Invalid value for `initial_number_of_pieces`, must not be `None`")  # noqa: E501

        self._initial_number_of_pieces = initial_number_of_pieces

    @property
    def current_number_of_pieces(self):
        """Gets the current_number_of_pieces of this BatchBaseSupply.  # noqa: E501


        :return: The current_number_of_pieces of this BatchBaseSupply.  # noqa: E501
        :rtype: int
        """
        return self._current_number_of_pieces

    @current_number_of_pieces.setter
    def current_number_of_pieces(self, current_number_of_pieces):
        """Sets the current_number_of_pieces of this BatchBaseSupply.


        :param current_number_of_pieces: The current_number_of_pieces of this BatchBaseSupply.  # noqa: E501
        :type: int
        """
        if current_number_of_pieces is None:
            raise ValueError("Invalid value for `current_number_of_pieces`, must not be `None`")  # noqa: E501

        self._current_number_of_pieces = current_number_of_pieces

    @property
    def is_sold_out(self):
        """Gets the is_sold_out of this BatchBaseSupply.  # noqa: E501


        :return: The is_sold_out of this BatchBaseSupply.  # noqa: E501
        :rtype: bool
        """
        return self._is_sold_out

    @is_sold_out.setter
    def is_sold_out(self, is_sold_out):
        """Sets the is_sold_out of this BatchBaseSupply.


        :param is_sold_out: The is_sold_out of this BatchBaseSupply.  # noqa: E501
        :type: bool
        """
        if is_sold_out is None:
            raise ValueError("Invalid value for `is_sold_out`, must not be `None`")  # noqa: E501

        self._is_sold_out = is_sold_out

    @property
    def is_deleted(self):
        """Gets the is_deleted of this BatchBaseSupply.  # noqa: E501


        :return: The is_deleted of this BatchBaseSupply.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this BatchBaseSupply.


        :param is_deleted: The is_deleted of this BatchBaseSupply.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def packing_configurations(self):
        """Gets the packing_configurations of this BatchBaseSupply.  # noqa: E501


        :return: The packing_configurations of this BatchBaseSupply.  # noqa: E501
        :rtype: list[BatchBaseSupplyPackingConfiguration]
        """
        return self._packing_configurations

    @packing_configurations.setter
    def packing_configurations(self, packing_configurations):
        """Sets the packing_configurations of this BatchBaseSupply.


        :param packing_configurations: The packing_configurations of this BatchBaseSupply.  # noqa: E501
        :type: list[BatchBaseSupplyPackingConfiguration]
        """
        if packing_configurations is None:
            raise ValueError("Invalid value for `packing_configurations`, must not be `None`")  # noqa: E501

        self._packing_configurations = packing_configurations

    @property
    def price_group_prices(self):
        """Gets the price_group_prices of this BatchBaseSupply.  # noqa: E501


        :return: The price_group_prices of this BatchBaseSupply.  # noqa: E501
        :rtype: list[BatchBaseSupplyPriceGroupPrice]
        """
        return self._price_group_prices

    @price_group_prices.setter
    def price_group_prices(self, price_group_prices):
        """Sets the price_group_prices of this BatchBaseSupply.


        :param price_group_prices: The price_group_prices of this BatchBaseSupply.  # noqa: E501
        :type: list[BatchBaseSupplyPriceGroupPrice]
        """
        if price_group_prices is None:
            raise ValueError("Invalid value for `price_group_prices`, must not be `None`")  # noqa: E501

        self._price_group_prices = price_group_prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchBaseSupply, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchBaseSupply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
