"""
Floriday client module providing a simplified API for interacting with the Floriday API.

This module implements the improved API design as outlined in the API improvement suggestions.
"""

from typing import Type, TypeVar, Optional, Callable, Union

from floriday_supplier_client.api_factory import ApiFactory
from floriday_supplier_client.sync import (
    sync_entities,
    EntitySynchronizer,
    EntitySyncResult,
)

# Type variable for generic API classes
T = TypeVar("T")


class ApiWrapper:
    """
    Wrapper for API classes that provides additional functionality.

    This class wraps the standard API classes generated by Swagger and adds
    additional methods for synchronization and other common operations.
    """

    def __init__(self, api_instance, client):
        """
        Initialize an API wrapper.

        Args:
            api_instance: The API instance to wrap
            client: The Floriday client that created this wrapper
        """
        self._api_instance = api_instance
        self._client = client
        self._entity_type = self._get_entity_type()

    def _get_entity_type(self) -> str:
        """
        Get the entity type based on the API class name.

        Returns:
            A string representing the entity type (e.g., "trade_items" for TradeItemsApi)
        """
        # Extract entity type from API class name (e.g., "TradeItemsApi" -> "trade_items")
        class_name = self._api_instance.__class__.__name__
        if class_name.endswith("Api"):
            entity_name = class_name[:-3]  # Remove 'Api' suffix
            # Convert CamelCase to snake_case
            import re

            entity_type = re.sub(r"(?<!^)(?=[A-Z])", "_", entity_name).lower()
            return entity_type
        return "unknown"

    def __getattr__(self, name):
        """
        Delegate attribute access to the wrapped API instance.

        Args:
            name: The name of the attribute to access

        Returns:
            The attribute from the wrapped API instance
        """
        return getattr(self._api_instance, name)

    def sync(
        self,
        start_seq: Optional[int] = None,
        on_item: Optional[Callable] = None,
        batch_size: int = 50,
        rate_limit: float = 0.5,
    ) -> EntitySyncResult:
        """
        Synchronize entities using sequence numbers.

        Args:
            start_seq: Optional starting sequence number. If None, starts from the beginning.
            on_item: Optional callback function to process each entity.
            batch_size: Number of entities to retrieve in each API call.
            rate_limit: Delay in seconds between API calls to avoid rate limiting.

        Returns:
            An EntitySyncResult containing sync statistics.

        Example:
            ```python
            # Synchronize trade items
            result = client.trade_items.sync(
                start_seq=last_sequence_number,
                on_item=lambda item: db.save_item(item)
            )
            print(f"Processed {result.entities_processed} items")
            ```
        """
        # Find the appropriate method for fetching entities by sequence number
        fetch_method = self._find_sequence_method()
        if not fetch_method:
            raise ValueError(f"Could not find sequence method for {self._entity_type}")

        return sync_entities(
            entity_type=self._entity_type,
            fetch_entities_callback=fetch_method,
            persist_entity_callback=on_item,
            start_seq_number=start_seq,
            batch_size=batch_size,
            rate_limit_delay=rate_limit,
        )

    # sync_iter method will be added in a future increment

    def create_sync(self, start_seq: Optional[int] = None) -> EntitySynchronizer:
        """
        Create a synchronizer for advanced control over the synchronization process.

        Args:
            start_seq: Optional starting sequence number. If None, starts from the beginning.

        Returns:
            An EntitySynchronizer instance that can be configured and executed.

        Example:
            ```python
            # Create a synchronizer with advanced options
            sync = client.trade_items.create_sync(start_seq=0)

            # Configure the synchronizer
            sync.batch_size = 100
            sync.rate_limit_delay = 0.2

            # Add event handlers
            sync.on_batch_start = lambda seq: print(f"Starting batch at sequence {seq}")
            sync.on_batch_complete = lambda batch: print(f"Completed batch with {len(batch)} items")
            sync.on_item = lambda item: db.save_item(item)

            # Execute the sync
            result = sync.execute()
            ```
        """
        # Find the appropriate method for fetching entities by sequence number
        fetch_method = self._find_sequence_method()
        if not fetch_method:
            raise ValueError(f"Could not find sequence method for {self._entity_type}")

        # Create and return a synchronizer
        return EntitySynchronizer(
            entity_type=self._entity_type,
            fetch_entities_callback=fetch_method,
            start_seq_number=start_seq,
        )

    def _find_sequence_method(self) -> Optional[Callable]:
        """
        Find the method for fetching entities by sequence number.

        Returns:
            The method for fetching entities by sequence number, or None if not found.
        """
        # Common method name patterns for sequence methods
        patterns = [
            f"get_{self._entity_type}_by_sequence_number",
            f"get_{self._entity_type.rstrip('s')}_by_sequence_number",
            "get_by_sequence_number",
        ]

        # Try each pattern
        for pattern in patterns:
            if hasattr(self._api_instance, pattern):
                return getattr(self._api_instance, pattern)

        return None


class Floriday:
    """
    Main client class for interacting with the Floriday API.

    This class provides a simplified interface for working with the Floriday API,
    including easy access to API instances, configuration management, and
    synchronization utilities.

    Example:
        ```python
        # Create a client using environment variables
        client = Floriday()

        # Get API instances
        trade_items_api = client.get_api(TradeItemsApi)
        organizations_api = client.get_api(OrganizationsApi)

        # Use the APIs
        trade_item = trade_items_api.get_trade_items_summary(
            trade_item_ids=["1987a15c-2c28-4ba6-89a1-3780e585b42c"]
        )
        ```
    """

    def __init__(self, **kwargs):
        """
        Initialize a Floriday client.

        Args:
            **kwargs: Configuration options that override environment variables.
                Supported options:
                - client_id: Floriday client ID
                - client_secret: Floriday client secret
                - api_key: Floriday API key
                - auth_url: Floriday authentication URL
                - base_url: Floriday API base URL
        """
        # Store configuration options
        self._config_options = kwargs

        # Initialize API factory with environment variables and overrides
        self._factory = self._create_factory()

        # Cache for API instances
        self._api_cache = {}

    def _create_factory(self) -> ApiFactory:
        """
        Create an API factory with the current configuration.

        Returns:
            An initialized ApiFactory instance.
        """
        # Create a new factory
        factory = ApiFactory()

        # Override environment variables with provided options
        if self._config_options:
            for key, value in self._config_options.items():
                if key == "client_id":
                    factory.client_id = value
                elif key == "client_secret":
                    factory.client_secret = value
                elif key == "api_key":
                    factory.api_key = value
                elif key == "auth_url":
                    factory.auth_url = value
                elif key == "base_url":
                    factory.base_url = value

            # Refresh token and configuration if any auth-related options were provided
            auth_keys = {"client_id", "client_secret", "auth_url"}
            if any(key in auth_keys for key in self._config_options):
                factory.access_token = factory._get_access_token()

            # Update configuration if any config-related options were provided
            config_keys = {"api_key", "base_url"}
            if (
                any(key in config_keys for key in self._config_options)
                or "access_token" in locals()
            ):
                factory.configuration = factory._configure_client()

        return factory

    def get_api(self, api_class: Type[T]) -> ApiWrapper:
        """
        Get an API instance by class.

        Args:
            api_class: The API class to instantiate

        Returns:
            An ApiWrapper instance wrapping the requested API

        Example:
            ```python
            # Get a TradeItemsApi instance
            trade_items_api = client.get_api(TradeItemsApi)

            # Use the API
            items = trade_items_api.get_trade_items_summary(
                trade_item_ids=["1987a15c-2c28-4ba6-89a1-3780e585b42c"]
            )
            ```
        """
        # Check if we already have an instance of this API class
        class_name = api_class.__name__
        if class_name in self._api_cache:
            return self._api_cache[class_name]

        # Create a new instance
        api_instance = self._factory.get_api_instance(api_class)

        # Wrap it and cache it
        wrapper = ApiWrapper(api_instance, self)
        self._api_cache[class_name] = wrapper

        return wrapper

    def refresh_token(self) -> None:
        """
        Refresh the authentication token.

        This method can be used to refresh the token if it has expired.

        Example:
            ```python
            # Refresh the token if an API call fails with an authentication error
            try:
                items = client.get_api(TradeItemsApi).get_trade_items_summary(...)
            except AuthenticationError:
                client.refresh_token()
                # Try again
                items = client.get_api(TradeItemsApi).get_trade_items_summary(...)
            ```
        """
        # Get a new token
        self._factory.access_token = self._factory._get_access_token()

        # Update the configuration
        self._factory.configuration = self._factory._configure_client()

        # Clear the API cache to ensure all APIs use the new token
        self._api_cache.clear()

    def close(self) -> None:
        """
        Close the client and release resources.

        This method should be called when the client is no longer needed.

        Example:
            ```python
            # Create a client
            client = Floriday()

            try:
                # Use the client
                ...
            finally:
                # Close the client
                client.close()
            ```
        """
        # Clear the API cache
        self._api_cache.clear()

    def __enter__(self):
        """
        Enter the context manager.

        Returns:
            The Floriday client instance

        Example:
            ```python
            # Use the client as a context manager
            with Floriday() as client:
                # Use the client
                trade_items_api = client.get_api(TradeItemsApi)
                items = trade_items_api.get_trade_items_summary(...)
            # Client is automatically closed when exiting the context
            ```
        """
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        Exit the context manager.

        Args:
            exc_type: Exception type, if an exception was raised
            exc_val: Exception value, if an exception was raised
            exc_tb: Exception traceback, if an exception was raised
        """
        self.close()


# Function to create a Floriday client or API instance
def floriday(
    api_class: Optional[Type[T]] = None, **kwargs
) -> Union[Floriday, ApiWrapper]:
    """
    Create a Floriday client or API instance.

    This function provides a convenient way to create a Floriday client or
    directly get an API instance.

    Args:
        api_class: Optional API class to directly initialize a specific API.
            If provided, returns an ApiWrapper for that API.
            If None, returns a Floriday client.
        **kwargs: Configuration options that override environment variables.

    Returns:
        A Floriday client or ApiWrapper instance

    Example:
        ```python
        # Create a client
        client = floriday()

        # Get an API instance directly
        trade_items_api = floriday(TradeItemsApi)
        ```
    """
    # Create a client
    client = Floriday(**kwargs)

    # If an API class was provided, return an API instance
    if api_class:
        return client.get_api(api_class)

    # Otherwise, return the client
    return client
