# coding: utf-8

"""
    RAGsys API

     RAGSys API is an innovative AI retrieval engine developed by Crossing Minds to enhance  Large Language Model (LLM) performance without the need for traditional fine-tuning.  By integrating Retrieval-Augmented Generation (RAG) techniques, RAGSys enables seamless adaptation  of LLMs to various tasks and domains, offering a cost-effective and scalable solution for  enterprises.   Key Features of RAGSys:  - **Seamless Integration**: Compatible with any LLM, including those from Anthropic, OpenAI, and open-source alternatives, allowing effortless switching between models without losing optimizations.  - **Enhanced Retrieval with RAG Embeddings**: Utilizes proprietary RAG embeddings to ensure better understanding and rapid information retrieval, even with massive datasets, resulting in more contextually relevant and accurate LLM outputs.  - **Groundbreaking Accuracy Improvements**: Consistently outperforms traditional fine-tuning, achieving up to a 76% improvement on key benchmarks, with significant enhancements in truthfulness, emotion detection, and commonsense reasoning across various LLMs.  - **Scalable Architecture**: Designed for enterprise-scale deployment, efficiently handling large datasets and complex retrieval tasks, ensuring consistent performance as AI needs grow.   By leveraging RAGSys, organizations can rapidly adapt LLMs to new tasks or domains, saving computational resources and accelerating deployment cycles, all while maintaining high levels of accuracy and relevance in AI outputs.  

    The version of the OpenAPI document: 1.0.0
    Contact: contact@crossingminds.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from ragsys.models.create_or_partial_update_examples_response import CreateOrPartialUpdateExamplesResponse
from ragsys.models.examples_body import ExamplesBody
from ragsys.models.examples_response import ExamplesResponse
from ragsys.models.retrieve_examples import RetrieveExamples
from ragsys.models.retrieve_examples_response import RetrieveExamplesResponse

from ragsys.api_response import ApiResponse
from ragsys.rest import RESTResponseType


RequestSerialized = Tuple[str, str, Dict[str, str], Optional[str], List[str]]

class FewShotExampleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client) -> None:
        self.api_client = api_client


    # @validate_call
    def get_saved_examples(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        amt: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Maximum amount of example returned")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Pagination cursor, typically from the next_cursor value from the previous response")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="A comma-separated list of filters to apply to the query. Each filter follows the format `<PROPERTY_NAME>:<OPERATOR>` or `<PROPERTY_NAME>:<OPERATOR>:<VALUE>`. For numeric properties, available operators are `lt`, `lte`, `gt`, and `gte`, used with a value. For string properties, use `empty` or `notempty` without a value. Multiple filters can be combined using commas (e.g., `price:lt:100,status:notempty`).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ExamplesResponse:
        """Get Saved Examples

        Fetch examples saved. Use amt and cursor query parameters to control the output.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param amt: Maximum amount of example returned
        :type amt: int
        :param cursor: Pagination cursor, typically from the next_cursor value from the previous response
        :type cursor: str
        :param filters: A comma-separated list of filters to apply to the query. Each filter follows the format `<PROPERTY_NAME>:<OPERATOR>` or `<PROPERTY_NAME>:<OPERATOR>:<VALUE>`. For numeric properties, available operators are `lt`, `lte`, `gt`, and `gte`, used with a value. For string properties, use `empty` or `notempty` without a value. Multiple filters can be combined using commas (e.g., `price:lt:100,status:notempty`).
        :type filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_saved_examples_serialize(
            db_name=db_name,
            amt=amt,
            cursor=cursor,
            filters=filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    # @validate_call
    def get_saved_examples_with_http_info(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        amt: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Maximum amount of example returned")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Pagination cursor, typically from the next_cursor value from the previous response")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="A comma-separated list of filters to apply to the query. Each filter follows the format `<PROPERTY_NAME>:<OPERATOR>` or `<PROPERTY_NAME>:<OPERATOR>:<VALUE>`. For numeric properties, available operators are `lt`, `lte`, `gt`, and `gte`, used with a value. For string properties, use `empty` or `notempty` without a value. Multiple filters can be combined using commas (e.g., `price:lt:100,status:notempty`).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ExamplesResponse]:
        """Get Saved Examples

        Fetch examples saved. Use amt and cursor query parameters to control the output.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param amt: Maximum amount of example returned
        :type amt: int
        :param cursor: Pagination cursor, typically from the next_cursor value from the previous response
        :type cursor: str
        :param filters: A comma-separated list of filters to apply to the query. Each filter follows the format `<PROPERTY_NAME>:<OPERATOR>` or `<PROPERTY_NAME>:<OPERATOR>:<VALUE>`. For numeric properties, available operators are `lt`, `lte`, `gt`, and `gte`, used with a value. For string properties, use `empty` or `notempty` without a value. Multiple filters can be combined using commas (e.g., `price:lt:100,status:notempty`).
        :type filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_saved_examples_serialize(
            db_name=db_name,
            amt=amt,
            cursor=cursor,
            filters=filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    # @validate_call
    def get_saved_examples_without_preload_content(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        amt: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Maximum amount of example returned")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Pagination cursor, typically from the next_cursor value from the previous response")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="A comma-separated list of filters to apply to the query. Each filter follows the format `<PROPERTY_NAME>:<OPERATOR>` or `<PROPERTY_NAME>:<OPERATOR>:<VALUE>`. For numeric properties, available operators are `lt`, `lte`, `gt`, and `gte`, used with a value. For string properties, use `empty` or `notempty` without a value. Multiple filters can be combined using commas (e.g., `price:lt:100,status:notempty`).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Saved Examples

        Fetch examples saved. Use amt and cursor query parameters to control the output.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param amt: Maximum amount of example returned
        :type amt: int
        :param cursor: Pagination cursor, typically from the next_cursor value from the previous response
        :type cursor: str
        :param filters: A comma-separated list of filters to apply to the query. Each filter follows the format `<PROPERTY_NAME>:<OPERATOR>` or `<PROPERTY_NAME>:<OPERATOR>:<VALUE>`. For numeric properties, available operators are `lt`, `lte`, `gt`, and `gte`, used with a value. For string properties, use `empty` or `notempty` without a value. Multiple filters can be combined using commas (e.g., `price:lt:100,status:notempty`).
        :type filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_saved_examples_serialize(
            db_name=db_name,
            amt=amt,
            cursor=cursor,
            filters=filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_saved_examples_serialize(
        self,
        db_name,
        amt,
        cursor,
        filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if db_name is not None:
            _path_params['db_name'] = db_name
        # process the query parameters
        if amt is not None:
            
            _query_params.append(('amt', amt))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'HTTPBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/databases/{db_name}/examples',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    # @validate_call
    def retrieve_ranked_examples(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        retrieve_examples: RetrieveExamples,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RetrieveExamplesResponse:
        """Rank Examples With Retrieval Model

        Get examples by leveraging the retrieval model to rank and return a list of examples most relevant to a given query.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param retrieve_examples: (required)
        :type retrieve_examples: RetrieveExamples
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_ranked_examples_serialize(
            db_name=db_name,
            retrieve_examples=retrieve_examples,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RetrieveExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
            '400': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    # @validate_call
    def retrieve_ranked_examples_with_http_info(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        retrieve_examples: RetrieveExamples,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RetrieveExamplesResponse]:
        """Rank Examples With Retrieval Model

        Get examples by leveraging the retrieval model to rank and return a list of examples most relevant to a given query.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param retrieve_examples: (required)
        :type retrieve_examples: RetrieveExamples
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_ranked_examples_serialize(
            db_name=db_name,
            retrieve_examples=retrieve_examples,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RetrieveExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
            '400': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    # @validate_call
    def retrieve_ranked_examples_without_preload_content(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        retrieve_examples: RetrieveExamples,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Rank Examples With Retrieval Model

        Get examples by leveraging the retrieval model to rank and return a list of examples most relevant to a given query.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param retrieve_examples: (required)
        :type retrieve_examples: RetrieveExamples
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_ranked_examples_serialize(
            db_name=db_name,
            retrieve_examples=retrieve_examples,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RetrieveExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
            '400': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_ranked_examples_serialize(
        self,
        db_name,
        retrieve_examples,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if db_name is not None:
            _path_params['db_name'] = db_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if retrieve_examples is not None:
            _body_params = retrieve_examples


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'HTTPBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/databases/{db_name}/examples/retrieve',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    # @validate_call
    def save_examples(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        examples_body: ExamplesBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateOrPartialUpdateExamplesResponse:
        """Save Examples

        Create or partial update examples. The `query` content will be used by our retrieval model to evaluate relevence and diversity. If `id` is not provided, it will be generated using the `query` content as hash. If an example with the same `id` already exists, the example will be updated.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param examples_body: (required)
        :type examples_body: ExamplesBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_examples_serialize(
            db_name=db_name,
            examples_body=examples_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateOrPartialUpdateExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    # @validate_call
    def save_examples_with_http_info(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        examples_body: ExamplesBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateOrPartialUpdateExamplesResponse]:
        """Save Examples

        Create or partial update examples. The `query` content will be used by our retrieval model to evaluate relevence and diversity. If `id` is not provided, it will be generated using the `query` content as hash. If an example with the same `id` already exists, the example will be updated.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param examples_body: (required)
        :type examples_body: ExamplesBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_examples_serialize(
            db_name=db_name,
            examples_body=examples_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateOrPartialUpdateExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    # @validate_call
    def save_examples_without_preload_content(
        self,
        db_name: Annotated[StrictStr, Field(description="Database name or ID")],
        examples_body: ExamplesBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Save Examples

        Create or partial update examples. The `query` content will be used by our retrieval model to evaluate relevence and diversity. If `id` is not provided, it will be generated using the `query` content as hash. If an example with the same `id` already exists, the example will be updated.

        :param db_name: Database name or ID (required)
        :type db_name: str
        :param examples_body: (required)
        :type examples_body: ExamplesBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_examples_serialize(
            db_name=db_name,
            examples_body=examples_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateOrPartialUpdateExamplesResponse",
            '401': "ErrorResponse",
            '422': "CustomValidationError",
            '429': "ErrorResponse",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _save_examples_serialize(
        self,
        db_name,
        examples_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if db_name is not None:
            _path_params['db_name'] = db_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if examples_body is not None:
            _body_params = examples_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'HTTPBearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/databases/{db_name}/examples',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


