# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class SecuritySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical_cnt': 'int',
        'high_cnt': 'int',
        'medium_cnt': 'int',
        'low_cnt': 'int',
        'none_cnt': 'int',
        'unknown_cnt': 'int',
        'total_vuls': 'int',
        'scanned_cnt': 'int',
        'total_artifact': 'int',
        'fixable_cnt': 'int',
        'dangerous_cves': 'list[DangerousCVE]',
        'dangerous_artifacts': 'list[DangerousArtifact]'
    }

    attribute_map = {
        'critical_cnt': 'critical_cnt',
        'high_cnt': 'high_cnt',
        'medium_cnt': 'medium_cnt',
        'low_cnt': 'low_cnt',
        'none_cnt': 'none_cnt',
        'unknown_cnt': 'unknown_cnt',
        'total_vuls': 'total_vuls',
        'scanned_cnt': 'scanned_cnt',
        'total_artifact': 'total_artifact',
        'fixable_cnt': 'fixable_cnt',
        'dangerous_cves': 'dangerous_cves',
        'dangerous_artifacts': 'dangerous_artifacts'
    }

    def __init__(self, critical_cnt=None, high_cnt=None, medium_cnt=None, low_cnt=None, none_cnt=None, unknown_cnt=None, total_vuls=None, scanned_cnt=None, total_artifact=None, fixable_cnt=None, dangerous_cves=None, dangerous_artifacts=None, _configuration=None):  # noqa: E501
        """SecuritySummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._critical_cnt = None
        self._high_cnt = None
        self._medium_cnt = None
        self._low_cnt = None
        self._none_cnt = None
        self._unknown_cnt = None
        self._total_vuls = None
        self._scanned_cnt = None
        self._total_artifact = None
        self._fixable_cnt = None
        self._dangerous_cves = None
        self._dangerous_artifacts = None
        self.discriminator = None

        if critical_cnt is not None:
            self.critical_cnt = critical_cnt
        if high_cnt is not None:
            self.high_cnt = high_cnt
        if medium_cnt is not None:
            self.medium_cnt = medium_cnt
        if low_cnt is not None:
            self.low_cnt = low_cnt
        if none_cnt is not None:
            self.none_cnt = none_cnt
        if unknown_cnt is not None:
            self.unknown_cnt = unknown_cnt
        if total_vuls is not None:
            self.total_vuls = total_vuls
        if scanned_cnt is not None:
            self.scanned_cnt = scanned_cnt
        if total_artifact is not None:
            self.total_artifact = total_artifact
        if fixable_cnt is not None:
            self.fixable_cnt = fixable_cnt
        if dangerous_cves is not None:
            self.dangerous_cves = dangerous_cves
        if dangerous_artifacts is not None:
            self.dangerous_artifacts = dangerous_artifacts

    @property
    def critical_cnt(self):
        """Gets the critical_cnt of this SecuritySummary.  # noqa: E501

        the count of critical vulnerabilities  # noqa: E501

        :return: The critical_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._critical_cnt

    @critical_cnt.setter
    def critical_cnt(self, critical_cnt):
        """Sets the critical_cnt of this SecuritySummary.

        the count of critical vulnerabilities  # noqa: E501

        :param critical_cnt: The critical_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._critical_cnt = critical_cnt

    @property
    def high_cnt(self):
        """Gets the high_cnt of this SecuritySummary.  # noqa: E501

        the count of high vulnerabilities  # noqa: E501

        :return: The high_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._high_cnt

    @high_cnt.setter
    def high_cnt(self, high_cnt):
        """Sets the high_cnt of this SecuritySummary.

        the count of high vulnerabilities  # noqa: E501

        :param high_cnt: The high_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._high_cnt = high_cnt

    @property
    def medium_cnt(self):
        """Gets the medium_cnt of this SecuritySummary.  # noqa: E501

        the count of medium vulnerabilities  # noqa: E501

        :return: The medium_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._medium_cnt

    @medium_cnt.setter
    def medium_cnt(self, medium_cnt):
        """Sets the medium_cnt of this SecuritySummary.

        the count of medium vulnerabilities  # noqa: E501

        :param medium_cnt: The medium_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._medium_cnt = medium_cnt

    @property
    def low_cnt(self):
        """Gets the low_cnt of this SecuritySummary.  # noqa: E501

        the count of low vulnerabilities  # noqa: E501

        :return: The low_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._low_cnt

    @low_cnt.setter
    def low_cnt(self, low_cnt):
        """Sets the low_cnt of this SecuritySummary.

        the count of low vulnerabilities  # noqa: E501

        :param low_cnt: The low_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._low_cnt = low_cnt

    @property
    def none_cnt(self):
        """Gets the none_cnt of this SecuritySummary.  # noqa: E501

        the count of none vulnerabilities  # noqa: E501

        :return: The none_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._none_cnt

    @none_cnt.setter
    def none_cnt(self, none_cnt):
        """Sets the none_cnt of this SecuritySummary.

        the count of none vulnerabilities  # noqa: E501

        :param none_cnt: The none_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._none_cnt = none_cnt

    @property
    def unknown_cnt(self):
        """Gets the unknown_cnt of this SecuritySummary.  # noqa: E501

        the count of unknown vulnerabilities  # noqa: E501

        :return: The unknown_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._unknown_cnt

    @unknown_cnt.setter
    def unknown_cnt(self, unknown_cnt):
        """Sets the unknown_cnt of this SecuritySummary.

        the count of unknown vulnerabilities  # noqa: E501

        :param unknown_cnt: The unknown_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._unknown_cnt = unknown_cnt

    @property
    def total_vuls(self):
        """Gets the total_vuls of this SecuritySummary.  # noqa: E501

        the count of total vulnerabilities  # noqa: E501

        :return: The total_vuls of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._total_vuls

    @total_vuls.setter
    def total_vuls(self, total_vuls):
        """Sets the total_vuls of this SecuritySummary.

        the count of total vulnerabilities  # noqa: E501

        :param total_vuls: The total_vuls of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._total_vuls = total_vuls

    @property
    def scanned_cnt(self):
        """Gets the scanned_cnt of this SecuritySummary.  # noqa: E501

        the count of scanned artifacts  # noqa: E501

        :return: The scanned_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._scanned_cnt

    @scanned_cnt.setter
    def scanned_cnt(self, scanned_cnt):
        """Sets the scanned_cnt of this SecuritySummary.

        the count of scanned artifacts  # noqa: E501

        :param scanned_cnt: The scanned_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._scanned_cnt = scanned_cnt

    @property
    def total_artifact(self):
        """Gets the total_artifact of this SecuritySummary.  # noqa: E501

        the total count of artifacts  # noqa: E501

        :return: The total_artifact of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._total_artifact

    @total_artifact.setter
    def total_artifact(self, total_artifact):
        """Sets the total_artifact of this SecuritySummary.

        the total count of artifacts  # noqa: E501

        :param total_artifact: The total_artifact of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._total_artifact = total_artifact

    @property
    def fixable_cnt(self):
        """Gets the fixable_cnt of this SecuritySummary.  # noqa: E501

        the count of fixable vulnerabilities  # noqa: E501

        :return: The fixable_cnt of this SecuritySummary.  # noqa: E501
        :rtype: int
        """
        return self._fixable_cnt

    @fixable_cnt.setter
    def fixable_cnt(self, fixable_cnt):
        """Sets the fixable_cnt of this SecuritySummary.

        the count of fixable vulnerabilities  # noqa: E501

        :param fixable_cnt: The fixable_cnt of this SecuritySummary.  # noqa: E501
        :type: int
        """

        self._fixable_cnt = fixable_cnt

    @property
    def dangerous_cves(self):
        """Gets the dangerous_cves of this SecuritySummary.  # noqa: E501

        the list of dangerous CVEs  # noqa: E501

        :return: The dangerous_cves of this SecuritySummary.  # noqa: E501
        :rtype: list[DangerousCVE]
        """
        return self._dangerous_cves

    @dangerous_cves.setter
    def dangerous_cves(self, dangerous_cves):
        """Sets the dangerous_cves of this SecuritySummary.

        the list of dangerous CVEs  # noqa: E501

        :param dangerous_cves: The dangerous_cves of this SecuritySummary.  # noqa: E501
        :type: list[DangerousCVE]
        """

        self._dangerous_cves = dangerous_cves

    @property
    def dangerous_artifacts(self):
        """Gets the dangerous_artifacts of this SecuritySummary.  # noqa: E501

        the list of dangerous artifacts  # noqa: E501

        :return: The dangerous_artifacts of this SecuritySummary.  # noqa: E501
        :rtype: list[DangerousArtifact]
        """
        return self._dangerous_artifacts

    @dangerous_artifacts.setter
    def dangerous_artifacts(self, dangerous_artifacts):
        """Sets the dangerous_artifacts of this SecuritySummary.

        the list of dangerous artifacts  # noqa: E501

        :param dangerous_artifacts: The dangerous_artifacts of this SecuritySummary.  # noqa: E501
        :type: list[DangerousArtifact]
        """

        self._dangerous_artifacts = dangerous_artifacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecuritySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecuritySummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecuritySummary):
            return True

        return self.to_dict() != other.to_dict()
