# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class DangerousCVE(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cve_id': 'str',
        'severity': 'str',
        'cvss_score_v3': 'float',
        'desc': 'str',
        'package': 'str',
        'version': 'str'
    }

    attribute_map = {
        'cve_id': 'cve_id',
        'severity': 'severity',
        'cvss_score_v3': 'cvss_score_v3',
        'desc': 'desc',
        'package': 'package',
        'version': 'version'
    }

    def __init__(self, cve_id=None, severity=None, cvss_score_v3=None, desc=None, package=None, version=None, _configuration=None):  # noqa: E501
        """DangerousCVE - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cve_id = None
        self._severity = None
        self._cvss_score_v3 = None
        self._desc = None
        self._package = None
        self._version = None
        self.discriminator = None

        if cve_id is not None:
            self.cve_id = cve_id
        if severity is not None:
            self.severity = severity
        if cvss_score_v3 is not None:
            self.cvss_score_v3 = cvss_score_v3
        if desc is not None:
            self.desc = desc
        if package is not None:
            self.package = package
        if version is not None:
            self.version = version

    @property
    def cve_id(self):
        """Gets the cve_id of this DangerousCVE.  # noqa: E501

        the cve id  # noqa: E501

        :return: The cve_id of this DangerousCVE.  # noqa: E501
        :rtype: str
        """
        return self._cve_id

    @cve_id.setter
    def cve_id(self, cve_id):
        """Sets the cve_id of this DangerousCVE.

        the cve id  # noqa: E501

        :param cve_id: The cve_id of this DangerousCVE.  # noqa: E501
        :type: str
        """

        self._cve_id = cve_id

    @property
    def severity(self):
        """Gets the severity of this DangerousCVE.  # noqa: E501

        the severity of the CVE  # noqa: E501

        :return: The severity of this DangerousCVE.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DangerousCVE.

        the severity of the CVE  # noqa: E501

        :param severity: The severity of this DangerousCVE.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def cvss_score_v3(self):
        """Gets the cvss_score_v3 of this DangerousCVE.  # noqa: E501

        the cvss score v3  # noqa: E501

        :return: The cvss_score_v3 of this DangerousCVE.  # noqa: E501
        :rtype: float
        """
        return self._cvss_score_v3

    @cvss_score_v3.setter
    def cvss_score_v3(self, cvss_score_v3):
        """Sets the cvss_score_v3 of this DangerousCVE.

        the cvss score v3  # noqa: E501

        :param cvss_score_v3: The cvss_score_v3 of this DangerousCVE.  # noqa: E501
        :type: float
        """

        self._cvss_score_v3 = cvss_score_v3

    @property
    def desc(self):
        """Gets the desc of this DangerousCVE.  # noqa: E501

        the description of the CVE  # noqa: E501

        :return: The desc of this DangerousCVE.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this DangerousCVE.

        the description of the CVE  # noqa: E501

        :param desc: The desc of this DangerousCVE.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def package(self):
        """Gets the package of this DangerousCVE.  # noqa: E501

        the package of the CVE  # noqa: E501

        :return: The package of this DangerousCVE.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this DangerousCVE.

        the package of the CVE  # noqa: E501

        :param package: The package of this DangerousCVE.  # noqa: E501
        :type: str
        """

        self._package = package

    @property
    def version(self):
        """Gets the version of this DangerousCVE.  # noqa: E501

        the version of the package  # noqa: E501

        :return: The version of this DangerousCVE.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DangerousCVE.

        the version of the package  # noqa: E501

        :param version: The version of this DangerousCVE.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DangerousCVE, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DangerousCVE):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DangerousCVE):
            return True

        return self.to_dict() != other.to_dict()
