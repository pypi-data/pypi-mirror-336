# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class DangerousArtifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'repository_name': 'str',
        'digest': 'str',
        'critical_cnt': 'int',
        'high_cnt': 'int',
        'medium_cnt': 'int'
    }

    attribute_map = {
        'project_id': 'project_id',
        'repository_name': 'repository_name',
        'digest': 'digest',
        'critical_cnt': 'critical_cnt',
        'high_cnt': 'high_cnt',
        'medium_cnt': 'medium_cnt'
    }

    def __init__(self, project_id=None, repository_name=None, digest=None, critical_cnt=None, high_cnt=None, medium_cnt=None, _configuration=None):  # noqa: E501
        """DangerousArtifact - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_id = None
        self._repository_name = None
        self._digest = None
        self._critical_cnt = None
        self._high_cnt = None
        self._medium_cnt = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if repository_name is not None:
            self.repository_name = repository_name
        if digest is not None:
            self.digest = digest
        if critical_cnt is not None:
            self.critical_cnt = critical_cnt
        if high_cnt is not None:
            self.high_cnt = high_cnt
        if medium_cnt is not None:
            self.medium_cnt = medium_cnt

    @property
    def project_id(self):
        """Gets the project_id of this DangerousArtifact.  # noqa: E501

        the project id of the artifact  # noqa: E501

        :return: The project_id of this DangerousArtifact.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DangerousArtifact.

        the project id of the artifact  # noqa: E501

        :param project_id: The project_id of this DangerousArtifact.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def repository_name(self):
        """Gets the repository_name of this DangerousArtifact.  # noqa: E501

        the repository name of the artifact  # noqa: E501

        :return: The repository_name of this DangerousArtifact.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this DangerousArtifact.

        the repository name of the artifact  # noqa: E501

        :param repository_name: The repository_name of this DangerousArtifact.  # noqa: E501
        :type: str
        """

        self._repository_name = repository_name

    @property
    def digest(self):
        """Gets the digest of this DangerousArtifact.  # noqa: E501

        the digest of the artifact  # noqa: E501

        :return: The digest of this DangerousArtifact.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this DangerousArtifact.

        the digest of the artifact  # noqa: E501

        :param digest: The digest of this DangerousArtifact.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def critical_cnt(self):
        """Gets the critical_cnt of this DangerousArtifact.  # noqa: E501

        the count of critical vulnerabilities  # noqa: E501

        :return: The critical_cnt of this DangerousArtifact.  # noqa: E501
        :rtype: int
        """
        return self._critical_cnt

    @critical_cnt.setter
    def critical_cnt(self, critical_cnt):
        """Sets the critical_cnt of this DangerousArtifact.

        the count of critical vulnerabilities  # noqa: E501

        :param critical_cnt: The critical_cnt of this DangerousArtifact.  # noqa: E501
        :type: int
        """

        self._critical_cnt = critical_cnt

    @property
    def high_cnt(self):
        """Gets the high_cnt of this DangerousArtifact.  # noqa: E501

        the count of high vulnerabilities  # noqa: E501

        :return: The high_cnt of this DangerousArtifact.  # noqa: E501
        :rtype: int
        """
        return self._high_cnt

    @high_cnt.setter
    def high_cnt(self, high_cnt):
        """Sets the high_cnt of this DangerousArtifact.

        the count of high vulnerabilities  # noqa: E501

        :param high_cnt: The high_cnt of this DangerousArtifact.  # noqa: E501
        :type: int
        """

        self._high_cnt = high_cnt

    @property
    def medium_cnt(self):
        """Gets the medium_cnt of this DangerousArtifact.  # noqa: E501

        the count of medium vulnerabilities  # noqa: E501

        :return: The medium_cnt of this DangerousArtifact.  # noqa: E501
        :rtype: int
        """
        return self._medium_cnt

    @medium_cnt.setter
    def medium_cnt(self, medium_cnt):
        """Sets the medium_cnt of this DangerousArtifact.

        the count of medium vulnerabilities  # noqa: E501

        :param medium_cnt: The medium_cnt of this DangerousArtifact.  # noqa: E501
        :type: int
        """

        self._medium_cnt = medium_cnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DangerousArtifact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DangerousArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DangerousArtifact):
            return True

        return self.to_dict() != other.to_dict()
