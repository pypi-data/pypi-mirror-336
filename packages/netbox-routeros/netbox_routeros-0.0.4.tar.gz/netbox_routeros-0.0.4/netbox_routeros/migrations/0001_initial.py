# Generated by Django 5.1.5 on 2025-03-02 22:12

import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models

import netbox_routeros.models.capsman
import netbox_routeros.validators


class Migration(migrations.Migration):
    dependencies = [
        ("dcim", "0200_populate_mac_addresses"),
        ("extras", "0122_charfield_null_choices"),
        ("ipam", "0076_natural_ordering"),
    ]

    operations = [
        migrations.CreateModel(
            name="RouterosInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("comments", models.TextField(blank=True)),
                (
                    "device",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routeros",
                        to="dcim.device",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
            ],
            options={
                "ordering": ("device",),
            },
        ),
        migrations.CreateModel(
            name="CapsmanInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("comments", models.TextField(blank=True)),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
                (
                    "routeros",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capsman",
                        to="netbox_routeros.routerosinstance",
                    ),
                ),
            ],
            options={
                "ordering": ("routeros",),
            },
        ),
        migrations.CreateModel(
            name="RouterosType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("comments", models.TextField(blank=True)),
                (
                    "platform",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routeros_type",
                        to="dcim.platform",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
            ],
            options={
                "ordering": ("platform",),
            },
        ),
        migrations.CreateModel(
            name="CapsmanDatapath",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("comments", models.TextField(blank=True)),
                ("name", models.CharField(db_collation="natural_sort", max_length=64)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "bridge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="dcim.interface",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
                (
                    "vlan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="ipam.vlan",
                    ),
                ),
                (
                    "capsman",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="datapaths",
                        to="netbox_routeros.capsmaninstance",
                    ),
                ),
            ],
            options={
                "ordering": ("capsman", "name"),
                "unique_together": {("capsman", "name")},
            },
        ),
        migrations.CreateModel(
            name="Interface",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("dcim.interface",),
        ),
        migrations.CreateModel(
            name="CapsmanChannel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("comments", models.TextField(blank=True)),
                ("name", models.CharField(db_collation="natural_sort", max_length=64)),
                ("band", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "channel_width",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "frequency",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ranges.IntegerRangeField(
                            blank=True,
                            null=True,
                            validators=[
                                netbox_routeros.validators.IncreasingRangeValidator(),
                                netbox_routeros.validators.RangeValidator(
                                    django.core.validators.MinValueValidator(2300)
                                ),
                                netbox_routeros.validators.RangeValidator(
                                    django.core.validators.MaxValueValidator(7300)
                                ),
                            ],
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "skip_dfs_channels",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("enabled", models.BooleanField(default=True)),
                (
                    "capsman",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Channels",
                        to="netbox_routeros.capsmaninstance",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
            ],
            options={
                "ordering": ("capsman", "name"),
                "unique_together": {("capsman", "name")},
            },
        ),
    ]
