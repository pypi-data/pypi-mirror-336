# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import femtum_sdk.database.grpc.result_pb2 as result__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in result_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ResultServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindSpectrumById = channel.unary_unary(
                '/Trimming.ResultService/FindSpectrumById',
                request_serializer=result__pb2.FindResultByIdRequest.SerializeToString,
                response_deserializer=result__pb2.OptionalSpectrumResult.FromString,
                _registered_method=True)
        self.FindSingleSpectrumBy = channel.unary_unary(
                '/Trimming.ResultService/FindSingleSpectrumBy',
                request_serializer=result__pb2.FindResultByRequest.SerializeToString,
                response_deserializer=result__pb2.OptionalSpectrumResult.FromString,
                _registered_method=True)
        self.FindSingleNumberBy = channel.unary_unary(
                '/Trimming.ResultService/FindSingleNumberBy',
                request_serializer=result__pb2.FindResultByRequest.SerializeToString,
                response_deserializer=result__pb2.OptionalSingleNumberResult.FromString,
                _registered_method=True)
        self.FindById = channel.unary_unary(
                '/Trimming.ResultService/FindById',
                request_serializer=result__pb2.FindResultByIdRequest.SerializeToString,
                response_deserializer=result__pb2.OptionalSingleResult.FromString,
                _registered_method=True)
        self.ListByPage = channel.unary_unary(
                '/Trimming.ResultService/ListByPage',
                request_serializer=result__pb2.ListByPageResultsRequest.SerializeToString,
                response_deserializer=result__pb2.ResultsPage.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/Trimming.ResultService/Delete',
                request_serializer=result__pb2.FindResultByIdRequest.SerializeToString,
                response_deserializer=result__pb2.OptionalSingleResult.FromString,
                _registered_method=True)
        self.BatchDelete = channel.unary_unary(
                '/Trimming.ResultService/BatchDelete',
                request_serializer=result__pb2.BatchDeleteResultRequest.SerializeToString,
                response_deserializer=result__pb2.ResultsArray.FromString,
                _registered_method=True)
        self.StoreSingleNumber = channel.unary_unary(
                '/Trimming.ResultService/StoreSingleNumber',
                request_serializer=result__pb2.StoreSingleNumberRequest.SerializeToString,
                response_deserializer=result__pb2.SingleNumberResult.FromString,
                _registered_method=True)
        self.StoreSpectrumReference = channel.unary_unary(
                '/Trimming.ResultService/StoreSpectrumReference',
                request_serializer=result__pb2.StoreSpectrumResultRequest.SerializeToString,
                response_deserializer=result__pb2.SpectrumResult.FromString,
                _registered_method=True)
        self.StoreSpectrumShot = channel.unary_unary(
                '/Trimming.ResultService/StoreSpectrumShot',
                request_serializer=result__pb2.StoreSpectrumShotResultRequest.SerializeToString,
                response_deserializer=result__pb2.SpectrumResult.FromString,
                _registered_method=True)


class ResultServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindSpectrumById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindSingleSpectrumBy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindSingleNumberBy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByPage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreSingleNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreSpectrumReference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreSpectrumShot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindSpectrumById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSpectrumById,
                    request_deserializer=result__pb2.FindResultByIdRequest.FromString,
                    response_serializer=result__pb2.OptionalSpectrumResult.SerializeToString,
            ),
            'FindSingleSpectrumBy': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSingleSpectrumBy,
                    request_deserializer=result__pb2.FindResultByRequest.FromString,
                    response_serializer=result__pb2.OptionalSpectrumResult.SerializeToString,
            ),
            'FindSingleNumberBy': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSingleNumberBy,
                    request_deserializer=result__pb2.FindResultByRequest.FromString,
                    response_serializer=result__pb2.OptionalSingleNumberResult.SerializeToString,
            ),
            'FindById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindById,
                    request_deserializer=result__pb2.FindResultByIdRequest.FromString,
                    response_serializer=result__pb2.OptionalSingleResult.SerializeToString,
            ),
            'ListByPage': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPage,
                    request_deserializer=result__pb2.ListByPageResultsRequest.FromString,
                    response_serializer=result__pb2.ResultsPage.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=result__pb2.FindResultByIdRequest.FromString,
                    response_serializer=result__pb2.OptionalSingleResult.SerializeToString,
            ),
            'BatchDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchDelete,
                    request_deserializer=result__pb2.BatchDeleteResultRequest.FromString,
                    response_serializer=result__pb2.ResultsArray.SerializeToString,
            ),
            'StoreSingleNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreSingleNumber,
                    request_deserializer=result__pb2.StoreSingleNumberRequest.FromString,
                    response_serializer=result__pb2.SingleNumberResult.SerializeToString,
            ),
            'StoreSpectrumReference': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreSpectrumReference,
                    request_deserializer=result__pb2.StoreSpectrumResultRequest.FromString,
                    response_serializer=result__pb2.SpectrumResult.SerializeToString,
            ),
            'StoreSpectrumShot': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreSpectrumShot,
                    request_deserializer=result__pb2.StoreSpectrumShotResultRequest.FromString,
                    response_serializer=result__pb2.SpectrumResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Trimming.ResultService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Trimming.ResultService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ResultService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindSpectrumById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/FindSpectrumById',
            result__pb2.FindResultByIdRequest.SerializeToString,
            result__pb2.OptionalSpectrumResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindSingleSpectrumBy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/FindSingleSpectrumBy',
            result__pb2.FindResultByRequest.SerializeToString,
            result__pb2.OptionalSpectrumResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindSingleNumberBy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/FindSingleNumberBy',
            result__pb2.FindResultByRequest.SerializeToString,
            result__pb2.OptionalSingleNumberResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/FindById',
            result__pb2.FindResultByIdRequest.SerializeToString,
            result__pb2.OptionalSingleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/ListByPage',
            result__pb2.ListByPageResultsRequest.SerializeToString,
            result__pb2.ResultsPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/Delete',
            result__pb2.FindResultByIdRequest.SerializeToString,
            result__pb2.OptionalSingleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/BatchDelete',
            result__pb2.BatchDeleteResultRequest.SerializeToString,
            result__pb2.ResultsArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreSingleNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/StoreSingleNumber',
            result__pb2.StoreSingleNumberRequest.SerializeToString,
            result__pb2.SingleNumberResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreSpectrumReference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/StoreSpectrumReference',
            result__pb2.StoreSpectrumResultRequest.SerializeToString,
            result__pb2.SpectrumResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreSpectrumShot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ResultService/StoreSpectrumShot',
            result__pb2.StoreSpectrumShotResultRequest.SerializeToString,
            result__pb2.SpectrumResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
