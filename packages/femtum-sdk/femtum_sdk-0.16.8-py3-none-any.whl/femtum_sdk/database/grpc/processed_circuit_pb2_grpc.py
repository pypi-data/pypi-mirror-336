# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import femtum_sdk.database.grpc.attachment_pb2 as attachment__pb2
import femtum_sdk.database.grpc.processed_circuit_pb2 as processed__circuit__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in processed_circuit_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProcessedCircuitServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListByPage = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/ListByPage',
                request_serializer=processed__circuit__pb2.ListByPageProcessedCircuitRequest.SerializeToString,
                response_deserializer=processed__circuit__pb2.ProcessedCircuitPage.FromString,
                _registered_method=True)
        self.FindById = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/FindById',
                request_serializer=processed__circuit__pb2.FindProcessedCircuitByIdRequest.SerializeToString,
                response_deserializer=processed__circuit__pb2.OptionalProcessedCircuit.FromString,
                _registered_method=True)
        self.AddImage = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/AddImage',
                request_serializer=processed__circuit__pb2.AddProcessedCircuitImageRequest.SerializeToString,
                response_deserializer=attachment__pb2.OptionalAttachment.FromString,
                _registered_method=True)
        self.AddImageByPath = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/AddImageByPath',
                request_serializer=processed__circuit__pb2.AddProcessedCircuitImageByPathRequest.SerializeToString,
                response_deserializer=attachment__pb2.OptionalAttachment.FromString,
                _registered_method=True)
        self.GetImages = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/GetImages',
                request_serializer=processed__circuit__pb2.FindProcessedCircuitByIdRequest.SerializeToString,
                response_deserializer=attachment__pb2.AttachmentsArray.FromString,
                _registered_method=True)
        self.SetTags = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/SetTags',
                request_serializer=processed__circuit__pb2.SetProcessedCircuitTagsRequest.SerializeToString,
                response_deserializer=processed__circuit__pb2.ProcessedCircuit.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/Trimming.ProcessedCircuitService/Delete',
                request_serializer=processed__circuit__pb2.FindProcessedCircuitByIdRequest.SerializeToString,
                response_deserializer=processed__circuit__pb2.OptionalProcessedCircuit.FromString,
                _registered_method=True)


class ProcessedCircuitServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListByPage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddImageByPath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessedCircuitServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListByPage': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPage,
                    request_deserializer=processed__circuit__pb2.ListByPageProcessedCircuitRequest.FromString,
                    response_serializer=processed__circuit__pb2.ProcessedCircuitPage.SerializeToString,
            ),
            'FindById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindById,
                    request_deserializer=processed__circuit__pb2.FindProcessedCircuitByIdRequest.FromString,
                    response_serializer=processed__circuit__pb2.OptionalProcessedCircuit.SerializeToString,
            ),
            'AddImage': grpc.unary_unary_rpc_method_handler(
                    servicer.AddImage,
                    request_deserializer=processed__circuit__pb2.AddProcessedCircuitImageRequest.FromString,
                    response_serializer=attachment__pb2.OptionalAttachment.SerializeToString,
            ),
            'AddImageByPath': grpc.unary_unary_rpc_method_handler(
                    servicer.AddImageByPath,
                    request_deserializer=processed__circuit__pb2.AddProcessedCircuitImageByPathRequest.FromString,
                    response_serializer=attachment__pb2.OptionalAttachment.SerializeToString,
            ),
            'GetImages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImages,
                    request_deserializer=processed__circuit__pb2.FindProcessedCircuitByIdRequest.FromString,
                    response_serializer=attachment__pb2.AttachmentsArray.SerializeToString,
            ),
            'SetTags': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTags,
                    request_deserializer=processed__circuit__pb2.SetProcessedCircuitTagsRequest.FromString,
                    response_serializer=processed__circuit__pb2.ProcessedCircuit.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=processed__circuit__pb2.FindProcessedCircuitByIdRequest.FromString,
                    response_serializer=processed__circuit__pb2.OptionalProcessedCircuit.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Trimming.ProcessedCircuitService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Trimming.ProcessedCircuitService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProcessedCircuitService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListByPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/ListByPage',
            processed__circuit__pb2.ListByPageProcessedCircuitRequest.SerializeToString,
            processed__circuit__pb2.ProcessedCircuitPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/FindById',
            processed__circuit__pb2.FindProcessedCircuitByIdRequest.SerializeToString,
            processed__circuit__pb2.OptionalProcessedCircuit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/AddImage',
            processed__circuit__pb2.AddProcessedCircuitImageRequest.SerializeToString,
            attachment__pb2.OptionalAttachment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddImageByPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/AddImageByPath',
            processed__circuit__pb2.AddProcessedCircuitImageByPathRequest.SerializeToString,
            attachment__pb2.OptionalAttachment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/GetImages',
            processed__circuit__pb2.FindProcessedCircuitByIdRequest.SerializeToString,
            attachment__pb2.AttachmentsArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/SetTags',
            processed__circuit__pb2.SetProcessedCircuitTagsRequest.SerializeToString,
            processed__circuit__pb2.ProcessedCircuit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Trimming.ProcessedCircuitService/Delete',
            processed__circuit__pb2.FindProcessedCircuitByIdRequest.SerializeToString,
            processed__circuit__pb2.OptionalProcessedCircuit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
