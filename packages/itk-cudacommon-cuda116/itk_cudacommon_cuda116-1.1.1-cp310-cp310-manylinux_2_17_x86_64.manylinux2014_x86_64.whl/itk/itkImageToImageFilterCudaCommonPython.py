# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _CudaCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageFilterCudaCommonPython
else:
    import _itkImageToImageFilterCudaCommonPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCudaDataManagerPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageSourceCommonPython
class itkImageToImageFilterCICVF22CICVF22(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF22):
    r"""Proxy of C++ itkImageToImageFilterCICVF22CICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF22 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF22
        GetInput(self, idx) -> itkCudaImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF22 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF22 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF22CICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF22CICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_cast(obj)

# Register itkImageToImageFilterCICVF22CICVF22 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF22CICVF22_swigregister(itkImageToImageFilterCICVF22CICVF22)
class itkImageToImageFilterCICVF23CICVF23(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF23):
    r"""Proxy of C++ itkImageToImageFilterCICVF23CICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF23 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF23
        GetInput(self, idx) -> itkCudaImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF23 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF23 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF23CICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF23CICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_cast(obj)

# Register itkImageToImageFilterCICVF23CICVF23 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF23CICVF23_swigregister(itkImageToImageFilterCICVF23CICVF23)
class itkImageToImageFilterCICVF24CICVF24(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF24):
    r"""Proxy of C++ itkImageToImageFilterCICVF24CICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF24 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF24
        GetInput(self, idx) -> itkCudaImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF24 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF24 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF24CICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF24CICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_cast(obj)

# Register itkImageToImageFilterCICVF24CICVF24 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF24CICVF24_swigregister(itkImageToImageFilterCICVF24CICVF24)
class itkImageToImageFilterCICVF32CICVF32(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF32):
    r"""Proxy of C++ itkImageToImageFilterCICVF32CICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF32 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF32
        GetInput(self, idx) -> itkCudaImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF32 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF32 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF32CICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF32CICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_cast(obj)

# Register itkImageToImageFilterCICVF32CICVF32 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF32CICVF32_swigregister(itkImageToImageFilterCICVF32CICVF32)
class itkImageToImageFilterCICVF33CICVF33(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF33):
    r"""Proxy of C++ itkImageToImageFilterCICVF33CICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF33 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF33
        GetInput(self, idx) -> itkCudaImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF33 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF33 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF33CICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF33CICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_cast(obj)

# Register itkImageToImageFilterCICVF33CICVF33 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF33CICVF33_swigregister(itkImageToImageFilterCICVF33CICVF33)
class itkImageToImageFilterCICVF34CICVF34(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF34):
    r"""Proxy of C++ itkImageToImageFilterCICVF34CICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF34 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF34
        GetInput(self, idx) -> itkCudaImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF34 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF34 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF34CICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF34CICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_cast(obj)

# Register itkImageToImageFilterCICVF34CICVF34 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF34CICVF34_swigregister(itkImageToImageFilterCICVF34CICVF34)
class itkImageToImageFilterCICVF42CICVF42(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF42):
    r"""Proxy of C++ itkImageToImageFilterCICVF42CICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF42 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF42
        GetInput(self, idx) -> itkCudaImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF42 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF42 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF42CICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF42CICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_cast(obj)

# Register itkImageToImageFilterCICVF42CICVF42 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF42CICVF42_swigregister(itkImageToImageFilterCICVF42CICVF42)
class itkImageToImageFilterCICVF43CICVF43(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF43):
    r"""Proxy of C++ itkImageToImageFilterCICVF43CICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF43 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF43
        GetInput(self, idx) -> itkCudaImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF43 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF43 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF43CICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF43CICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_cast(obj)

# Register itkImageToImageFilterCICVF43CICVF43 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF43CICVF43_swigregister(itkImageToImageFilterCICVF43CICVF43)
class itkImageToImageFilterCICVF44CICVF44(itk.itkImageSourceCudaCommonPython.itkImageSourceCICVF44):
    r"""Proxy of C++ itkImageToImageFilterCICVF44CICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageCVF44 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageCVF44
        GetInput(self, idx) -> itkCudaImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF44 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageCVF44 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCICVF44CICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCICVF44CICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_cast(obj)

# Register itkImageToImageFilterCICVF44CICVF44 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCICVF44CICVF44_swigregister(itkImageToImageFilterCICVF44CICVF44)
class itkImageToImageFilterCID2CID2(itk.itkImageSourceCudaCommonPython.itkImageSourceCID2):
    r"""Proxy of C++ itkImageToImageFilterCID2CID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageD2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageD2
        GetInput(self, idx) -> itkCudaImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCID2CID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCID2CID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_cast(obj)

# Register itkImageToImageFilterCID2CID2 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID2CID2_swigregister(itkImageToImageFilterCID2CID2)
class itkImageToImageFilterCID3CID3(itk.itkImageSourceCudaCommonPython.itkImageSourceCID3):
    r"""Proxy of C++ itkImageToImageFilterCID3CID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageD3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageD3
        GetInput(self, idx) -> itkCudaImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCID3CID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCID3CID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_cast(obj)

# Register itkImageToImageFilterCID3CID3 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID3CID3_swigregister(itkImageToImageFilterCID3CID3)
class itkImageToImageFilterCID4CID4(itk.itkImageSourceCudaCommonPython.itkImageSourceCID4):
    r"""Proxy of C++ itkImageToImageFilterCID4CID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageD4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageD4
        GetInput(self, idx) -> itkCudaImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageD4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCID4CID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCID4CID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_cast(obj)

# Register itkImageToImageFilterCID4CID4 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCID4CID4_swigregister(itkImageToImageFilterCID4CID4)
class itkImageToImageFilterCIF2CIF2(itk.itkImageSourceCudaCommonPython.itkImageSourceCIF2):
    r"""Proxy of C++ itkImageToImageFilterCIF2CIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageF2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageF2
        GetInput(self, idx) -> itkCudaImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIF2CIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIF2CIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_cast(obj)

# Register itkImageToImageFilterCIF2CIF2 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF2CIF2_swigregister(itkImageToImageFilterCIF2CIF2)
class itkImageToImageFilterCIF3CIF3(itk.itkImageSourceCudaCommonPython.itkImageSourceCIF3):
    r"""Proxy of C++ itkImageToImageFilterCIF3CIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageF3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageF3
        GetInput(self, idx) -> itkCudaImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIF3CIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIF3CIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_cast(obj)

# Register itkImageToImageFilterCIF3CIF3 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF3CIF3_swigregister(itkImageToImageFilterCIF3CIF3)
class itkImageToImageFilterCIF4CIF4(itk.itkImageSourceCudaCommonPython.itkImageSourceCIF4):
    r"""Proxy of C++ itkImageToImageFilterCIF4CIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageF4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageF4
        GetInput(self, idx) -> itkCudaImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageF4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIF4CIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIF4CIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_cast(obj)

# Register itkImageToImageFilterCIF4CIF4 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIF4CIF4_swigregister(itkImageToImageFilterCIF4CIF4)
class itkImageToImageFilterCISS2CISS2(itk.itkImageSourceCudaCommonPython.itkImageSourceCISS2):
    r"""Proxy of C++ itkImageToImageFilterCISS2CISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageSS2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageSS2
        GetInput(self, idx) -> itkCudaImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCISS2CISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCISS2CISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_cast(obj)

# Register itkImageToImageFilterCISS2CISS2 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS2CISS2_swigregister(itkImageToImageFilterCISS2CISS2)
class itkImageToImageFilterCISS3CISS3(itk.itkImageSourceCudaCommonPython.itkImageSourceCISS3):
    r"""Proxy of C++ itkImageToImageFilterCISS3CISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageSS3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageSS3
        GetInput(self, idx) -> itkCudaImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCISS3CISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCISS3CISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_cast(obj)

# Register itkImageToImageFilterCISS3CISS3 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS3CISS3_swigregister(itkImageToImageFilterCISS3CISS3)
class itkImageToImageFilterCISS4CISS4(itk.itkImageSourceCudaCommonPython.itkImageSourceCISS4):
    r"""Proxy of C++ itkImageToImageFilterCISS4CISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageSS4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageSS4
        GetInput(self, idx) -> itkCudaImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageSS4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCISS4CISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCISS4CISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_cast(obj)

# Register itkImageToImageFilterCISS4CISS4 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCISS4CISS4_swigregister(itkImageToImageFilterCISS4CISS4)
class itkImageToImageFilterCIUC2CIUC2(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUC2):
    r"""Proxy of C++ itkImageToImageFilterCIUC2CIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUC2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUC2
        GetInput(self, idx) -> itkCudaImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUC2CIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUC2CIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_cast(obj)

# Register itkImageToImageFilterCIUC2CIUC2 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC2CIUC2_swigregister(itkImageToImageFilterCIUC2CIUC2)
class itkImageToImageFilterCIUC3CIUC3(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUC3):
    r"""Proxy of C++ itkImageToImageFilterCIUC3CIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUC3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUC3
        GetInput(self, idx) -> itkCudaImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUC3CIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUC3CIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_cast(obj)

# Register itkImageToImageFilterCIUC3CIUC3 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC3CIUC3_swigregister(itkImageToImageFilterCIUC3CIUC3)
class itkImageToImageFilterCIUC4CIUC4(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUC4):
    r"""Proxy of C++ itkImageToImageFilterCIUC4CIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUC4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUC4
        GetInput(self, idx) -> itkCudaImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUC4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUC4CIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUC4CIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_cast(obj)

# Register itkImageToImageFilterCIUC4CIUC4 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUC4CIUC4_swigregister(itkImageToImageFilterCIUC4CIUC4)
class itkImageToImageFilterCIUL2CIUL2(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUL2):
    r"""Proxy of C++ itkImageToImageFilterCIUL2CIUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUL2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUL2
        GetInput(self, idx) -> itkCudaImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUL2CIUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUL2CIUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_cast(obj)

# Register itkImageToImageFilterCIUL2CIUL2 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL2CIUL2_swigregister(itkImageToImageFilterCIUL2CIUL2)
class itkImageToImageFilterCIUL3CIUL3(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUL3):
    r"""Proxy of C++ itkImageToImageFilterCIUL3CIUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUL3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUL3
        GetInput(self, idx) -> itkCudaImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUL3CIUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUL3CIUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_cast(obj)

# Register itkImageToImageFilterCIUL3CIUL3 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL3CIUL3_swigregister(itkImageToImageFilterCIUL3CIUL3)
class itkImageToImageFilterCIUL4CIUL4(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUL4):
    r"""Proxy of C++ itkImageToImageFilterCIUL4CIUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUL4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUL4
        GetInput(self, idx) -> itkCudaImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUL4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUL4CIUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUL4CIUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_cast(obj)

# Register itkImageToImageFilterCIUL4CIUL4 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUL4CIUL4_swigregister(itkImageToImageFilterCIUL4CIUL4)
class itkImageToImageFilterCIUS2CIUS2(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUS2):
    r"""Proxy of C++ itkImageToImageFilterCIUS2CIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUS2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUS2
        GetInput(self, idx) -> itkCudaImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS2 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUS2CIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUS2CIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_cast(obj)

# Register itkImageToImageFilterCIUS2CIUS2 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS2CIUS2_swigregister(itkImageToImageFilterCIUS2CIUS2)
class itkImageToImageFilterCIUS3CIUS3(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUS3):
    r"""Proxy of C++ itkImageToImageFilterCIUS3CIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUS3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUS3
        GetInput(self, idx) -> itkCudaImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS3 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUS3CIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUS3CIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_cast(obj)

# Register itkImageToImageFilterCIUS3CIUS3 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS3CIUS3_swigregister(itkImageToImageFilterCIUS3CIUS3)
class itkImageToImageFilterCIUS4CIUS4(itk.itkImageSourceCudaCommonPython.itkImageSourceCIUS4):
    r"""Proxy of C++ itkImageToImageFilterCIUS4CIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageUS4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageUS4
        GetInput(self, idx) -> itkCudaImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageUS4 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIUS4CIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIUS4CIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_cast(obj)

# Register itkImageToImageFilterCIUS4CIUS4 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIUS4CIUS4_swigregister(itkImageToImageFilterCIUS4CIUS4)
class itkImageToImageFilterCIVF22CIVF22(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF22):
    r"""Proxy of C++ itkImageToImageFilterCIVF22CIVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF22 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF22
        GetInput(self, idx) -> itkCudaImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF22 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF22 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF22CIVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF22CIVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_cast(obj)

# Register itkImageToImageFilterCIVF22CIVF22 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF22CIVF22_swigregister(itkImageToImageFilterCIVF22CIVF22)
class itkImageToImageFilterCIVF23CIVF23(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF23):
    r"""Proxy of C++ itkImageToImageFilterCIVF23CIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF23 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF23
        GetInput(self, idx) -> itkCudaImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF23 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF23 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF23CIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF23CIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_cast(obj)

# Register itkImageToImageFilterCIVF23CIVF23 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF23CIVF23_swigregister(itkImageToImageFilterCIVF23CIVF23)
class itkImageToImageFilterCIVF24CIVF24(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF24):
    r"""Proxy of C++ itkImageToImageFilterCIVF24CIVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF24 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF24
        GetInput(self, idx) -> itkCudaImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF24 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF24 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF24CIVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF24CIVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_cast(obj)

# Register itkImageToImageFilterCIVF24CIVF24 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF24CIVF24_swigregister(itkImageToImageFilterCIVF24CIVF24)
class itkImageToImageFilterCIVF32CIVF32(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF32):
    r"""Proxy of C++ itkImageToImageFilterCIVF32CIVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF32 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF32
        GetInput(self, idx) -> itkCudaImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF32 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF32 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF32CIVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF32CIVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_cast(obj)

# Register itkImageToImageFilterCIVF32CIVF32 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF32CIVF32_swigregister(itkImageToImageFilterCIVF32CIVF32)
class itkImageToImageFilterCIVF33CIVF33(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF33):
    r"""Proxy of C++ itkImageToImageFilterCIVF33CIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF33 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF33
        GetInput(self, idx) -> itkCudaImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF33 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF33 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF33CIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF33CIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_cast(obj)

# Register itkImageToImageFilterCIVF33CIVF33 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF33CIVF33_swigregister(itkImageToImageFilterCIVF33CIVF33)
class itkImageToImageFilterCIVF34CIVF34(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF34):
    r"""Proxy of C++ itkImageToImageFilterCIVF34CIVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF34 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF34
        GetInput(self, idx) -> itkCudaImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF34 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF34 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF34CIVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF34CIVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_cast(obj)

# Register itkImageToImageFilterCIVF34CIVF34 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF34CIVF34_swigregister(itkImageToImageFilterCIVF34CIVF34)
class itkImageToImageFilterCIVF42CIVF42(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF42):
    r"""Proxy of C++ itkImageToImageFilterCIVF42CIVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF42 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF42
        GetInput(self, idx) -> itkCudaImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF42 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF42 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF42CIVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF42CIVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_cast(obj)

# Register itkImageToImageFilterCIVF42CIVF42 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF42CIVF42_swigregister(itkImageToImageFilterCIVF42CIVF42)
class itkImageToImageFilterCIVF43CIVF43(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF43):
    r"""Proxy of C++ itkImageToImageFilterCIVF43CIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF43 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF43
        GetInput(self, idx) -> itkCudaImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF43 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF43 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF43CIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF43CIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_cast(obj)

# Register itkImageToImageFilterCIVF43CIVF43 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF43CIVF43_swigregister(itkImageToImageFilterCIVF43CIVF43)
class itkImageToImageFilterCIVF44CIVF44(itk.itkImageSourceCudaCommonPython.itkImageSourceCIVF44):
    r"""Proxy of C++ itkImageToImageFilterCIVF44CIVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkCudaImageVF44 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkCudaImageVF44
        GetInput(self, idx) -> itkCudaImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF44 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkCudaImageVF44 const *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterCudaCommonPython.delete_itkImageToImageFilterCIVF44CIVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterCIVF44CIVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_cast(obj)

# Register itkImageToImageFilterCIVF44CIVF44 in _itkImageToImageFilterCudaCommonPython:
_itkImageToImageFilterCudaCommonPython.itkImageToImageFilterCIVF44CIVF44_swigregister(itkImageToImageFilterCIVF44CIVF44)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.CudaCommon.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__



