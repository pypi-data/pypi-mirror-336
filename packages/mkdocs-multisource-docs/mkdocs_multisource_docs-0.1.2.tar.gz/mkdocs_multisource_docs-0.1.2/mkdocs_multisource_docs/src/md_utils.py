"""
Functionality to process Markdown files
"""
import logging
import re
from pathlib import Path

from mkdocs_multisource_docs.src.config import (AppConfig,
                                                get_application_config)
from mkdocs_multisource_docs.src.constants import BUILD_FOLDER_PATH

logger = logging.getLogger(__name__)


class MarkdownProcessing:
    """
    Process files before building
    """

    def __init__(self, application_config: AppConfig, docs_folder: Path) -> None:

        logger.info('Initializing MarkdownProcessing manager for directory %s', BUILD_FOLDER_PATH)
        self._config = application_config
        self._docs_folder = docs_folder

        self.__docs_names_map = {doc.name: doc for doc in self._config.DOCS_REPOSITORIES}

    def process_doc_folder(self):
        """
        Main processing flow
        """

        # (0) rename .docs to docs paths
        self._rename_docs_folders()

        # (1) get images without references
        images = self.get_images_without_references()
        # (2) generate docs for unreferenced images
        self.generate_doc_for_unreferenced_images(images=images)

        # (3) add master index
        if self._config.GENERATE_INDEX:
            self._add_master_index()

    def _rename_docs_folders(self):
        """
        Rename .docs folders into docs, remove .docs paths
        """
        for doc_name in self.__docs_names_map.keys():
            for path in (BUILD_FOLDER_PATH / doc_name).rglob('*'):
                if path.is_dir() and path.name == '.docs':
                    logger.info(msg=f'Found .docs directory in {path}. Renaming to docs')
                    newname = Path(str(path).replace(path.name, 'docs'))
                    newname.parent.mkdir(parents=True, exist_ok=True)
                    path.rename(newname)

    def _add_master_index(self) -> None:
        """
        Add master index.md file for all docs
        """
        logger.info('Adding master index.md file')
        header = '\n# Autogenerated Documents'

        document_repos = ', '.join(self.__docs_names_map.keys())
        content = f'\n\nDocumentation is built from repositories: {document_repos}'
        with open(file=self._docs_folder / 'index.md', mode='w', encoding='utf-8') as index:
            index.write(header + content)

    def generate_doc_for_unreferenced_images(self, images: list[Path]) -> None:
        """
        Generated documents for unreferenced images
        """

        logger.info('Generating documents for unreferenced .png images')
        total_generated_references = '\n\n'
        image_reference_pattern = r'!\[.*\]\(.*\.png\)'

        for image_path in images:
            logger.info('Generating document for image %s', image_path.name)
            logger.debug('Image is found in %s', image_path.parent)
            logger.debug('Image upper level directory is %s', image_path.parent.parent)
            logger.debug(
                'Generating page %s.md for image %s', image_path.name[:-4], image_path.name)

            file_header = f'# {image_path.name[:-4]}\n\n'
            image_reference_line = \
                f'![{image_path.name[:-4]}](./{image_path.parent.name}/{image_path.name})\n'
            file_header += image_reference_line

            # [BUG] Make sure to include all png images even if they have the same name
            img_filename = image_path.parent.parent/f'{image_path.name[:-4]}.md'
            if img_filename.exists():
                logger.info('Аdd another reference to existing file %s', img_filename)
                with open(img_filename, mode='r', encoding='utf-8') as page:
                    for match in re.findall(pattern=image_reference_pattern, string=page.read()):
                        file_header += match

            with open(file=img_filename, mode='w', encoding='utf-8') as page:
                page.write(file_header)
            logger.debug(
                'Generated page %s.md for image %s. Done!', image_path.name[:-4], image_path.name)

            # references.md
            relative_root = Path(
                str(image_path.parent).rsplit(str(BUILD_FOLDER_PATH.name), maxsplit=1)[-1]).parent
            image_reference_line_full = \
                f'- [{image_path.name[:-4]}.md](.{relative_root / f'{image_path.name[:-4]}.md'})\n'
            total_generated_references += image_reference_line_full
            logger.debug(msg=f'Generated reference for image {image_path.name}. Done!')

        full = '\n# Undocumented images'
        full += total_generated_references
        with open(file=self._docs_folder / 'references.md', mode='w', encoding='utf-8') as index:
            index.write(full)

    def get_images_without_references(self) -> list[Path]:
        """
        Return a list of image filenames without references in docs
        """
        result = []
        for doc_name in self.__docs_names_map.keys():
            text = ''
            for path in (BUILD_FOLDER_PATH / doc_name).rglob('*.md'):
                with open(file=path, mode='r', encoding='utf-8') as f:
                    text += f.read()
            result.extend([path for path in (BUILD_FOLDER_PATH / doc_name).rglob('*.png')
                           if path.name not in text and \
                            path.name not in self._config.EXCLUDE_IMAGES])
        logger.debug(msg=f'Collected the following images withoud documentation {result}')
        return result


if __name__ == '__main__':

    from mkdocs_multisource_docs.src.constants import TEST_APPLICATION_CONF
    config = get_application_config(config_path=TEST_APPLICATION_CONF)
    md_manager = MarkdownProcessing(application_config=config, docs_folder=BUILD_FOLDER_PATH)
    md_manager.process_doc_folder()
