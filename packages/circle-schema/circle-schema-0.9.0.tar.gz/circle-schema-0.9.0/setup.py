'''Configurations to build `circle-schema` python package'''

# NOTE only the standard libraries are allowed.
import os
import subprocess
import shutil
import setuptools
from pathlib import Path

# Versioning policy
# -----------------
#
# Given a circle schema version "N(.N)*",
# the version of `circle-schema` python package is defined with
# - one additional integer for to represent the revision of this python package
# - and optional suffices
# as long as the version identifier conforms to the [PEP-440](https://peps.python.org/pep-0440/).
CIRCLE_SCHEMA_VERSION = '0.9'
PYTHON_PACKAGE_REVISION = '0'

# NOTE While creating a package, extra tag may be added to the below version identifier.
# For details, see https://github.com/pypa/setuptools/blob/v58.0.4/docs/userguide/distribution.rst
VERSION = f'{CIRCLE_SCHEMA_VERSION}.{PYTHON_PACKAGE_REVISION}'

# Packaging policy
# ----------------
#
# `circle-schema` package serves circle flatbuffer API of multiple schema versions in a single package.
# See https://github.sec.samsung.net/AIP/python-tools/issues/468#issuecomment-1997150 for background.
#
# Users can write code as the below.
#
# ```python
# from circle_schema import circle  # Use the latest schema version
#
# from circle_schema.v0_4 import circle  # Use schema 0.4
# from circle_schema.v0_5 import circle  # Use schema 0.5
# ```
TOP_LEVEL_PACKAGE = 'circle_schema'

EXPECTED_FLATC_VERSION = '2.0.0'

def to_module_name(schema_version):
  return f'v{schema_version}'.replace('.', '_')

class FBS:
  def __init__(self, fbs_path):
    if not fbs_path.is_file():
      raise RuntimeError(f'Cannot find {fbs_path}.')

    self._fbs_path = fbs_path
    self._schema_version = fbs_path.parent.name  # Example: "0.4"

  def to(self, out_dir):
    '''Compile .fbs file into python (generated outputs are saved under `out_dir`).

    This function generates below files under <out_dir>.

      /__init__.py                         # Empty file
      /path/__init__.py                    # Empty file
      /path/to/__init__.py                 # Empty file
      /path/to/self/__init__.py            # Empty file
      /path/to/self/namespace/__init__.py  # See "NOTE" below
      /path/to/self/namespace/*.py         # Files like `Model.py`, `SubGraph.py`, ...

    NOTE

    This function adds extra 'import' statement to the leaf `__init__.py` file generated by flatc.
    It allows accessing circle API without extra import statement.
    '''

    self._compile_fbs_to_python(out_dir)
    self._import_circle_modules(out_dir)


  def _namespace(self):
    # TODO Read namespace from the input fbs file
    return [TOP_LEVEL_PACKAGE, to_module_name(self._schema_version), 'circle']  # NOTE This must be in sync with the namespace in .fbs file.

  def _compile_fbs_to_python(self, out_dir):
    '''Compile .fbs file into python'''

    # Ensure flatc is available
    flatc_bin = shutil.which('flatc', path=os.getenv('FLATC_PATH', None))
    if flatc_bin is None:
      raise RuntimeError(f'Cannot find `flatc`. Please install flatc-{EXPECTED_FLATC_VERSION}')

    # Check flatc version
    flatc_version_str = subprocess.check_output([flatc_bin, '--version']).decode()
    if EXPECTED_FLATC_VERSION not in flatc_version_str:
      raise RuntimeError(f'Found unexpected {flatc_version_str}. Please install flatc-'
                         f'{EXPECTED_FLATC_VERSION} and set `FLATC_PATH` environment variable.')

    # Compile
    cmd = [flatc_bin, '--python', '--gen-object-api', '-o', out_dir, self._fbs_path]
    subprocess.check_call(cmd)

    # Ensure output
    if not (out_dir / '/'.join(self._namespace())).is_dir():
      raise RuntimeError(f'Failed to compile {self._fbs_path}')

  def _import_circle_modules(self, out_dir):
    '''Import out_dir/self._namespace()/*.py under out_dir/self._namespace()/__init__.py.

    This method updates the __init__.py,
    to directly access required modules (e.g. `circle/Model.py`) without extra import statement.
    '''

    circle_schema_circle_init_py = out_dir / '/'.join(self._namespace()) / '__init__.py'
    with open(circle_schema_circle_init_py, 'a') as f:
      f.write('# The below contents has been auto-generated\n')
      f.write('\n')
      # Expose modules
      for module in (out_dir / '/'.join(self._namespace())).glob('[A-Z]*.py'):
        # NOTE: This import statement does not pollute the namespace under `circle_schema.circle`.
        # NOTE: Let's expose modules by its names to avoid circular namespace issue.
        #       See https://github.sec.samsung.net/AIP/python-tools/issues/729
        f.write(f'from . import {module.stem}\n')

PKG_ROOT = Path(__file__).parent.resolve()

# Remove any existing auto-generated directories
# NOTE The entire package contents under `circle_schema` are auto-generated
shutil.rmtree(PKG_ROOT / TOP_LEVEL_PACKAGE, ignore_errors=True)

for FBS_PATH in Path(PKG_ROOT).glob('schema/*/circle_schema.fbs'):
  assert FBS_PATH.is_file(), f'Unknown file: `{FBS_PATH}`'
  FBS(FBS_PATH).to(PKG_ROOT)
Path(PKG_ROOT / TOP_LEVEL_PACKAGE / 'py.typed').touch()

# Export the API from current `CIRCLE_SCHEMA_VERSION` as default
with open(PKG_ROOT / TOP_LEVEL_PACKAGE / '__init__.py', 'w') as f:
  f.write(f'import {TOP_LEVEL_PACKAGE}.{to_module_name(CIRCLE_SCHEMA_VERSION)}.circle as circle')

setuptools.setup(
    name='circle-schema',
    version=VERSION,
    description='Python bindings for circle schema for project ONE',
    author='nnfw',
    author_email='nnfw@samsung.com',
    url='https://github.com/Samsung/ONE',
    keywords=['Samsung', 'ONE', 'AI', 'AI framework', 'circle'],
    packages=setuptools.find_packages(exclude=['test']),
    package_data={
      'circle_schema': ['py.typed'],
    },
    install_requires=[
      'flatbuffers>=1.11',
      # Let's make numpy as mandatory, to easily use `*asNumpy` API.
      #
      # From https://google.github.io/flatbuffers/flatbuffers_guide_use_python.html
      #
      # Numpy is not a requirement. If numpy is not installed on your system, then attempting to
      # access one of the *asNumpy() methods will result in a NumpyRequiredForThisFeature exception.
      'numpy',
    ],
)
