# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSecurityPolicyResult',
    'AwaitableGetSecurityPolicyResult',
    'get_security_policy',
    'get_security_policy_output',
]

@pulumi.output_type
class GetSecurityPolicyResult:
    """
    A collection of values returned by getSecurityPolicy.
    """
    def __init__(__self__, audit_trail=None, definitions=None, description=None, direct_internet_applications=None, failure_mode=None, high_speed_logging_server_ip=None, high_speed_logging_server_port=None, high_speed_logging_vpn=None, id=None, loggings=None, match_statistics_per_filter=None, mode=None, name=None, tcp_syn_flood_limit=None, use_case=None, version=None):
        if audit_trail and not isinstance(audit_trail, str):
            raise TypeError("Expected argument 'audit_trail' to be a str")
        pulumi.set(__self__, "audit_trail", audit_trail)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if direct_internet_applications and not isinstance(direct_internet_applications, str):
            raise TypeError("Expected argument 'direct_internet_applications' to be a str")
        pulumi.set(__self__, "direct_internet_applications", direct_internet_applications)
        if failure_mode and not isinstance(failure_mode, str):
            raise TypeError("Expected argument 'failure_mode' to be a str")
        pulumi.set(__self__, "failure_mode", failure_mode)
        if high_speed_logging_server_ip and not isinstance(high_speed_logging_server_ip, str):
            raise TypeError("Expected argument 'high_speed_logging_server_ip' to be a str")
        pulumi.set(__self__, "high_speed_logging_server_ip", high_speed_logging_server_ip)
        if high_speed_logging_server_port and not isinstance(high_speed_logging_server_port, str):
            raise TypeError("Expected argument 'high_speed_logging_server_port' to be a str")
        pulumi.set(__self__, "high_speed_logging_server_port", high_speed_logging_server_port)
        if high_speed_logging_vpn and not isinstance(high_speed_logging_vpn, str):
            raise TypeError("Expected argument 'high_speed_logging_vpn' to be a str")
        pulumi.set(__self__, "high_speed_logging_vpn", high_speed_logging_vpn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if loggings and not isinstance(loggings, list):
            raise TypeError("Expected argument 'loggings' to be a list")
        pulumi.set(__self__, "loggings", loggings)
        if match_statistics_per_filter and not isinstance(match_statistics_per_filter, str):
            raise TypeError("Expected argument 'match_statistics_per_filter' to be a str")
        pulumi.set(__self__, "match_statistics_per_filter", match_statistics_per_filter)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tcp_syn_flood_limit and not isinstance(tcp_syn_flood_limit, str):
            raise TypeError("Expected argument 'tcp_syn_flood_limit' to be a str")
        pulumi.set(__self__, "tcp_syn_flood_limit", tcp_syn_flood_limit)
        if use_case and not isinstance(use_case, str):
            raise TypeError("Expected argument 'use_case' to be a str")
        pulumi.set(__self__, "use_case", use_case)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="auditTrail")
    def audit_trail(self) -> str:
        """
        Audit trail
        """
        return pulumi.get(self, "audit_trail")

    @property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetSecurityPolicyDefinitionResult']:
        """
        List of policy definitions
        """
        return pulumi.get(self, "definitions")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the security policy
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directInternetApplications")
    def direct_internet_applications(self) -> str:
        """
        Bypass firewall policy and allow all Internet traffic to/from VPN 0
        """
        return pulumi.get(self, "direct_internet_applications")

    @property
    @pulumi.getter(name="failureMode")
    def failure_mode(self) -> str:
        """
        Failure mode
        """
        return pulumi.get(self, "failure_mode")

    @property
    @pulumi.getter(name="highSpeedLoggingServerIp")
    def high_speed_logging_server_ip(self) -> str:
        """
        High Speed Logging Server IP
        """
        return pulumi.get(self, "high_speed_logging_server_ip")

    @property
    @pulumi.getter(name="highSpeedLoggingServerPort")
    def high_speed_logging_server_port(self) -> str:
        """
        High Speed Logging Port
        """
        return pulumi.get(self, "high_speed_logging_server_port")

    @property
    @pulumi.getter(name="highSpeedLoggingVpn")
    def high_speed_logging_vpn(self) -> str:
        """
        High Speed Logging VPN
        """
        return pulumi.get(self, "high_speed_logging_vpn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def loggings(self) -> Sequence['outputs.GetSecurityPolicyLoggingResult']:
        return pulumi.get(self, "loggings")

    @property
    @pulumi.getter(name="matchStatisticsPerFilter")
    def match_statistics_per_filter(self) -> str:
        """
        Match Statistics per-filter
        """
        return pulumi.get(self, "match_statistics_per_filter")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The policy mode
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the security policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcpSynFloodLimit")
    def tcp_syn_flood_limit(self) -> str:
        """
        TCP SYN Flood Limit, value from 1 to 4294967295
        """
        return pulumi.get(self, "tcp_syn_flood_limit")

    @property
    @pulumi.getter(name="useCase")
    def use_case(self) -> str:
        """
        The use case of the security policy
        """
        return pulumi.get(self, "use_case")

    @property
    @pulumi.getter
    def version(self) -> int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetSecurityPolicyResult(GetSecurityPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityPolicyResult(
            audit_trail=self.audit_trail,
            definitions=self.definitions,
            description=self.description,
            direct_internet_applications=self.direct_internet_applications,
            failure_mode=self.failure_mode,
            high_speed_logging_server_ip=self.high_speed_logging_server_ip,
            high_speed_logging_server_port=self.high_speed_logging_server_port,
            high_speed_logging_vpn=self.high_speed_logging_vpn,
            id=self.id,
            loggings=self.loggings,
            match_statistics_per_filter=self.match_statistics_per_filter,
            mode=self.mode,
            name=self.name,
            tcp_syn_flood_limit=self.tcp_syn_flood_limit,
            use_case=self.use_case,
            version=self.version)


def get_security_policy(id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityPolicyResult:
    """
    This data source can read the Security Policy .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_security_policy(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getSecurityPolicy:getSecurityPolicy', __args__, opts=opts, typ=GetSecurityPolicyResult).value

    return AwaitableGetSecurityPolicyResult(
        audit_trail=pulumi.get(__ret__, 'audit_trail'),
        definitions=pulumi.get(__ret__, 'definitions'),
        description=pulumi.get(__ret__, 'description'),
        direct_internet_applications=pulumi.get(__ret__, 'direct_internet_applications'),
        failure_mode=pulumi.get(__ret__, 'failure_mode'),
        high_speed_logging_server_ip=pulumi.get(__ret__, 'high_speed_logging_server_ip'),
        high_speed_logging_server_port=pulumi.get(__ret__, 'high_speed_logging_server_port'),
        high_speed_logging_vpn=pulumi.get(__ret__, 'high_speed_logging_vpn'),
        id=pulumi.get(__ret__, 'id'),
        loggings=pulumi.get(__ret__, 'loggings'),
        match_statistics_per_filter=pulumi.get(__ret__, 'match_statistics_per_filter'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        tcp_syn_flood_limit=pulumi.get(__ret__, 'tcp_syn_flood_limit'),
        use_case=pulumi.get(__ret__, 'use_case'),
        version=pulumi.get(__ret__, 'version'))
def get_security_policy_output(id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityPolicyResult]:
    """
    This data source can read the Security Policy .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_security_policy(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getSecurityPolicy:getSecurityPolicy', __args__, opts=opts, typ=GetSecurityPolicyResult)
    return __ret__.apply(lambda __response__: GetSecurityPolicyResult(
        audit_trail=pulumi.get(__response__, 'audit_trail'),
        definitions=pulumi.get(__response__, 'definitions'),
        description=pulumi.get(__response__, 'description'),
        direct_internet_applications=pulumi.get(__response__, 'direct_internet_applications'),
        failure_mode=pulumi.get(__response__, 'failure_mode'),
        high_speed_logging_server_ip=pulumi.get(__response__, 'high_speed_logging_server_ip'),
        high_speed_logging_server_port=pulumi.get(__response__, 'high_speed_logging_server_port'),
        high_speed_logging_vpn=pulumi.get(__response__, 'high_speed_logging_vpn'),
        id=pulumi.get(__response__, 'id'),
        loggings=pulumi.get(__response__, 'loggings'),
        match_statistics_per_filter=pulumi.get(__response__, 'match_statistics_per_filter'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        tcp_syn_flood_limit=pulumi.get(__response__, 'tcp_syn_flood_limit'),
        use_case=pulumi.get(__response__, 'use_case'),
        version=pulumi.get(__response__, 'version')))
