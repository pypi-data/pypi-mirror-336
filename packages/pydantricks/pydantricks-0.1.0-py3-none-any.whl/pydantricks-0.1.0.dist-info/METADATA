Metadata-Version: 2.1
Name: pydantricks
Version: 0.1.0
Summary: Faker for pydantic models.
Author-Email: Guillaume Gauvrit <guillaume@gauvr.it>
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Utilities
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Typing :: Typed
Requires-Python: >=3.10
Requires-Dist: faker<38,>=37.0.0
Requires-Dist: pydantic<3,>=2.5.0
Provides-Extra: docs
Requires-Dist: furo>=2024.5.6; extra == "docs"
Requires-Dist: linkify-it-py<3,>=2.0.3; extra == "docs"
Requires-Dist: myst-parser<4,>=3.0.0; python_version < "3.10" and extra == "docs"
Requires-Dist: myst-parser<5,>=4.0.0; python_version >= "3.10" and extra == "docs"
Requires-Dist: sphinx<8,>=7.0.1; extra == "docs"
Requires-Dist: sphinx-autodoc2<1,>=0.5.0; extra == "docs"
Description-Content-Type: text/markdown

# Pydantricks

Faker for pydantic models.



## Start simple

```python
>>> from pydantic import BaseModel
>>> from pydantricks import FieldFactory, ModelFactory
>>>
>>>
>>> class User(BaseModel):
...     username: str
...
>>>
>>> class UserFactory(ModelFactory[User]):
...     username = FieldFactory.field.user_name
...
>>> UserFactory()
User(username='qmiller')
>>> UserFactory()
User(username='harrisamanda')
>>> UserFactory()
User(username='jamesamy')
```

pydantricks support composed models as well.
