set(cmake_dir ${CMAKE_SOURCE_DIR}/cmake)
if(WIN32)
    set(OS_NAME WINDOWS)
elseif (UNIX AND NOT APPLE)
    if (ANDROID_ABI)
        set(OS_NAME ANDROID)
    else ()
        set(OS_NAME LINUX)
    endif ()
elseif (UNIX AND APPLE)
    set(OS_NAME MACOS)
endif ()
set(${OS_NAME} ON)

add_compile_definitions(IS_${OS_NAME})

if (DEFINED CMAKE_OSX_ARCHITECTURES AND NOT
        CMAKE_OSX_ARCHITECTURES STREQUAL "")
    set(OS_ARCH ${CMAKE_OSX_ARCHITECTURES})
else ()
    set(OS_ARCH ${CMAKE_HOST_SYSTEM_PROCESSOR})
endif ()

if (OS_ARCH STREQUAL "AMD64" OR OS_ARCH STREQUAL "x86_64")
    set(${OS_NAME}_x86_64 ON)
elseif (OS_ARCH STREQUAL "aarch64" OR OS_ARCH STREQUAL "arm64")
    set(${OS_NAME}_ARM64 ON)
endif ()

set(OS_FULL_NAME ${CMAKE_SYSTEM_NAME};${OS_ARCH})

function(setup_platform_libs target_name)
    if (WINDOWS)
        include(${cmake_dir}/Windows.cmake)
    elseif (ANDROID)
        include(${cmake_dir}/Android.cmake)
    elseif(LINUX)
        include(${cmake_dir}/Linux.cmake)
    elseif(MACOS)
        include(${cmake_dir}/macOS.cmake)
    else()
        message(FATAL_ERROR "${CMAKE_SYSTEM_NAME} with ${OS_ARCH} is not supported yet")
    endif()
endfunction()

function(GetProperty key result)
    file(READ "${props_loc}" file_content)
    string(REPLACE "." "\." key "${key}")
    string(REGEX MATCH "${key}=([^\r\n]*)" _ ${file_content})
    set(${result} ${CMAKE_MATCH_1} PARENT_SCOPE)
endfunction()

function(target_link_static_libraries src target_name)
    set(static_flags "-L${src}/lib")
    set(static_group "")
    list(APPEND static_group "-Wl,--push-state")
    list(APPEND static_group "-Bstatic")
    list(APPEND static_group "-Wl,--start-group")
    foreach(lib IN LISTS ARGN)
        list(APPEND static_group "-Wl,-l${lib}")
    endforeach()
    list(APPEND static_group "-Wl,--end-group")
    list(APPEND static_group "-Wl,--pop-state")
    target_link_libraries(${target_name} INTERFACE ${static_flags} ${static_group})
endfunction()