# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List

from getopenpay.models.invoice_external import InvoiceExternal
from getopenpay.models.subscription_external import SubscriptionExternal
from pydantic import BaseModel

try:
  from typing import Self
except ImportError:
  from typing_extensions import Self


class CreateSubscriptionResponse(BaseModel):
  """
    CreateSubscriptionResponse
    """

  # noqa: E501
  created: List[SubscriptionExternal]
  invoices: List[InvoiceExternal]
  __properties: ClassVar[List[str]] = ['created', 'invoices']

  model_config = {'populate_by_name': True, 'validate_assignment': True}

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.model_dump(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> Self:
    """Create an instance of CreateSubscriptionResponse from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self) -> Dict[str, Any]:
    """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
    _dict = self.model_dump(
      by_alias=True,
      exclude={},
      exclude_none=True,
    )
    # override the default output from pydantic by calling `to_dict()` of each item in created (list)
    _items = []
    if self.created:
      for _item in self.created:
        if _item:
          _items.append(_item.to_dict())
      _dict['created'] = _items
    # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
    _items = []
    if self.invoices:
      for _item in self.invoices:
        if _item:
          _items.append(_item.to_dict())
      _dict['invoices'] = _items
    return _dict

  @classmethod
  def from_dict(cls, obj: Dict) -> Self:
    """Create an instance of CreateSubscriptionResponse from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return cls.model_validate(obj)

    _obj = cls.model_validate(
      {
        'created':
          [SubscriptionExternal.from_dict(_item) for _item in obj.get('created')]
          if obj.get('created') is not None else None,
        'invoices':
          [InvoiceExternal.from_dict(_item) for _item in obj.get('invoices')]
          if obj.get('invoices') is not None else None
      }
    )
    return _obj
